{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/ant/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/ant/source/css/highlight.css","path":"css/highlight.css","modified":1,"renderable":1},{"_id":"themes/ant/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/ant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/ant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/ant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/ant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/ant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/ant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/ant/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/ant/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/ant/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/ant/source/images/default-avatar.jpg","path":"images/default-avatar.jpg","modified":1,"renderable":1},{"_id":"themes/ant/source/images/default-avatar.webp","path":"images/default-avatar.webp","modified":1,"renderable":1},{"_id":"themes/ant/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/ant/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/ant/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/ant/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/ant/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/ant/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/ant/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/ant/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/ant/source/images/icons/css_cloud.png","path":"images/icons/css_cloud.png","modified":1,"renderable":1},{"_id":"themes/ant/source/images/icons/css_doorframe.png","path":"images/icons/css_doorframe.png","modified":1,"renderable":1},{"_id":"themes/ant/source/images/icons/css_pattern_bottom.png","path":"images/icons/css_pattern_bottom.png","modified":1,"renderable":1},{"_id":"themes/ant/source/images/icons/css_tag.png","path":"images/icons/css_tag.png","modified":1,"renderable":1},{"_id":"themes/ant/source/images/icons/css_texture.png","path":"images/icons/css_texture.png","modified":1,"renderable":1},{"_id":"themes/ant/source/images/icons/css_patterns.png","path":"images/icons/css_patterns.png","modified":1,"renderable":1},{"_id":"themes/ant/source/images/icons/css_window_frame.png","path":"images/icons/css_window_frame.png","modified":1,"renderable":1},{"_id":"themes/ant/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1},{"_id":"themes/ant/source/images/bg.webp","path":"images/bg.webp","modified":1,"renderable":1},{"_id":"themes/ant/source/images/bg.jpg","path":"images/bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"1c003b23b242673c58db0d5177ec084d83d9acd8","modified":1584441451881},{"_id":"themes/ant/.DS_Store","hash":"8c4701d8dd61c665de261240f293596bcc1dd337","modified":1571281706858},{"_id":"themes/ant/_config.yml","hash":"13f5832d02b3d0acaa18aaae5b17d0dae4018f14","modified":1578974459580},{"_id":"themes/ant/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1571281706858},{"_id":"themes/ant/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1571281706858},{"_id":"themes/ant/README.md","hash":"7583afa189b9fd96f286072f4ba1fb312b112f80","modified":1571281706858},{"_id":"themes/ant/package.json","hash":"246844e9561f8e8efc46323e3226d56f1a8070ae","modified":1571281706866},{"_id":"source/_posts/Array.md","hash":"3deb09174703af2f6e5e61ba71284d7055b74528","modified":1583405660324},{"_id":"source/_posts/NTFS.md","hash":"af356237c79dfcca1e04928adfe502d0819d3f51","modified":1584442348009},{"_id":"source/_posts/docker-2.md","hash":"e691b0a7a48a9345ee14302a8eb6309d903d41d5","modified":1578382269433},{"_id":"source/_posts/docker.md","hash":"02f3cf9e588822095712ab77a6a827de2f54e6a3","modified":1573441714076},{"_id":"source/_posts/font-awesome.md","hash":"c77828a6c43bd909342fa976e8b43b7f6ef26495","modified":1584618239135},{"_id":"source/_posts/git.md","hash":"d2524a2e66576c6fb0982921372610db5569b382","modified":1584962147399},{"_id":"source/_posts/hello-world.md","hash":"670bfd2c7dc758629966fa86ba79f6ff889440ae","modified":1578974368508},{"_id":"source/_posts/img.md","hash":"40a0f89f92ebca7ad56a29611265f3b5a66774b8","modified":1584530638911},{"_id":"source/_posts/javaScript-1.md","hash":"fa69277d78a6611d7a77dac1803c96d4af3f12cd","modified":1583717938845},{"_id":"source/_posts/linux-指令-常用指令.md","hash":"4988f94ffa59115f0ef305bcf5e016f84e01dddd","modified":1578971954354},{"_id":"source/_posts/linux-指令.md","hash":"01133026735b198722188d3f28100b3358e9a911","modified":1579167686758},{"_id":"source/_posts/mysql.md","hash":"22ce8c595e2f816023977c12dc1db402bc075ca5","modified":1571985131350},{"_id":"source/_posts/nginx.md","hash":"df47f847725339d49ef8cd488de5ff12ffc07614","modified":1574316900289},{"_id":"source/_posts/oracle.md","hash":"04fcf33b6c576625e6792d4b56e9bfed849f4068","modified":1579088171171},{"_id":"source/_posts/react.md","hash":"88c896d06993b3633e4acff7818076780ebcc922","modified":1578034865234},{"_id":"source/_posts/spring-事务配置.md","hash":"f6399f71c20fd9e4a74bcd1d45d3b5107ca3d467","modified":1578362798654},{"_id":"source/_posts/ssh免密钥登录.md","hash":"a05f6892cbd17d59d33047a980aab2b6a5391393","modified":1574127497706},{"_id":"source/_posts/web-service-1.md","hash":"508ef1f51809efc8ed4492d5e4925e34cf3dd25d","modified":1578359365869},{"_id":"source/_posts/web-service.md","hash":"db6f51b5b0e0825e477bc948e5f06a72326ac8b0","modified":1578035931687},{"_id":"themes/ant/.git/COMMIT_EDITMSG","hash":"019cf4a31b33e4ac508332396d2135f306be3068","modified":1573724751566},{"_id":"themes/ant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1573817032581},{"_id":"themes/ant/.git/ORIG_HEAD","hash":"503e2b5bbb8bb682d7643fd503e3cfda0ef96df7","modified":1573817032577},{"_id":"themes/ant/.git/config","hash":"f13b75a147ba44e001442c3707952cb3dd2ff9f0","modified":1571281706855},{"_id":"themes/ant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1571281698837},{"_id":"themes/ant/.git/index","hash":"035286a1cafc6be9b8b1b053f379c976a91f7240","modified":1573817033298},{"_id":"themes/ant/.git/packed-refs","hash":"54fd24ce0d56aca40b7ae41e2485e16eb4065886","modified":1571281706852},{"_id":"themes/ant/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1571281706859},{"_id":"themes/ant/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1571281706859},{"_id":"themes/ant/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1571281706859},{"_id":"themes/ant/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1571281706859},{"_id":"themes/ant/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1571281706859},{"_id":"themes/ant/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1571281706859},{"_id":"themes/ant/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1571281706860},{"_id":"themes/ant/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1571281706860},{"_id":"themes/ant/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1571281706860},{"_id":"themes/ant/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1571281706860},{"_id":"themes/ant/languages/zh-CN.yml","hash":"52772fe0c7e6d932c1b103e79acd6b1985d6e473","modified":1571281706860},{"_id":"themes/ant/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1571281706860},{"_id":"themes/ant/layout/.DS_Store","hash":"6d0dff98dc62cd330641a53442988bc5a162ee95","modified":1571281706860},{"_id":"themes/ant/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1571281706865},{"_id":"themes/ant/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1571281706865},{"_id":"themes/ant/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1571281706865},{"_id":"themes/ant/layout/layout.ejs","hash":"ebbeb3601616a3910ece137294665d1618134db0","modified":1571281706866},{"_id":"themes/ant/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1571281706866},{"_id":"themes/ant/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1571281706866},{"_id":"themes/ant/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1571281706866},{"_id":"themes/ant/scripts/fancybox.js","hash":"76033c94a88f4ee264e1a55885077614a463b164","modified":1571281706866},{"_id":"themes/ant/scripts/highlight.js","hash":"b6007d3aeb60e63918ed4aa5a7012edebcabe648","modified":1571281706867},{"_id":"themes/ant/source/.DS_Store","hash":"99fba842ea69f6c482eebaa777273e75c107667d","modified":1571281706867},{"_id":"source/_posts/git/git四大区.jpg","hash":"0896242aa82ff35d92e96e95be723662f564377a","modified":1578969507645},{"_id":"source/_posts/git/git文件四种状态.png","hash":"4e259bf41d408d7e8b749d6a53cb41abbc16e88b","modified":1578969492783},{"_id":"themes/ant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1571281698837},{"_id":"themes/ant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1571281698837},{"_id":"themes/ant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1571281698838},{"_id":"themes/ant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1571281698838},{"_id":"themes/ant/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1571281698837},{"_id":"themes/ant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1571281698838},{"_id":"themes/ant/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1571281698837},{"_id":"themes/ant/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1571281698838},{"_id":"themes/ant/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1571281698838},{"_id":"themes/ant/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1571281698838},{"_id":"themes/ant/.git/logs/HEAD","hash":"eae3abc6ddbbc793af5fe17a780aca64cd658aeb","modified":1573817032581},{"_id":"themes/ant/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1571281698837},{"_id":"themes/ant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1571281698836},{"_id":"themes/ant/layout/_partial/after-footer.ejs","hash":"42c0ad48df344b4491496a560144caad1a26feb4","modified":1571281706861},{"_id":"themes/ant/layout/_partial/archive-post.ejs","hash":"bf2d4df064412a50090659751e904e545b4685b3","modified":1571281706861},{"_id":"themes/ant/layout/_partial/archive.ejs","hash":"5f9b37c8f6cec16ca8ba4f829bba40ef3998053c","modified":1571281706861},{"_id":"themes/ant/layout/_partial/article.ejs","hash":"db76e0685dcb3cd412d7575e117fbe2f81d85c5e","modified":1571281706861},{"_id":"themes/ant/layout/_partial/footer.ejs","hash":"2aeb4f4cf130cb755a0e076f8ba77e20da3e55f0","modified":1571281706861},{"_id":"themes/ant/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1571281706861},{"_id":"themes/ant/layout/_partial/gitment.ejs","hash":"c1503ea650fbd5c3822c575f9e50916ac1bdb7b0","modified":1571281706862},{"_id":"themes/ant/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1571281706862},{"_id":"themes/ant/layout/_partial/head.ejs","hash":"5d8a954490b3eeacf933fcbd9ddf324b65e6b2a1","modified":1571281706862},{"_id":"themes/ant/layout/_partial/header.ejs","hash":"4bb1fd7d6968c8ba087be416fa0380448a5a4fbe","modified":1571281706862},{"_id":"themes/ant/layout/_partial/mobile-nav.ejs","hash":"9bdd2ebf36b58515753d6cf333c512afadccf6c5","modified":1571281706862},{"_id":"themes/ant/layout/_partial/sidebar.ejs","hash":"99e2b2b2889b31260d717018d5b47bed766af874","modified":1571281706864},{"_id":"themes/ant/layout/_widget/archive.ejs","hash":"9e68bbce7f8d4faa269aa6b92e712f7b7cad3219","modified":1571281706864},{"_id":"themes/ant/layout/_widget/blogroll.ejs","hash":"42510f57e4bb722630795593514d49db2c1c30ef","modified":1571281706864},{"_id":"themes/ant/layout/_widget/category.ejs","hash":"00ae982ae180e1b33ec07c5151a9938176e8f14c","modified":1571281706864},{"_id":"themes/ant/layout/_widget/recent_posts.ejs","hash":"f9f0f53c63d4a9dd4539ad9cf9e00c2e8c76ddd5","modified":1571281706864},{"_id":"themes/ant/layout/_widget/tag.ejs","hash":"4c3e2a7ccce5106e52df57536ff48c4a9a0efdb7","modified":1571281706865},{"_id":"themes/ant/layout/_widget/tagcloud.ejs","hash":"08351a46597c6f8f1188104ca71a9c9d0d35515c","modified":1571281706865},{"_id":"themes/ant/layout/_widget/userinfo.ejs","hash":"3f7d295d540beb6b2f4faa02a5f4b0e6d42c9144","modified":1571281706865},{"_id":"themes/ant/source/css/gitment.css","hash":"e55f6e10aa635347ca5d9a610f12d295dbdc824f","modified":1571281706867},{"_id":"themes/ant/source/css/highlight.css","hash":"358c8414fbc5eafa50fddfb67dbd6159d54e40ec","modified":1571281706868},{"_id":"themes/ant/source/css/style.css","hash":"2603b303d42facdff262ae26be036e49c3b79576","modified":1571281706868},{"_id":"themes/ant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1571281706868},{"_id":"themes/ant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1571281706868},{"_id":"themes/ant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1571281706869},{"_id":"themes/ant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1571281706868},{"_id":"themes/ant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1571281706869},{"_id":"themes/ant/source/css/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1571281706867},{"_id":"themes/ant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1571281706869},{"_id":"themes/ant/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1571281706870},{"_id":"themes/ant/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1571281706870},{"_id":"themes/ant/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1571281706871},{"_id":"themes/ant/source/images/default-avatar.jpg","hash":"93e8abd83d87278933a668806e169f8378bdf197","modified":1571281706874},{"_id":"themes/ant/source/images/default-avatar.webp","hash":"7e8038610eaf540c08764e848350bb4df8a3dd10","modified":1571281706874},{"_id":"themes/ant/source/images/.DS_Store","hash":"5431738d0c753c190549005feaeb87b6da96566d","modified":1571281706871},{"_id":"themes/ant/source/js/script.js","hash":"00e5e2b43068555a83d09f7713c7194dfd8b8889","modified":1571281706879},{"_id":"source/_posts/git/状态转变.jpeg","hash":"4041e071a79b81b0fc7bbe67b7d805e07ad94884","modified":1578969432110},{"_id":"source/_posts/react/package.png","hash":"bd842bee285eb6ddaa10405e48b1441463e9e971","modified":1577782094000},{"_id":"themes/ant/source/js/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1571281706878},{"_id":"themes/ant/.git/objects/dd/69364589412ba5f1cbef676e013a94c1fe1912","hash":"38cd87e93b3619cd32ed85eae5b5da5a1465e265","modified":1573724751561},{"_id":"themes/ant/.git/objects/6b/1b3be67b4e7b821bf9ff335f3a100831e69146","hash":"367181f534396d1ab86a362f6f9653272049aa42","modified":1573724751545},{"_id":"themes/ant/.git/objects/f0/12dabc9b6a67bdd5a4f9e6ec78232def6e4a0c","hash":"0d9c4157dafc794001ae8696295a4ad7f6c9df1d","modified":1573724751567},{"_id":"themes/ant/.git/refs/heads/master","hash":"50f0ac153fc314ce3832bd222c6e271facbfb49a","modified":1573817032579},{"_id":"themes/ant/.git/objects/pack/pack-9f914c4c3de43f59a1258882d3fe021ebeea11ad.idx","hash":"68c6462ad563e38a926a157c04a0a33843c790c0","modified":1571281706842},{"_id":"themes/ant/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1571281706863},{"_id":"themes/ant/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1571281706863},{"_id":"themes/ant/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1571281706863},{"_id":"themes/ant/layout/_partial/post/nav.ejs","hash":"f6a2469d60b76884fa572e0eb58a99c35e6d00b8","modified":1571281706863},{"_id":"themes/ant/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1571281706863},{"_id":"themes/ant/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1571281706863},{"_id":"themes/ant/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1571281706869},{"_id":"themes/ant/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1571281706869},{"_id":"themes/ant/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1571281706869},{"_id":"themes/ant/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1571281706870},{"_id":"themes/ant/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1571281706870},{"_id":"themes/ant/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1571281706870},{"_id":"themes/ant/source/images/icons/css_cloud.png","hash":"df67b83b62174a2965628d81abe9b8a5c4a89728","modified":1571281706875},{"_id":"themes/ant/source/images/icons/css_doorframe.png","hash":"f5cbaefd062abc90337148e0e593949e0b1d6b2a","modified":1571281706875},{"_id":"themes/ant/source/images/icons/css_pattern_bottom.png","hash":"ff30fbc4ee81471ff3e44c2a8e15ba121e995f78","modified":1571281706875},{"_id":"themes/ant/source/images/icons/css_tag.png","hash":"25e3e0f37f0a86cf06463063e0f5381442d1a72a","modified":1571281706876},{"_id":"themes/ant/source/images/icons/css_texture.png","hash":"874074999995e6981d7602a7d5a770043a10b932","modified":1571281706876},{"_id":"themes/ant/source/images/icons/css_patterns.png","hash":"9345361fe1c631c74022759189bc44aa4a7053df","modified":1571281706876},{"_id":"themes/ant/source/images/icons/css_window_frame.png","hash":"7f985fc949cbecaf12982327d4b14e684bc2b205","modified":1571281706877},{"_id":"themes/ant/source/images/icons/.DS_Store","hash":"abc4ebcfd8325a4225fd09ad358633f7d5adcac4","modified":1571281706875},{"_id":"themes/ant/source/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1571281706878},{"_id":"themes/ant/source/images/bg.webp","hash":"782caa6411f07e19461a6a8b76897e058fd0e246","modified":1571281706874},{"_id":"themes/ant/.git/logs/refs/heads/master","hash":"897905738dfb87434e0c65bf5fa06b22d60cb501","modified":1573817032580},{"_id":"themes/ant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1571281706853},{"_id":"themes/ant/source/images/bg.jpg","hash":"d098391d1d2b19f09dbf24869d066b2fba300553","modified":1571281706873},{"_id":"source/_posts/javaScript-1/function.png","hash":"1a026dffd7a2e704538fe5e7e00e35a419a7521a","modified":1583457639000},{"_id":"themes/ant/.git/logs/refs/remotes/origin/HEAD","hash":"2e4227cee25ed73f9b1d602c81e97da8384dd6df","modified":1571281706853},{"_id":"themes/ant/.git/objects/pack/pack-9f914c4c3de43f59a1258882d3fe021ebeea11ad.pack","hash":"0db3c18a7a173ea37360cfed1368a26856aa627c","modified":1571281706842},{"_id":"public/2020/03/19/font-awesome/index.html","hash":"8c4cebb8f1f2e9b7aef05e80e4b4f339a02bc5c7","modified":1585456620282},{"_id":"public/2020/03/18/img/index.html","hash":"5edca388bb7894384e03ab9cb029dd7f93106d80","modified":1585456620282},{"_id":"public/2020/03/17/NTFS/index.html","hash":"5bef1329e1f48ddb210574fed4e9b58db0d5a9e8","modified":1585456620282},{"_id":"public/2020/03/09/javaScript-1/index.html","hash":"85e54088d8beb547f229f9f57cc124cd60f74b16","modified":1585456620282},{"_id":"public/2020/03/02/Array/index.html","hash":"0a32b6927c0185f13991b206f774b252ac92c069","modified":1585456620282},{"_id":"public/2020/01/13/linux-指令-常用指令/index.html","hash":"f8cd621e6df85c7d228f657f3eab8953267373be","modified":1585456620282},{"_id":"public/2020/01/07/linux-指令/index.html","hash":"bbe34f39b4ba31acd504a3b73f348b2f826322be","modified":1585456620282},{"_id":"public/2020/01/07/spring-事务配置/index.html","hash":"8e22010bc8004079287aa7264250c51e635fc42c","modified":1585456620282},{"_id":"public/2019/11/11/docker-2/index.html","hash":"2571c64bf1a0a63503d7e4ace63944874124f96c","modified":1585456620282},{"_id":"public/2019/11/08/docker/index.html","hash":"888edfacff333fd25ebdf2631f77b813112ac1a9","modified":1585456620282},{"_id":"public/2019/10/22/mysql/index.html","hash":"109d875d6fa958a2384eab1b4ad663af9cde4ea9","modified":1585456620282},{"_id":"public/2019/10/21/ssh免密钥登录/index.html","hash":"a697b4d117b5609615c700121874e139be17b1ed","modified":1585456620282},{"_id":"public/2019/10/16/hello-world/index.html","hash":"de7b1a7501ae62080b3558daa4c8811cb598cc67","modified":1585456620282},{"_id":"public/archives/index.html","hash":"0740da0a1fb64111d352f20676bc56132fcc5409","modified":1585456620282},{"_id":"public/archives/page/2/index.html","hash":"6b0ce93729268e62219237f5c6d503abc195cef7","modified":1585456620282},{"_id":"public/archives/2019/index.html","hash":"ea41dbfb2d1c7e9eed34dacabc7b091434f730fb","modified":1585456620282},{"_id":"public/archives/2019/10/index.html","hash":"5519bc2808c29100e91905bf138171b1237a6fa3","modified":1585456620282},{"_id":"public/archives/2019/11/index.html","hash":"b7b174cedc056184a30becea90451c9b5c036cca","modified":1585456620282},{"_id":"public/archives/2019/12/index.html","hash":"c1f2416d74acbc73dce47a196b1c5988381ec47e","modified":1585456620282},{"_id":"public/archives/2020/index.html","hash":"9239cc04f53051c02f80d3e8e70e5daf89154468","modified":1585456620282},{"_id":"public/archives/2020/01/index.html","hash":"12cac481e33802e9a114dcf463ff7401cf6accaf","modified":1585456620282},{"_id":"public/archives/2020/03/index.html","hash":"7597005b7f374bb62f09f8c4ee63103c6231a2c6","modified":1585456620282},{"_id":"public/tags/Mac/index.html","hash":"d5d82d2c5705339ced828600dc34855556858ec1","modified":1585456620282},{"_id":"public/tags/linux/index.html","hash":"df36e7bf22ca95225064759fbd90336b3e19a541","modified":1585456620282},{"_id":"public/tags/css/index.html","hash":"26f915cb37b9f7baff231dfd47fe772b8c2c5abc","modified":1585456620282},{"_id":"public/tags/版本控制/index.html","hash":"4f3ae8a6156570402b93e1d2984a1be5a9a2fb53","modified":1585456620282},{"_id":"public/tags/javaScript/index.html","hash":"b229b316bbd1d7cacdff8ccbd21b5a1284d3ffa4","modified":1585456620282},{"_id":"public/tags/数据库/index.html","hash":"66d9d0422d2b3622f3e8735a675779ba6cc229b4","modified":1585456620282},{"_id":"public/tags/服务/index.html","hash":"2f5b468546b9b4cad533ed28993e2781d9ebedba","modified":1585456620282},{"_id":"public/tags/前端/index.html","hash":"8a94258585aa6442dd1a47c9571ecbd178bcee1a","modified":1585456620282},{"_id":"public/tags/spring/index.html","hash":"60cab3058d09ef73a1889003ed9e716975535e02","modified":1585456620282},{"_id":"public/tags/web-service/index.html","hash":"4e3c5f22f28386c1d1d0012ae3b0c74172ddfd59","modified":1585456620282},{"_id":"public/2020/01/03/web-service-1/index.html","hash":"7cc985475d761160cdbc4c3c5aec1f017c2b00f8","modified":1585456620282},{"_id":"public/2019/12/31/react/index.html","hash":"fc61ed032c3189ea4c99be5e706bab095d56f3d4","modified":1585456620282},{"_id":"public/2019/11/13/web-service/index.html","hash":"7a8b645a75a344e52984703655b8aa68c4595a62","modified":1585456620282},{"_id":"public/2019/10/18/git/index.html","hash":"d1a4ce96760b1a35925c7c0dce5d2ced6d9fc4ab","modified":1585456620282},{"_id":"public/2019/10/17/nginx/index.html","hash":"fe11328444dde4c5a79d83123b435bf20a7e14ac","modified":1585456620282},{"_id":"public/2019/10/17/oracle/index.html","hash":"59de78c824126943317d208f95556c12b646324e","modified":1585456620282},{"_id":"public/index.html","hash":"5e2a44c0469bca7c98fa637a7cae1b3c320ab744","modified":1585456620282},{"_id":"public/page/2/index.html","hash":"a17ab4a9f199906db5dff9a4ee9d80889fd2b96c","modified":1585456620282},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1585456620282},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1585456620282},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1585456620282},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1585456620282},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1585456620282},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1585456620282},{"_id":"public/images/default-avatar.jpg","hash":"93e8abd83d87278933a668806e169f8378bdf197","modified":1585456620282},{"_id":"public/images/default-avatar.webp","hash":"7e8038610eaf540c08764e848350bb4df8a3dd10","modified":1585456620282},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1585456620282},{"_id":"public/images/icons/css_cloud.png","hash":"df67b83b62174a2965628d81abe9b8a5c4a89728","modified":1585456620282},{"_id":"public/images/icons/css_doorframe.png","hash":"f5cbaefd062abc90337148e0e593949e0b1d6b2a","modified":1585456620282},{"_id":"public/images/icons/css_pattern_bottom.png","hash":"ff30fbc4ee81471ff3e44c2a8e15ba121e995f78","modified":1585456620282},{"_id":"public/images/icons/css_tag.png","hash":"25e3e0f37f0a86cf06463063e0f5381442d1a72a","modified":1585456620282},{"_id":"public/images/icons/css_texture.png","hash":"874074999995e6981d7602a7d5a770043a10b932","modified":1585456620282},{"_id":"public/images/icons/css_window_frame.png","hash":"7f985fc949cbecaf12982327d4b14e684bc2b205","modified":1585456620282},{"_id":"public/images/icons/css_patterns.png","hash":"9345361fe1c631c74022759189bc44aa4a7053df","modified":1585456620282},{"_id":"public/2019/10/18/git/git四大区.jpg","hash":"0896242aa82ff35d92e96e95be723662f564377a","modified":1585456620282},{"_id":"public/2019/10/18/git/git文件四种状态.png","hash":"4e259bf41d408d7e8b749d6a53cb41abbc16e88b","modified":1585456620282},{"_id":"public/2019/12/31/react/package.png","hash":"bd842bee285eb6ddaa10405e48b1441463e9e971","modified":1585456620282},{"_id":"public/css/highlight.css","hash":"358c8414fbc5eafa50fddfb67dbd6159d54e40ec","modified":1585456620282},{"_id":"public/css/style.css","hash":"2603b303d42facdff262ae26be036e49c3b79576","modified":1585456620282},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1585456620282},{"_id":"public/js/script.js","hash":"00e5e2b43068555a83d09f7713c7194dfd8b8889","modified":1585456620282},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1585456620282},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1585456620282},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1585456620282},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1585456620282},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1585456620282},{"_id":"public/css/gitment.css","hash":"e55f6e10aa635347ca5d9a610f12d295dbdc824f","modified":1585456620282},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1585456620282},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1585456620282},{"_id":"public/js/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1585456620282},{"_id":"public/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1585456620282},{"_id":"public/2019/10/18/git/状态转变.jpeg","hash":"4041e071a79b81b0fc7bbe67b7d805e07ad94884","modified":1585456620282},{"_id":"public/images/bg.webp","hash":"782caa6411f07e19461a6a8b76897e058fd0e246","modified":1585456620282},{"_id":"public/2020/03/09/javaScript-1/function.png","hash":"1a026dffd7a2e704538fe5e7e00e35a419a7521a","modified":1585456620282},{"_id":"public/images/bg.jpg","hash":"d098391d1d2b19f09dbf24869d066b2fba300553","modified":1585456620282}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Array","date":"2020-03-02T10:33:49.000Z","_content":"js的文档也看了好多遍了，怎么每次碰到数组的操作，还是要bd。。。\n<!--more-->\n\n## 1. 初始化\n两种初始化的方式，第一种是使用构造函数\n``` bash\nvar arr = new Array();\n```\n括号里面可以给参数，但是不同的参数，会导致它的行为不一致。\n所以，建议使用另一种方式，也就是数组字面量\n``` bash\nvar arr = [1, 2, 3];\n```\n\n## 2. 实例方法\n数组的示例方法真的有好多，这里我把它分成两种：\n会改变原数组的 & 不会改变原数组的\n本来想一一列举的，但是好像没啥意义\n就画个表格吧～～\n\n方法|描述|参数1|参数2|返回|\n--|:--:|--:|--:|--:\n**不改变原数组**|\njoin|<font color=#FF0000> **转字符串** </font>|分隔符|--|字符串\nconcat()<sup>[1]</sup>|<font color=#FF0000> **合并** </font>|多个各种类型值|--|合并后的新数组|\nslice()<sup>[2]</sup>|<font color=#FF0000> **提取** </font>|start(从0开始)|end(不包含,没有就返回到最后一个成员)|start，end之间的数据组成的新数组|\nmap()|<font color=#FF0000> **遍历** </font>|function (elem, index, arr) {}|绑定参数函数内部的this变量|func处理后的新数组|\nfilter()|<font color=#FF0000> **过滤** </font>|function (elem, index, arr) {}|绑定参数函数内部的this变量|结果为true的数据组成的新数组|\nreduce()|<font color=#FF0000> **累计** </font>|function (a, b, index, arr) {}|起始值|起始值&数组成员累计值\nsome()|<font color=#FF0000> **一真** </font>|function (elem, index, arr) {}|起始值|一个true就返回true\nevery()|<font color=#FF0000> **全真** </font>|function (elem, index, arr) {}|起始值|全是true才返回true\n**改变原数组**|\npush()<sup>[3.1]</sup>|<font color=#FF0000> **添加** </font>|多个各种类型值|--|添加元素后数组的长度\npop()<sup>[4.1]</sup>|<font color=#FF0000> **删除** </font>|--|--|删除的元素\nshift()<sup>[4.2]</sup>|<font color=#FF0000> **删除** </font>|--|--|删除的元素\nunshift()<sup>[3.2]</sup>|<font color=#FF0000> **添加** </font>|多个各种类型值|--|添加元素后数组的长度\nreverse()|<font color=#FF0000> **倒置** </font>|--|--|倒置后的数组\nsplice()|<font color=#FF0000> **删除&添加** </font>|start(从0开始)|删除个数(后面的参数都是添加的元素)|删除的元素组成的数组\nsort()<sup>[5]</sup>|<font color=#FF0000> **排序** </font>|function (a, b) {}|--|排序后的数组\nforEach<sup>[6]</sup>|<font color=#FF0000> **遍历** </font>|function (elem, index, arr) {}|绑定参数函数内部的this变量\nindexOf()|<font color=#FF0000> **位置** </font>|元素|--|元素第一次出现的位置/-1\n\n[1]. 如果数组成员包括对象，concat方法返回当前数组的一个浅拷贝。新数组拷贝的是对象的引用。\n[2]. 将类数组转化为真正的数组:  Array.prototype.slice.call(document.querySelectorAll(\"div\"));\n[3.1]. push: 在最后一个位置添加。\n[3.2]. unshift: 在第一个位置添加。\n[4.1]. pop: 删除最后一个元素。\n[4.2]. shift: 删除第一个元素。\n[5].   默认按照字典顺序排序，所以如果要按数字大小，则要写function，并且最好返回数值\n[6].   forEach方法只能改变数组里的对象，而不能改变数组中的基本数据类型值！！！\n\n最后再提一下for...in和for...of\nfor...in会遍历所有可枚举属性，所以适合对象，不适合数组\nfor...in遍历值是键名\nfor...of只遍历数组元素\nfor...of遍历值是键值\n\n## z. 参考\n[1. Array 对象](https://wangdoc.com/javascript/stdlib/array.html)\n","source":"_posts/Array.md","raw":"---\ntitle: Array\ndate: 2020-03-02 18:33:49\ntags:\n---\njs的文档也看了好多遍了，怎么每次碰到数组的操作，还是要bd。。。\n<!--more-->\n\n## 1. 初始化\n两种初始化的方式，第一种是使用构造函数\n``` bash\nvar arr = new Array();\n```\n括号里面可以给参数，但是不同的参数，会导致它的行为不一致。\n所以，建议使用另一种方式，也就是数组字面量\n``` bash\nvar arr = [1, 2, 3];\n```\n\n## 2. 实例方法\n数组的示例方法真的有好多，这里我把它分成两种：\n会改变原数组的 & 不会改变原数组的\n本来想一一列举的，但是好像没啥意义\n就画个表格吧～～\n\n方法|描述|参数1|参数2|返回|\n--|:--:|--:|--:|--:\n**不改变原数组**|\njoin|<font color=#FF0000> **转字符串** </font>|分隔符|--|字符串\nconcat()<sup>[1]</sup>|<font color=#FF0000> **合并** </font>|多个各种类型值|--|合并后的新数组|\nslice()<sup>[2]</sup>|<font color=#FF0000> **提取** </font>|start(从0开始)|end(不包含,没有就返回到最后一个成员)|start，end之间的数据组成的新数组|\nmap()|<font color=#FF0000> **遍历** </font>|function (elem, index, arr) {}|绑定参数函数内部的this变量|func处理后的新数组|\nfilter()|<font color=#FF0000> **过滤** </font>|function (elem, index, arr) {}|绑定参数函数内部的this变量|结果为true的数据组成的新数组|\nreduce()|<font color=#FF0000> **累计** </font>|function (a, b, index, arr) {}|起始值|起始值&数组成员累计值\nsome()|<font color=#FF0000> **一真** </font>|function (elem, index, arr) {}|起始值|一个true就返回true\nevery()|<font color=#FF0000> **全真** </font>|function (elem, index, arr) {}|起始值|全是true才返回true\n**改变原数组**|\npush()<sup>[3.1]</sup>|<font color=#FF0000> **添加** </font>|多个各种类型值|--|添加元素后数组的长度\npop()<sup>[4.1]</sup>|<font color=#FF0000> **删除** </font>|--|--|删除的元素\nshift()<sup>[4.2]</sup>|<font color=#FF0000> **删除** </font>|--|--|删除的元素\nunshift()<sup>[3.2]</sup>|<font color=#FF0000> **添加** </font>|多个各种类型值|--|添加元素后数组的长度\nreverse()|<font color=#FF0000> **倒置** </font>|--|--|倒置后的数组\nsplice()|<font color=#FF0000> **删除&添加** </font>|start(从0开始)|删除个数(后面的参数都是添加的元素)|删除的元素组成的数组\nsort()<sup>[5]</sup>|<font color=#FF0000> **排序** </font>|function (a, b) {}|--|排序后的数组\nforEach<sup>[6]</sup>|<font color=#FF0000> **遍历** </font>|function (elem, index, arr) {}|绑定参数函数内部的this变量\nindexOf()|<font color=#FF0000> **位置** </font>|元素|--|元素第一次出现的位置/-1\n\n[1]. 如果数组成员包括对象，concat方法返回当前数组的一个浅拷贝。新数组拷贝的是对象的引用。\n[2]. 将类数组转化为真正的数组:  Array.prototype.slice.call(document.querySelectorAll(\"div\"));\n[3.1]. push: 在最后一个位置添加。\n[3.2]. unshift: 在第一个位置添加。\n[4.1]. pop: 删除最后一个元素。\n[4.2]. shift: 删除第一个元素。\n[5].   默认按照字典顺序排序，所以如果要按数字大小，则要写function，并且最好返回数值\n[6].   forEach方法只能改变数组里的对象，而不能改变数组中的基本数据类型值！！！\n\n最后再提一下for...in和for...of\nfor...in会遍历所有可枚举属性，所以适合对象，不适合数组\nfor...in遍历值是键名\nfor...of只遍历数组元素\nfor...of遍历值是键值\n\n## z. 参考\n[1. Array 对象](https://wangdoc.com/javascript/stdlib/array.html)\n","slug":"Array","published":1,"updated":"2020-03-02T10:33:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpuk000040s6a0it7005","content":"<p>js的文档也看了好多遍了，怎么每次碰到数组的操作，还是要bd。。。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-初始化\"><a href=\"#1-初始化\" class=\"headerlink\" title=\"1. 初始化\"></a>1. 初始化</h2><p>两种初始化的方式，第一种是使用构造函数</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = new Array();</span><br></pre></td></tr></table></figure></div>\n<p>括号里面可以给参数，但是不同的参数，会导致它的行为不一致。<br>所以，建议使用另一种方式，也就是数组字面量</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1, 2, 3];</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"2-实例方法\"><a href=\"#2-实例方法\" class=\"headerlink\" title=\"2. 实例方法\"></a>2. 实例方法</h2><p>数组的示例方法真的有好多，这里我把它分成两种：<br>会改变原数组的 &amp; 不会改变原数组的<br>本来想一一列举的，但是好像没啥意义<br>就画个表格吧～～</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th align=\"center\">描述</th>\n<th align=\"right\">参数1</th>\n<th align=\"right\">参数2</th>\n<th align=\"right\">返回</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>不改变原数组</strong></td>\n<td align=\"center\"></td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td>join</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>转字符串</strong> </font></td>\n<td align=\"right\">分隔符</td>\n<td align=\"right\">–</td>\n<td align=\"right\">字符串</td>\n</tr>\n<tr>\n<td>concat()<sup>[1]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>合并</strong> </font></td>\n<td align=\"right\">多个各种类型值</td>\n<td align=\"right\">–</td>\n<td align=\"right\">合并后的新数组</td>\n</tr>\n<tr>\n<td>slice()<sup>[2]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>提取</strong> </font></td>\n<td align=\"right\">start(从0开始)</td>\n<td align=\"right\">end(不包含,没有就返回到最后一个成员)</td>\n<td align=\"right\">start，end之间的数据组成的新数组</td>\n</tr>\n<tr>\n<td>map()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>遍历</strong> </font></td>\n<td align=\"right\">function (elem, index, arr) {}</td>\n<td align=\"right\">绑定参数函数内部的this变量</td>\n<td align=\"right\">func处理后的新数组</td>\n</tr>\n<tr>\n<td>filter()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>过滤</strong> </font></td>\n<td align=\"right\">function (elem, index, arr) {}</td>\n<td align=\"right\">绑定参数函数内部的this变量</td>\n<td align=\"right\">结果为true的数据组成的新数组</td>\n</tr>\n<tr>\n<td>reduce()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>累计</strong> </font></td>\n<td align=\"right\">function (a, b, index, arr) {}</td>\n<td align=\"right\">起始值</td>\n<td align=\"right\">起始值&amp;数组成员累计值</td>\n</tr>\n<tr>\n<td>some()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>一真</strong> </font></td>\n<td align=\"right\">function (elem, index, arr) {}</td>\n<td align=\"right\">起始值</td>\n<td align=\"right\">一个true就返回true</td>\n</tr>\n<tr>\n<td>every()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>全真</strong> </font></td>\n<td align=\"right\">function (elem, index, arr) {}</td>\n<td align=\"right\">起始值</td>\n<td align=\"right\">全是true才返回true</td>\n</tr>\n<tr>\n<td><strong>改变原数组</strong></td>\n<td align=\"center\"></td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td>push()<sup>[3.1]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>添加</strong> </font></td>\n<td align=\"right\">多个各种类型值</td>\n<td align=\"right\">–</td>\n<td align=\"right\">添加元素后数组的长度</td>\n</tr>\n<tr>\n<td>pop()<sup>[4.1]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>删除</strong> </font></td>\n<td align=\"right\">–</td>\n<td align=\"right\">–</td>\n<td align=\"right\">删除的元素</td>\n</tr>\n<tr>\n<td>shift()<sup>[4.2]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>删除</strong> </font></td>\n<td align=\"right\">–</td>\n<td align=\"right\">–</td>\n<td align=\"right\">删除的元素</td>\n</tr>\n<tr>\n<td>unshift()<sup>[3.2]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>添加</strong> </font></td>\n<td align=\"right\">多个各种类型值</td>\n<td align=\"right\">–</td>\n<td align=\"right\">添加元素后数组的长度</td>\n</tr>\n<tr>\n<td>reverse()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>倒置</strong> </font></td>\n<td align=\"right\">–</td>\n<td align=\"right\">–</td>\n<td align=\"right\">倒置后的数组</td>\n</tr>\n<tr>\n<td>splice()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>删除&amp;添加</strong> </font></td>\n<td align=\"right\">start(从0开始)</td>\n<td align=\"right\">删除个数(后面的参数都是添加的元素)</td>\n<td align=\"right\">删除的元素组成的数组</td>\n</tr>\n<tr>\n<td>sort()<sup>[5]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>排序</strong> </font></td>\n<td align=\"right\">function (a, b) {}</td>\n<td align=\"right\">–</td>\n<td align=\"right\">排序后的数组</td>\n</tr>\n<tr>\n<td>forEach<sup>[6]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>遍历</strong> </font></td>\n<td align=\"right\">function (elem, index, arr) {}</td>\n<td align=\"right\">绑定参数函数内部的this变量</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td>indexOf()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>位置</strong> </font></td>\n<td align=\"right\">元素</td>\n<td align=\"right\">–</td>\n<td align=\"right\">元素第一次出现的位置/-1</td>\n</tr>\n</tbody></table>\n<p>[1]. 如果数组成员包括对象，concat方法返回当前数组的一个浅拷贝。新数组拷贝的是对象的引用。<br>[2]. 将类数组转化为真正的数组:  Array.prototype.slice.call(document.querySelectorAll(“div”));<br>[3.1]. push: 在最后一个位置添加。<br>[3.2]. unshift: 在第一个位置添加。<br>[4.1]. pop: 删除最后一个元素。<br>[4.2]. shift: 删除第一个元素。<br>[5].   默认按照字典顺序排序，所以如果要按数字大小，则要写function，并且最好返回数值<br>[6].   forEach方法只能改变数组里的对象，而不能改变数组中的基本数据类型值！！！</p>\n<p>最后再提一下for…in和for…of<br>for…in会遍历所有可枚举属性，所以适合对象，不适合数组<br>for…in遍历值是键名<br>for…of只遍历数组元素<br>for…of遍历值是键值</p>\n<h2 id=\"z-参考\"><a href=\"#z-参考\" class=\"headerlink\" title=\"z. 参考\"></a>z. 参考</h2><p><a href=\"https://wangdoc.com/javascript/stdlib/array.html\" target=\"_blank\" rel=\"noopener\">1. Array 对象</a></p>\n","site":{"data":{}},"excerpt":"<p>js的文档也看了好多遍了，怎么每次碰到数组的操作，还是要bd。。。</p>","more":"<h2 id=\"1-初始化\"><a href=\"#1-初始化\" class=\"headerlink\" title=\"1. 初始化\"></a>1. 初始化</h2><p>两种初始化的方式，第一种是使用构造函数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = new Array();</span><br></pre></td></tr></table></figure>\n<p>括号里面可以给参数，但是不同的参数，会导致它的行为不一致。<br>所以，建议使用另一种方式，也就是数组字面量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1, 2, 3];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-实例方法\"><a href=\"#2-实例方法\" class=\"headerlink\" title=\"2. 实例方法\"></a>2. 实例方法</h2><p>数组的示例方法真的有好多，这里我把它分成两种：<br>会改变原数组的 &amp; 不会改变原数组的<br>本来想一一列举的，但是好像没啥意义<br>就画个表格吧～～</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th align=\"center\">描述</th>\n<th align=\"right\">参数1</th>\n<th align=\"right\">参数2</th>\n<th align=\"right\">返回</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>不改变原数组</strong></td>\n<td align=\"center\"></td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td>join</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>转字符串</strong> </font></td>\n<td align=\"right\">分隔符</td>\n<td align=\"right\">–</td>\n<td align=\"right\">字符串</td>\n</tr>\n<tr>\n<td>concat()<sup>[1]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>合并</strong> </font></td>\n<td align=\"right\">多个各种类型值</td>\n<td align=\"right\">–</td>\n<td align=\"right\">合并后的新数组</td>\n</tr>\n<tr>\n<td>slice()<sup>[2]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>提取</strong> </font></td>\n<td align=\"right\">start(从0开始)</td>\n<td align=\"right\">end(不包含,没有就返回到最后一个成员)</td>\n<td align=\"right\">start，end之间的数据组成的新数组</td>\n</tr>\n<tr>\n<td>map()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>遍历</strong> </font></td>\n<td align=\"right\">function (elem, index, arr) {}</td>\n<td align=\"right\">绑定参数函数内部的this变量</td>\n<td align=\"right\">func处理后的新数组</td>\n</tr>\n<tr>\n<td>filter()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>过滤</strong> </font></td>\n<td align=\"right\">function (elem, index, arr) {}</td>\n<td align=\"right\">绑定参数函数内部的this变量</td>\n<td align=\"right\">结果为true的数据组成的新数组</td>\n</tr>\n<tr>\n<td>reduce()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>累计</strong> </font></td>\n<td align=\"right\">function (a, b, index, arr) {}</td>\n<td align=\"right\">起始值</td>\n<td align=\"right\">起始值&amp;数组成员累计值</td>\n</tr>\n<tr>\n<td>some()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>一真</strong> </font></td>\n<td align=\"right\">function (elem, index, arr) {}</td>\n<td align=\"right\">起始值</td>\n<td align=\"right\">一个true就返回true</td>\n</tr>\n<tr>\n<td>every()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>全真</strong> </font></td>\n<td align=\"right\">function (elem, index, arr) {}</td>\n<td align=\"right\">起始值</td>\n<td align=\"right\">全是true才返回true</td>\n</tr>\n<tr>\n<td><strong>改变原数组</strong></td>\n<td align=\"center\"></td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td>push()<sup>[3.1]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>添加</strong> </font></td>\n<td align=\"right\">多个各种类型值</td>\n<td align=\"right\">–</td>\n<td align=\"right\">添加元素后数组的长度</td>\n</tr>\n<tr>\n<td>pop()<sup>[4.1]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>删除</strong> </font></td>\n<td align=\"right\">–</td>\n<td align=\"right\">–</td>\n<td align=\"right\">删除的元素</td>\n</tr>\n<tr>\n<td>shift()<sup>[4.2]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>删除</strong> </font></td>\n<td align=\"right\">–</td>\n<td align=\"right\">–</td>\n<td align=\"right\">删除的元素</td>\n</tr>\n<tr>\n<td>unshift()<sup>[3.2]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>添加</strong> </font></td>\n<td align=\"right\">多个各种类型值</td>\n<td align=\"right\">–</td>\n<td align=\"right\">添加元素后数组的长度</td>\n</tr>\n<tr>\n<td>reverse()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>倒置</strong> </font></td>\n<td align=\"right\">–</td>\n<td align=\"right\">–</td>\n<td align=\"right\">倒置后的数组</td>\n</tr>\n<tr>\n<td>splice()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>删除&amp;添加</strong> </font></td>\n<td align=\"right\">start(从0开始)</td>\n<td align=\"right\">删除个数(后面的参数都是添加的元素)</td>\n<td align=\"right\">删除的元素组成的数组</td>\n</tr>\n<tr>\n<td>sort()<sup>[5]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>排序</strong> </font></td>\n<td align=\"right\">function (a, b) {}</td>\n<td align=\"right\">–</td>\n<td align=\"right\">排序后的数组</td>\n</tr>\n<tr>\n<td>forEach<sup>[6]</sup></td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>遍历</strong> </font></td>\n<td align=\"right\">function (elem, index, arr) {}</td>\n<td align=\"right\">绑定参数函数内部的this变量</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td>indexOf()</td>\n<td align=\"center\"><font color=\"#FF0000\"> <strong>位置</strong> </font></td>\n<td align=\"right\">元素</td>\n<td align=\"right\">–</td>\n<td align=\"right\">元素第一次出现的位置/-1</td>\n</tr>\n</tbody></table>\n<p>[1]. 如果数组成员包括对象，concat方法返回当前数组的一个浅拷贝。新数组拷贝的是对象的引用。<br>[2]. 将类数组转化为真正的数组:  Array.prototype.slice.call(document.querySelectorAll(“div”));<br>[3.1]. push: 在最后一个位置添加。<br>[3.2]. unshift: 在第一个位置添加。<br>[4.1]. pop: 删除最后一个元素。<br>[4.2]. shift: 删除第一个元素。<br>[5].   默认按照字典顺序排序，所以如果要按数字大小，则要写function，并且最好返回数值<br>[6].   forEach方法只能改变数组里的对象，而不能改变数组中的基本数据类型值！！！</p>\n<p>最后再提一下for…in和for…of<br>for…in会遍历所有可枚举属性，所以适合对象，不适合数组<br>for…in遍历值是键名<br>for…of只遍历数组元素<br>for…of遍历值是键值</p>\n<h2 id=\"z-参考\"><a href=\"#z-参考\" class=\"headerlink\" title=\"z. 参考\"></a>z. 参考</h2><p><a href=\"https://wangdoc.com/javascript/stdlib/array.html\" target=\"_blank\" rel=\"noopener\">1. Array 对象</a></p>"},{"title":"Paragon NTFS For Mac","date":"2020-03-17T10:25:15.000Z","_content":"MacBook连移动硬盘发现文件复制不进去，拖也拖不进去。。。\n<!--more-->\n\n## 1. 原因\n学术方面的解释是：因为移动硬盘或 U 盘是使用 Windows 系统下的 NTFS 分区格式，\n而 Mac 系统原生是不支持这种格式的，也就是为什么不能向硬盘里拷贝资料的原因。\n\n## 2. 解决\n百度到一个方法，链接在参考中，成功的复制了文件。\n这边简述一下：\n我的设备默认在/Volumes/ever\n查看硬盘挂在的节点Device Node: \n``` bash\ndiskutil info /Volumes/YOUR_NTFS_DISK_NAME\n```\n查出来是\n``` bash\nDevice Node:    /dev/disk2s1\n```\n\n然后将硬盘弹出，但是不要拔掉移动硬盘连接\n``` bash\nhdiutil eject /Volumes/ever/\n```\n\n构建一个目录\n``` bash\nsudo mkdir /Volumes/ever\n```\n\n将NTFS硬盘 挂载 mount 到mac\n``` bash\nsudo mount_ntfs -o rw,nobrowse /dev/disk2s1 /Volumes/ever/\n```\n\n这时候就可以拷贝文件啦，用cp指令就可以了\n最后将NTFS硬盘从 mac 上卸载 umount\n``` bash\nsudo umount /Volumes/ever/\n```\n\n发现了另一个一劳永逸的方法\n安装Paragon NTFS For Mac。\n目前最优秀的NTFS分区驱动软件，安装后相当于装了一个支持读写NTFS格式的驱动程序，以后就可以自由的读写移动硬盘和U盘啦。\n\n\n\n\n## Z. 参考\n[1.Mac上挂载移动硬盘出现\"Read-only file system\"问题](https://www.xiaorongmao.com/blog/49)\n[1.macbook为什么无法向移动硬盘复制文件？因为你缺少这个软件！](http://www.360doc.com/content/17/1009/22/912420_693616011.shtml)\n","source":"_posts/NTFS.md","raw":"---\ntitle: Paragon NTFS For Mac\ndate: 2020-03-17 18:25:15\ntags: Mac\n---\nMacBook连移动硬盘发现文件复制不进去，拖也拖不进去。。。\n<!--more-->\n\n## 1. 原因\n学术方面的解释是：因为移动硬盘或 U 盘是使用 Windows 系统下的 NTFS 分区格式，\n而 Mac 系统原生是不支持这种格式的，也就是为什么不能向硬盘里拷贝资料的原因。\n\n## 2. 解决\n百度到一个方法，链接在参考中，成功的复制了文件。\n这边简述一下：\n我的设备默认在/Volumes/ever\n查看硬盘挂在的节点Device Node: \n``` bash\ndiskutil info /Volumes/YOUR_NTFS_DISK_NAME\n```\n查出来是\n``` bash\nDevice Node:    /dev/disk2s1\n```\n\n然后将硬盘弹出，但是不要拔掉移动硬盘连接\n``` bash\nhdiutil eject /Volumes/ever/\n```\n\n构建一个目录\n``` bash\nsudo mkdir /Volumes/ever\n```\n\n将NTFS硬盘 挂载 mount 到mac\n``` bash\nsudo mount_ntfs -o rw,nobrowse /dev/disk2s1 /Volumes/ever/\n```\n\n这时候就可以拷贝文件啦，用cp指令就可以了\n最后将NTFS硬盘从 mac 上卸载 umount\n``` bash\nsudo umount /Volumes/ever/\n```\n\n发现了另一个一劳永逸的方法\n安装Paragon NTFS For Mac。\n目前最优秀的NTFS分区驱动软件，安装后相当于装了一个支持读写NTFS格式的驱动程序，以后就可以自由的读写移动硬盘和U盘啦。\n\n\n\n\n## Z. 参考\n[1.Mac上挂载移动硬盘出现\"Read-only file system\"问题](https://www.xiaorongmao.com/blog/49)\n[1.macbook为什么无法向移动硬盘复制文件？因为你缺少这个软件！](http://www.360doc.com/content/17/1009/22/912420_693616011.shtml)\n","slug":"NTFS","published":1,"updated":"2020-03-17T10:25:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpup000140s6hgtf3s9i","content":"<p>MacBook连移动硬盘发现文件复制不进去，拖也拖不进去。。。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-原因\"><a href=\"#1-原因\" class=\"headerlink\" title=\"1. 原因\"></a>1. 原因</h2><p>学术方面的解释是：因为移动硬盘或 U 盘是使用 Windows 系统下的 NTFS 分区格式，<br>而 Mac 系统原生是不支持这种格式的，也就是为什么不能向硬盘里拷贝资料的原因。</p>\n<h2 id=\"2-解决\"><a href=\"#2-解决\" class=\"headerlink\" title=\"2. 解决\"></a>2. 解决</h2><p>百度到一个方法，链接在参考中，成功的复制了文件。<br>这边简述一下：<br>我的设备默认在/Volumes/ever<br>查看硬盘挂在的节点Device Node: </p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diskutil info /Volumes/YOUR_NTFS_DISK_NAME</span><br></pre></td></tr></table></figure></div>\n<p>查出来是</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Device Node:    /dev/disk2s1</span><br></pre></td></tr></table></figure></div>\n\n<p>然后将硬盘弹出，但是不要拔掉移动硬盘连接</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hdiutil eject /Volumes/ever/</span><br></pre></td></tr></table></figure></div>\n\n<p>构建一个目录</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /Volumes/ever</span><br></pre></td></tr></table></figure></div>\n\n<p>将NTFS硬盘 挂载 mount 到mac</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount_ntfs -o rw,nobrowse /dev/disk2s1 /Volumes/ever/</span><br></pre></td></tr></table></figure></div>\n\n<p>这时候就可以拷贝文件啦，用cp指令就可以了<br>最后将NTFS硬盘从 mac 上卸载 umount</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount /Volumes/ever/</span><br></pre></td></tr></table></figure></div>\n\n<p>发现了另一个一劳永逸的方法<br>安装Paragon NTFS For Mac。<br>目前最优秀的NTFS分区驱动软件，安装后相当于装了一个支持读写NTFS格式的驱动程序，以后就可以自由的读写移动硬盘和U盘啦。</p>\n<h2 id=\"Z-参考\"><a href=\"#Z-参考\" class=\"headerlink\" title=\"Z. 参考\"></a>Z. 参考</h2><p><a href=\"https://www.xiaorongmao.com/blog/49\" target=\"_blank\" rel=\"noopener\">1.Mac上挂载移动硬盘出现”Read-only file system”问题</a><br><a href=\"http://www.360doc.com/content/17/1009/22/912420_693616011.shtml\" target=\"_blank\" rel=\"noopener\">1.macbook为什么无法向移动硬盘复制文件？因为你缺少这个软件！</a></p>\n","site":{"data":{}},"excerpt":"<p>MacBook连移动硬盘发现文件复制不进去，拖也拖不进去。。。</p>","more":"<h2 id=\"1-原因\"><a href=\"#1-原因\" class=\"headerlink\" title=\"1. 原因\"></a>1. 原因</h2><p>学术方面的解释是：因为移动硬盘或 U 盘是使用 Windows 系统下的 NTFS 分区格式，<br>而 Mac 系统原生是不支持这种格式的，也就是为什么不能向硬盘里拷贝资料的原因。</p>\n<h2 id=\"2-解决\"><a href=\"#2-解决\" class=\"headerlink\" title=\"2. 解决\"></a>2. 解决</h2><p>百度到一个方法，链接在参考中，成功的复制了文件。<br>这边简述一下：<br>我的设备默认在/Volumes/ever<br>查看硬盘挂在的节点Device Node: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diskutil info /Volumes/YOUR_NTFS_DISK_NAME</span><br></pre></td></tr></table></figure>\n<p>查出来是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Device Node:    /dev/disk2s1</span><br></pre></td></tr></table></figure>\n\n<p>然后将硬盘弹出，但是不要拔掉移动硬盘连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hdiutil eject /Volumes/ever/</span><br></pre></td></tr></table></figure>\n\n<p>构建一个目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /Volumes/ever</span><br></pre></td></tr></table></figure>\n\n<p>将NTFS硬盘 挂载 mount 到mac</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount_ntfs -o rw,nobrowse /dev/disk2s1 /Volumes/ever/</span><br></pre></td></tr></table></figure>\n\n<p>这时候就可以拷贝文件啦，用cp指令就可以了<br>最后将NTFS硬盘从 mac 上卸载 umount</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount /Volumes/ever/</span><br></pre></td></tr></table></figure>\n\n<p>发现了另一个一劳永逸的方法<br>安装Paragon NTFS For Mac。<br>目前最优秀的NTFS分区驱动软件，安装后相当于装了一个支持读写NTFS格式的驱动程序，以后就可以自由的读写移动硬盘和U盘啦。</p>\n<h2 id=\"Z-参考\"><a href=\"#Z-参考\" class=\"headerlink\" title=\"Z. 参考\"></a>Z. 参考</h2><p><a href=\"https://www.xiaorongmao.com/blog/49\" target=\"_blank\" rel=\"noopener\">1.Mac上挂载移动硬盘出现”Read-only file system”问题</a><br><a href=\"http://www.360doc.com/content/17/1009/22/912420_693616011.shtml\" target=\"_blank\" rel=\"noopener\">1.macbook为什么无法向移动硬盘复制文件？因为你缺少这个软件！</a></p>"},{"title":"docker-2","date":"2019-11-11T02:20:05.000Z","_content":"\n放在同一个日志里就太长了，所以分两个日志写吧，接[docker-1](http://localhost:4000/2019/11/08/docker/)\n<!--more-->\n接下来我想在里面装一个tomcat，把我的axis服务部署在上面\n可以到docker hub上看tomcat的镜像，冒号后面的是他的tag(如果不写tag就默认latest，如果没有latest就会报错)\n``` bash\n$ docker pull tomcat:jdk8-adoptopenjdk-openj9\n```\n拉了茫茫久，终于拉好了，接下来就是用镜像来运行容器啦\n``` bash\n$ docker run -d --name tomcat -p 7080:7080 -p 8090:8090 8e6064eb6bcd\n```\n这个 \n第一次我想映射7070，但我本地正在用7070端口，所以报错了，但是容器还是有了，所以先删了容器,然后再运行一次\n``` bash\n$ docker rm  <container ID/name>   // 加不加container都可以\n$ docker container rm  <container ID/name>\n```\n删了之后，再运行，再用命令再看一下，果然有了一个有端口映射的tomcat容器\n``` bash\n$ docker ps -a\n```\n进入tomcat容器\n``` bash\n$ docker exec -it tomcat /bin/bash\n```\n失败了。。。指令没有任何效果\n呜\n重来\n\n经过学习和探讨\n拉了某个镜像，就要去看这个镜像发布者提供的使用方法，自己猜是猜不到的\n所以就去看。\n\n这个tomcat默认的启动端口是8080，所以我吧7080和8090映射出来有啥用呢。。。哎\n``` bash\n$ docker run -it -d -p8888:8080 tomcat\n```\n容器启动之后，在本地用 http://localhost:8888 就可以访问啦，经典的tomcat页面呀\n这个命令是尝试之后最终的命令，跟它提供的不一样，主要是参数不同\n加了 -d 表示容器在后台运行，不然你执行完，就会在控制台输出一堆日志， ctrl + c结束掉之后，tomcat也停掉了\n去掉了 --rm 这个参数加了表示容器停止后自动删除容器，他跟 -d 互斥\n再提一下 -it 也就是 -i 加上 -t，分别指用于控制台交互和支持终端登录\n然后再用exec指令\n``` bash\n$ docker exec -it tomcat /bin/bash\n```\n成功地进入容器打开终端交互啦\n根据它提供的路径，进入webapps把我的war放进去,然后重启一下\n``` bash\n$ docker restart tomcat\n```\n再访问一下，可以成功访问到我的服务了，棒！\n\n","source":"_posts/docker-2.md","raw":"---\ntitle: docker-2\ndate: 2019-11-11 10:20:05\ntags: linux\n---\n\n放在同一个日志里就太长了，所以分两个日志写吧，接[docker-1](http://localhost:4000/2019/11/08/docker/)\n<!--more-->\n接下来我想在里面装一个tomcat，把我的axis服务部署在上面\n可以到docker hub上看tomcat的镜像，冒号后面的是他的tag(如果不写tag就默认latest，如果没有latest就会报错)\n``` bash\n$ docker pull tomcat:jdk8-adoptopenjdk-openj9\n```\n拉了茫茫久，终于拉好了，接下来就是用镜像来运行容器啦\n``` bash\n$ docker run -d --name tomcat -p 7080:7080 -p 8090:8090 8e6064eb6bcd\n```\n这个 \n第一次我想映射7070，但我本地正在用7070端口，所以报错了，但是容器还是有了，所以先删了容器,然后再运行一次\n``` bash\n$ docker rm  <container ID/name>   // 加不加container都可以\n$ docker container rm  <container ID/name>\n```\n删了之后，再运行，再用命令再看一下，果然有了一个有端口映射的tomcat容器\n``` bash\n$ docker ps -a\n```\n进入tomcat容器\n``` bash\n$ docker exec -it tomcat /bin/bash\n```\n失败了。。。指令没有任何效果\n呜\n重来\n\n经过学习和探讨\n拉了某个镜像，就要去看这个镜像发布者提供的使用方法，自己猜是猜不到的\n所以就去看。\n\n这个tomcat默认的启动端口是8080，所以我吧7080和8090映射出来有啥用呢。。。哎\n``` bash\n$ docker run -it -d -p8888:8080 tomcat\n```\n容器启动之后，在本地用 http://localhost:8888 就可以访问啦，经典的tomcat页面呀\n这个命令是尝试之后最终的命令，跟它提供的不一样，主要是参数不同\n加了 -d 表示容器在后台运行，不然你执行完，就会在控制台输出一堆日志， ctrl + c结束掉之后，tomcat也停掉了\n去掉了 --rm 这个参数加了表示容器停止后自动删除容器，他跟 -d 互斥\n再提一下 -it 也就是 -i 加上 -t，分别指用于控制台交互和支持终端登录\n然后再用exec指令\n``` bash\n$ docker exec -it tomcat /bin/bash\n```\n成功地进入容器打开终端交互啦\n根据它提供的路径，进入webapps把我的war放进去,然后重启一下\n``` bash\n$ docker restart tomcat\n```\n再访问一下，可以成功访问到我的服务了，棒！\n\n","slug":"docker-2","published":1,"updated":"2019-11-11T02:20:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpur000240s641mvb99w","content":"<p>放在同一个日志里就太长了，所以分两个日志写吧，接<a href=\"http://localhost:4000/2019/11/08/docker/\" target=\"_blank\" rel=\"noopener\">docker-1</a></p>\n<a id=\"more\"></a>\n<p>接下来我想在里面装一个tomcat，把我的axis服务部署在上面<br>可以到docker hub上看tomcat的镜像，冒号后面的是他的tag(如果不写tag就默认latest，如果没有latest就会报错)</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull tomcat:jdk8-adoptopenjdk-openj9</span><br></pre></td></tr></table></figure></div>\n<p>拉了茫茫久，终于拉好了，接下来就是用镜像来运行容器啦</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d --name tomcat -p 7080:7080 -p 8090:8090 8e6064eb6bcd</span><br></pre></td></tr></table></figure></div>\n<p>这个<br>第一次我想映射7070，但我本地正在用7070端口，所以报错了，但是容器还是有了，所以先删了容器,然后再运行一次</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm  &lt;container ID/name&gt;   // 加不加container都可以</span><br><span class=\"line\">$ docker container rm  &lt;container ID/name&gt;</span><br></pre></td></tr></table></figure></div>\n<p>删了之后，再运行，再用命令再看一下，果然有了一个有端口映射的tomcat容器</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure></div>\n<p>进入tomcat容器</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it tomcat /bin/bash</span><br></pre></td></tr></table></figure></div>\n<p>失败了。。。指令没有任何效果<br>呜<br>重来</p>\n<p>经过学习和探讨<br>拉了某个镜像，就要去看这个镜像发布者提供的使用方法，自己猜是猜不到的<br>所以就去看。</p>\n<p>这个tomcat默认的启动端口是8080，所以我吧7080和8090映射出来有啥用呢。。。哎</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -it -d -p8888:8080 tomcat</span><br></pre></td></tr></table></figure></div>\n<p>容器启动之后，在本地用 <a href=\"http://localhost:8888\" target=\"_blank\" rel=\"noopener\">http://localhost:8888</a> 就可以访问啦，经典的tomcat页面呀<br>这个命令是尝试之后最终的命令，跟它提供的不一样，主要是参数不同<br>加了 -d 表示容器在后台运行，不然你执行完，就会在控制台输出一堆日志， ctrl + c结束掉之后，tomcat也停掉了<br>去掉了 –rm 这个参数加了表示容器停止后自动删除容器，他跟 -d 互斥<br>再提一下 -it 也就是 -i 加上 -t，分别指用于控制台交互和支持终端登录<br>然后再用exec指令</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it tomcat /bin/bash</span><br></pre></td></tr></table></figure></div>\n<p>成功地进入容器打开终端交互啦<br>根据它提供的路径，进入webapps把我的war放进去,然后重启一下</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker restart tomcat</span><br></pre></td></tr></table></figure></div>\n<p>再访问一下，可以成功访问到我的服务了，棒！</p>\n","site":{"data":{}},"excerpt":"<p>放在同一个日志里就太长了，所以分两个日志写吧，接<a href=\"http://localhost:4000/2019/11/08/docker/\" target=\"_blank\" rel=\"noopener\">docker-1</a></p>","more":"<p>接下来我想在里面装一个tomcat，把我的axis服务部署在上面<br>可以到docker hub上看tomcat的镜像，冒号后面的是他的tag(如果不写tag就默认latest，如果没有latest就会报错)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull tomcat:jdk8-adoptopenjdk-openj9</span><br></pre></td></tr></table></figure>\n<p>拉了茫茫久，终于拉好了，接下来就是用镜像来运行容器啦</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d --name tomcat -p 7080:7080 -p 8090:8090 8e6064eb6bcd</span><br></pre></td></tr></table></figure>\n<p>这个<br>第一次我想映射7070，但我本地正在用7070端口，所以报错了，但是容器还是有了，所以先删了容器,然后再运行一次</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm  &lt;container ID/name&gt;   // 加不加container都可以</span><br><span class=\"line\">$ docker container rm  &lt;container ID/name&gt;</span><br></pre></td></tr></table></figure>\n<p>删了之后，再运行，再用命令再看一下，果然有了一个有端口映射的tomcat容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure>\n<p>进入tomcat容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it tomcat /bin/bash</span><br></pre></td></tr></table></figure>\n<p>失败了。。。指令没有任何效果<br>呜<br>重来</p>\n<p>经过学习和探讨<br>拉了某个镜像，就要去看这个镜像发布者提供的使用方法，自己猜是猜不到的<br>所以就去看。</p>\n<p>这个tomcat默认的启动端口是8080，所以我吧7080和8090映射出来有啥用呢。。。哎</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -it -d -p8888:8080 tomcat</span><br></pre></td></tr></table></figure>\n<p>容器启动之后，在本地用 <a href=\"http://localhost:8888\" target=\"_blank\" rel=\"noopener\">http://localhost:8888</a> 就可以访问啦，经典的tomcat页面呀<br>这个命令是尝试之后最终的命令，跟它提供的不一样，主要是参数不同<br>加了 -d 表示容器在后台运行，不然你执行完，就会在控制台输出一堆日志， ctrl + c结束掉之后，tomcat也停掉了<br>去掉了 –rm 这个参数加了表示容器停止后自动删除容器，他跟 -d 互斥<br>再提一下 -it 也就是 -i 加上 -t，分别指用于控制台交互和支持终端登录<br>然后再用exec指令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it tomcat /bin/bash</span><br></pre></td></tr></table></figure>\n<p>成功地进入容器打开终端交互啦<br>根据它提供的路径，进入webapps把我的war放进去,然后重启一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker restart tomcat</span><br></pre></td></tr></table></figure>\n<p>再访问一下，可以成功访问到我的服务了，棒！</p>"},{"title":"docker-1","date":"2019-11-08T03:45:44.000Z","_content":"今天早上，um。。。又是无所事事的一个早上，研究了一些乱七八糟的东西，研着研着就到了docker\n<!--more-->\n自从装了docker之后(小哥哥装的。。。)，每天打开电脑第一件事就是\n``` bash\n$ docker ps -a          //查看所有的容器\n$ docker ps             //查看所有运行的容器\n// 后来变成了\n$ docker container ls   //查看所有运行的容器\n\n$ docker start oracle\n$ docker container ls\n```\n启动oracle数据库，之后就不理睬docker了。\n还有需要导入数据库的时候\n``` bash\n$ ssh root@127.0.0.1 -p 49160\n$ password\n```\n然后执行一系列oracle命令\n从来也没有仔细研究过docker，这样一想，还是蛮对不起这只可爱的小鲸鱼🐳的。\n然而今天我连上docker之后，突然看到了这句话(以前一直没注意，我是瞎么)\nWelcome to Ubuntu 14.04.1 LTS\n哇，我家docker的操作系统是Ubuntu啊,怪不得我一直应ssh连接。。。\n\n(补充一下[2019-11-11]：上面说docker的操作系统是Ubuntu是不对的，docker是一个容器引擎，它不是模拟一个完整的操作系统。\n所以我的docker中只有一个容器：oracle，只不过这个oracle是基于Ubuntu环境的，这是由image制作者决定的，\n而我能够用ssh访问容器是因为，制作者将这个功能开放出来了，不然的话，就需要用 docker exec -it oracle /bin/bash，\n在容器中运行command，来访问容器了。所以其实这篇日志跟docker关系不大。。。\n本来我以为docker带操作系统，我要运行tomcat还要装JDK，但其实操作系统、tomcat、JDK等等全都封装再一个镜像中，\n运行后就是一个独立的容器，跟原有的oracle容器是完全隔离互不影响的。)\n\n所以我会什么一直要用这么一长串鬼东西登录呢，还要输密码，我的ssh免密钥登录日志是白写的么\n``` bash\nssh root@127.0.0.1 -p 49160\n```\n于是，实战开始。\n首先是配置文件(/etc/ssh/sshd_config),看了一下只需要把AuthorizedKeysFile属性的注释符去掉就行了，这边看到他是这样的\n```\n#AuthorizedKeysFile      %h/.ssh/authorized_keys\n```\n百度了一下，%h就相当于～\n这边我用vi想去掉注释的时候发现删除键以及上下左右键都不听话，网上说用vim，\n于是我就\n``` bash\n$ apt-get update\n$ apt-get install vim\n```\n经历了漫长的等待，终于装好了。。。\n去掉注释之后，重启一下ssh服务\n``` bash\n$ /etc/init.d/ssh restart\n```\n之后ssh连接就断开了，直接再连也连不上，我重启了一下docker就连上了\n之后就是公钥和密钥了，进入/etc/ssh目录，我看到好多对公钥和密钥，我就选了一对，把公钥放到～/.ssh目录，重命名为authorized_keys，\n把私钥copy到我本地，再在本地~/.ssh目录的config里面配置一下。这边端口配49160。\nssh的端口是22，我这边docker映射出来的是49160。\n``` bash\n$ ssh doc\n```\n就直接登录啦，美滋滋～～\n\n这边提一下docker容器和本地复制文件的命令\n``` bash\n$ docker cp oracle:/etc/ssh/ssh_host_rsa_key /usr/local/ssh_host_rsa_key\n```\n这里的oracle是我的容器的名字\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/docker.md","raw":"---\ntitle: docker-1\ndate: 2019-11-08 11:45:44\ntags: linux\n---\n今天早上，um。。。又是无所事事的一个早上，研究了一些乱七八糟的东西，研着研着就到了docker\n<!--more-->\n自从装了docker之后(小哥哥装的。。。)，每天打开电脑第一件事就是\n``` bash\n$ docker ps -a          //查看所有的容器\n$ docker ps             //查看所有运行的容器\n// 后来变成了\n$ docker container ls   //查看所有运行的容器\n\n$ docker start oracle\n$ docker container ls\n```\n启动oracle数据库，之后就不理睬docker了。\n还有需要导入数据库的时候\n``` bash\n$ ssh root@127.0.0.1 -p 49160\n$ password\n```\n然后执行一系列oracle命令\n从来也没有仔细研究过docker，这样一想，还是蛮对不起这只可爱的小鲸鱼🐳的。\n然而今天我连上docker之后，突然看到了这句话(以前一直没注意，我是瞎么)\nWelcome to Ubuntu 14.04.1 LTS\n哇，我家docker的操作系统是Ubuntu啊,怪不得我一直应ssh连接。。。\n\n(补充一下[2019-11-11]：上面说docker的操作系统是Ubuntu是不对的，docker是一个容器引擎，它不是模拟一个完整的操作系统。\n所以我的docker中只有一个容器：oracle，只不过这个oracle是基于Ubuntu环境的，这是由image制作者决定的，\n而我能够用ssh访问容器是因为，制作者将这个功能开放出来了，不然的话，就需要用 docker exec -it oracle /bin/bash，\n在容器中运行command，来访问容器了。所以其实这篇日志跟docker关系不大。。。\n本来我以为docker带操作系统，我要运行tomcat还要装JDK，但其实操作系统、tomcat、JDK等等全都封装再一个镜像中，\n运行后就是一个独立的容器，跟原有的oracle容器是完全隔离互不影响的。)\n\n所以我会什么一直要用这么一长串鬼东西登录呢，还要输密码，我的ssh免密钥登录日志是白写的么\n``` bash\nssh root@127.0.0.1 -p 49160\n```\n于是，实战开始。\n首先是配置文件(/etc/ssh/sshd_config),看了一下只需要把AuthorizedKeysFile属性的注释符去掉就行了，这边看到他是这样的\n```\n#AuthorizedKeysFile      %h/.ssh/authorized_keys\n```\n百度了一下，%h就相当于～\n这边我用vi想去掉注释的时候发现删除键以及上下左右键都不听话，网上说用vim，\n于是我就\n``` bash\n$ apt-get update\n$ apt-get install vim\n```\n经历了漫长的等待，终于装好了。。。\n去掉注释之后，重启一下ssh服务\n``` bash\n$ /etc/init.d/ssh restart\n```\n之后ssh连接就断开了，直接再连也连不上，我重启了一下docker就连上了\n之后就是公钥和密钥了，进入/etc/ssh目录，我看到好多对公钥和密钥，我就选了一对，把公钥放到～/.ssh目录，重命名为authorized_keys，\n把私钥copy到我本地，再在本地~/.ssh目录的config里面配置一下。这边端口配49160。\nssh的端口是22，我这边docker映射出来的是49160。\n``` bash\n$ ssh doc\n```\n就直接登录啦，美滋滋～～\n\n这边提一下docker容器和本地复制文件的命令\n``` bash\n$ docker cp oracle:/etc/ssh/ssh_host_rsa_key /usr/local/ssh_host_rsa_key\n```\n这里的oracle是我的容器的名字\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"docker","published":1,"updated":"2019-11-08T03:45:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpuu000440s63blm2pyq","content":"<p>今天早上，um。。。又是无所事事的一个早上，研究了一些乱七八糟的东西，研着研着就到了docker</p>\n<a id=\"more\"></a>\n<p>自从装了docker之后(小哥哥装的。。。)，每天打开电脑第一件事就是</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps -a          //查看所有的容器</span><br><span class=\"line\">$ docker ps             //查看所有运行的容器</span><br><span class=\"line\">// 后来变成了</span><br><span class=\"line\">$ docker container ls   //查看所有运行的容器</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker start oracle</span><br><span class=\"line\">$ docker container ls</span><br></pre></td></tr></table></figure></div>\n<p>启动oracle数据库，之后就不理睬docker了。<br>还有需要导入数据库的时候</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh root@127.0.0.1 -p 49160</span><br><span class=\"line\">$ password</span><br></pre></td></tr></table></figure></div>\n<p>然后执行一系列oracle命令<br>从来也没有仔细研究过docker，这样一想，还是蛮对不起这只可爱的小鲸鱼🐳的。<br>然而今天我连上docker之后，突然看到了这句话(以前一直没注意，我是瞎么)<br>Welcome to Ubuntu 14.04.1 LTS<br>哇，我家docker的操作系统是Ubuntu啊,怪不得我一直应ssh连接。。。</p>\n<p>(补充一下[2019-11-11]：上面说docker的操作系统是Ubuntu是不对的，docker是一个容器引擎，它不是模拟一个完整的操作系统。<br>所以我的docker中只有一个容器：oracle，只不过这个oracle是基于Ubuntu环境的，这是由image制作者决定的，<br>而我能够用ssh访问容器是因为，制作者将这个功能开放出来了，不然的话，就需要用 docker exec -it oracle /bin/bash，<br>在容器中运行command，来访问容器了。所以其实这篇日志跟docker关系不大。。。<br>本来我以为docker带操作系统，我要运行tomcat还要装JDK，但其实操作系统、tomcat、JDK等等全都封装再一个镜像中，<br>运行后就是一个独立的容器，跟原有的oracle容器是完全隔离互不影响的。)</p>\n<p>所以我会什么一直要用这么一长串鬼东西登录呢，还要输密码，我的ssh免密钥登录日志是白写的么</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@127.0.0.1 -p 49160</span><br></pre></td></tr></table></figure></div>\n<p>于是，实战开始。<br>首先是配置文件(/etc/ssh/sshd_config),看了一下只需要把AuthorizedKeysFile属性的注释符去掉就行了，这边看到他是这样的</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#AuthorizedKeysFile      %h&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure></div>\n<p>百度了一下，%h就相当于～<br>这边我用vi想去掉注释的时候发现删除键以及上下左右键都不听话，网上说用vim，<br>于是我就</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apt-get update</span><br><span class=\"line\">$ apt-get install vim</span><br></pre></td></tr></table></figure></div>\n<p>经历了漫长的等待，终于装好了。。。<br>去掉注释之后，重启一下ssh服务</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/ssh restart</span><br></pre></td></tr></table></figure></div>\n<p>之后ssh连接就断开了，直接再连也连不上，我重启了一下docker就连上了<br>之后就是公钥和密钥了，进入/etc/ssh目录，我看到好多对公钥和密钥，我就选了一对，把公钥放到～/.ssh目录，重命名为authorized_keys，<br>把私钥copy到我本地，再在本地~/.ssh目录的config里面配置一下。这边端口配49160。<br>ssh的端口是22，我这边docker映射出来的是49160。</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh doc</span><br></pre></td></tr></table></figure></div>\n<p>就直接登录啦，美滋滋～～</p>\n<p>这边提一下docker容器和本地复制文件的命令</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker cp oracle:/etc/ssh/ssh_host_rsa_key /usr/<span class=\"built_in\">local</span>/ssh_host_rsa_key</span><br></pre></td></tr></table></figure></div>\n<p>这里的oracle是我的容器的名字</p>\n","site":{"data":{}},"excerpt":"<p>今天早上，um。。。又是无所事事的一个早上，研究了一些乱七八糟的东西，研着研着就到了docker</p>","more":"<p>自从装了docker之后(小哥哥装的。。。)，每天打开电脑第一件事就是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps -a          //查看所有的容器</span><br><span class=\"line\">$ docker ps             //查看所有运行的容器</span><br><span class=\"line\">// 后来变成了</span><br><span class=\"line\">$ docker container ls   //查看所有运行的容器</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker start oracle</span><br><span class=\"line\">$ docker container ls</span><br></pre></td></tr></table></figure>\n<p>启动oracle数据库，之后就不理睬docker了。<br>还有需要导入数据库的时候</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh root@127.0.0.1 -p 49160</span><br><span class=\"line\">$ password</span><br></pre></td></tr></table></figure>\n<p>然后执行一系列oracle命令<br>从来也没有仔细研究过docker，这样一想，还是蛮对不起这只可爱的小鲸鱼🐳的。<br>然而今天我连上docker之后，突然看到了这句话(以前一直没注意，我是瞎么)<br>Welcome to Ubuntu 14.04.1 LTS<br>哇，我家docker的操作系统是Ubuntu啊,怪不得我一直应ssh连接。。。</p>\n<p>(补充一下[2019-11-11]：上面说docker的操作系统是Ubuntu是不对的，docker是一个容器引擎，它不是模拟一个完整的操作系统。<br>所以我的docker中只有一个容器：oracle，只不过这个oracle是基于Ubuntu环境的，这是由image制作者决定的，<br>而我能够用ssh访问容器是因为，制作者将这个功能开放出来了，不然的话，就需要用 docker exec -it oracle /bin/bash，<br>在容器中运行command，来访问容器了。所以其实这篇日志跟docker关系不大。。。<br>本来我以为docker带操作系统，我要运行tomcat还要装JDK，但其实操作系统、tomcat、JDK等等全都封装再一个镜像中，<br>运行后就是一个独立的容器，跟原有的oracle容器是完全隔离互不影响的。)</p>\n<p>所以我会什么一直要用这么一长串鬼东西登录呢，还要输密码，我的ssh免密钥登录日志是白写的么</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@127.0.0.1 -p 49160</span><br></pre></td></tr></table></figure>\n<p>于是，实战开始。<br>首先是配置文件(/etc/ssh/sshd_config),看了一下只需要把AuthorizedKeysFile属性的注释符去掉就行了，这边看到他是这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#AuthorizedKeysFile      %h&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure>\n<p>百度了一下，%h就相当于～<br>这边我用vi想去掉注释的时候发现删除键以及上下左右键都不听话，网上说用vim，<br>于是我就</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apt-get update</span><br><span class=\"line\">$ apt-get install vim</span><br></pre></td></tr></table></figure>\n<p>经历了漫长的等待，终于装好了。。。<br>去掉注释之后，重启一下ssh服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/ssh restart</span><br></pre></td></tr></table></figure>\n<p>之后ssh连接就断开了，直接再连也连不上，我重启了一下docker就连上了<br>之后就是公钥和密钥了，进入/etc/ssh目录，我看到好多对公钥和密钥，我就选了一对，把公钥放到～/.ssh目录，重命名为authorized_keys，<br>把私钥copy到我本地，再在本地~/.ssh目录的config里面配置一下。这边端口配49160。<br>ssh的端口是22，我这边docker映射出来的是49160。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh doc</span><br></pre></td></tr></table></figure>\n<p>就直接登录啦，美滋滋～～</p>\n<p>这边提一下docker容器和本地复制文件的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker cp oracle:/etc/ssh/ssh_host_rsa_key /usr/<span class=\"built_in\">local</span>/ssh_host_rsa_key</span><br></pre></td></tr></table></figure>\n<p>这里的oracle是我的容器的名字</p>"},{"title":"font-awesome","date":"2020-03-19T11:14:34.000Z","_content":"一个非常好用的icon库。。。 \n<!--more-->\n其实很久之前就用到过，只是当时不知道这个是font-awesome。\n我记得当时就是在样式中写了\n``` bash\ncontent: \"\\f2b9\"\n```\n一个小图标就出现了\n真的很神奇\n## 1. 问题：只显示方框\n最近又一次用到，但是图标都显示不出来，只显示一个小方块。\n于是，我就去研究了一下，这个font-awesome。\n\n## 2. 解决\n怎么解决呢，很简单，去他的官网(https://fontawesome.dashgame.com/)下载。\n从下载下来的包找到font-awesome-4.7.0/css/font-awesome.min.css，在你的页面上引入就好啦\n\n``` bash\n<head>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"～/font-awesome-4.7.0/css/font-awesome.min.css\">\n  <style>\n    .fa:before{\n      content: \"\\f2b9\";\n    }\n  </style>\n</head>\n...\n<li>\n  <i class=\"fa\"></i>\n</li>\n```\n还有更简单的写法，你可以在官网上找到你想要的图标，边上有它的名字name，你只要class给fa fa-name就可以啦。(前面的fa 一定要写哦)\n或者，如果你不知道名字，只知道content值，也可以\n``` bash\n<li>\n  <i>&#xf2b9;</i>\n</li>\n```\n\n## 3. react中使用\n最后再讲一下react框架下怎么使用\n首先\n``` bash\nnpm install --save font-awesome\n```\n然后在你要用的地方，或者是公共的less文件中引入\n``` bash\n@import '～/node_modules/font-awesome/css/font-awesome.min.css';\n```\n页面上使用的写法还是跟上面说的一样一样的。\n","source":"_posts/font-awesome.md","raw":"---\ntitle: font-awesome\ndate: 2020-03-19 19:14:34\ntags: css\n---\n一个非常好用的icon库。。。 \n<!--more-->\n其实很久之前就用到过，只是当时不知道这个是font-awesome。\n我记得当时就是在样式中写了\n``` bash\ncontent: \"\\f2b9\"\n```\n一个小图标就出现了\n真的很神奇\n## 1. 问题：只显示方框\n最近又一次用到，但是图标都显示不出来，只显示一个小方块。\n于是，我就去研究了一下，这个font-awesome。\n\n## 2. 解决\n怎么解决呢，很简单，去他的官网(https://fontawesome.dashgame.com/)下载。\n从下载下来的包找到font-awesome-4.7.0/css/font-awesome.min.css，在你的页面上引入就好啦\n\n``` bash\n<head>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"～/font-awesome-4.7.0/css/font-awesome.min.css\">\n  <style>\n    .fa:before{\n      content: \"\\f2b9\";\n    }\n  </style>\n</head>\n...\n<li>\n  <i class=\"fa\"></i>\n</li>\n```\n还有更简单的写法，你可以在官网上找到你想要的图标，边上有它的名字name，你只要class给fa fa-name就可以啦。(前面的fa 一定要写哦)\n或者，如果你不知道名字，只知道content值，也可以\n``` bash\n<li>\n  <i>&#xf2b9;</i>\n</li>\n```\n\n## 3. react中使用\n最后再讲一下react框架下怎么使用\n首先\n``` bash\nnpm install --save font-awesome\n```\n然后在你要用的地方，或者是公共的less文件中引入\n``` bash\n@import '～/node_modules/font-awesome/css/font-awesome.min.css';\n```\n页面上使用的写法还是跟上面说的一样一样的。\n","slug":"font-awesome","published":1,"updated":"2020-03-19T11:14:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpuv000540s6gu7n2ai0","content":"<p>一个非常好用的icon库。。。 </p>\n<a id=\"more\"></a>\n<p>其实很久之前就用到过，只是当时不知道这个是font-awesome。<br>我记得当时就是在样式中写了</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content: <span class=\"string\">\"\\f2b9\"</span></span><br></pre></td></tr></table></figure></div>\n<p>一个小图标就出现了<br>真的很神奇</p>\n<h2 id=\"1-问题：只显示方框\"><a href=\"#1-问题：只显示方框\" class=\"headerlink\" title=\"1. 问题：只显示方框\"></a>1. 问题：只显示方框</h2><p>最近又一次用到，但是图标都显示不出来，只显示一个小方块。<br>于是，我就去研究了一下，这个font-awesome。</p>\n<h2 id=\"2-解决\"><a href=\"#2-解决\" class=\"headerlink\" title=\"2. 解决\"></a>2. 解决</h2><p>怎么解决呢，很简单，去他的官网(<a href=\"https://fontawesome.dashgame.com/)下载。\" target=\"_blank\" rel=\"noopener\">https://fontawesome.dashgame.com/)下载。</a><br>从下载下来的包找到font-awesome-4.7.0/css/font-awesome.min.css，在你的页面上引入就好啦</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;link rel=<span class=\"string\">\"stylesheet\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"～/font-awesome-4.7.0/css/font-awesome.min.css\"</span>&gt;</span><br><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">    .fa:before&#123;</span><br><span class=\"line\">      content: <span class=\"string\">\"\\f2b9\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;li&gt;</span><br><span class=\"line\">  &lt;i class=<span class=\"string\">\"fa\"</span>&gt;&lt;/i&gt;</span><br><span class=\"line\">&lt;/li&gt;</span><br></pre></td></tr></table></figure></div>\n<p>还有更简单的写法，你可以在官网上找到你想要的图标，边上有它的名字name，你只要class给fa fa-name就可以啦。(前面的fa 一定要写哦)<br>或者，如果你不知道名字，只知道content值，也可以</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li&gt;</span><br><span class=\"line\">  &lt;i&gt;&amp;<span class=\"comment\">#xf2b9;&lt;/i&gt;</span></span><br><span class=\"line\">&lt;/li&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"3-react中使用\"><a href=\"#3-react中使用\" class=\"headerlink\" title=\"3. react中使用\"></a>3. react中使用</h2><p>最后再讲一下react框架下怎么使用<br>首先</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save font-awesome</span><br></pre></td></tr></table></figure></div>\n<p>然后在你要用的地方，或者是公共的less文件中引入</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import <span class=\"string\">'～/node_modules/font-awesome/css/font-awesome.min.css'</span>;</span><br></pre></td></tr></table></figure></div>\n<p>页面上使用的写法还是跟上面说的一样一样的。</p>\n","site":{"data":{}},"excerpt":"<p>一个非常好用的icon库。。。 </p>","more":"<p>其实很久之前就用到过，只是当时不知道这个是font-awesome。<br>我记得当时就是在样式中写了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content: <span class=\"string\">\"\\f2b9\"</span></span><br></pre></td></tr></table></figure>\n<p>一个小图标就出现了<br>真的很神奇</p>\n<h2 id=\"1-问题：只显示方框\"><a href=\"#1-问题：只显示方框\" class=\"headerlink\" title=\"1. 问题：只显示方框\"></a>1. 问题：只显示方框</h2><p>最近又一次用到，但是图标都显示不出来，只显示一个小方块。<br>于是，我就去研究了一下，这个font-awesome。</p>\n<h2 id=\"2-解决\"><a href=\"#2-解决\" class=\"headerlink\" title=\"2. 解决\"></a>2. 解决</h2><p>怎么解决呢，很简单，去他的官网(<a href=\"https://fontawesome.dashgame.com/)下载。\" target=\"_blank\" rel=\"noopener\">https://fontawesome.dashgame.com/)下载。</a><br>从下载下来的包找到font-awesome-4.7.0/css/font-awesome.min.css，在你的页面上引入就好啦</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;link rel=<span class=\"string\">\"stylesheet\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"～/font-awesome-4.7.0/css/font-awesome.min.css\"</span>&gt;</span><br><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">    .fa:before&#123;</span><br><span class=\"line\">      content: <span class=\"string\">\"\\f2b9\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;li&gt;</span><br><span class=\"line\">  &lt;i class=<span class=\"string\">\"fa\"</span>&gt;&lt;/i&gt;</span><br><span class=\"line\">&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n<p>还有更简单的写法，你可以在官网上找到你想要的图标，边上有它的名字name，你只要class给fa fa-name就可以啦。(前面的fa 一定要写哦)<br>或者，如果你不知道名字，只知道content值，也可以</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li&gt;</span><br><span class=\"line\">  &lt;i&gt;&amp;<span class=\"comment\">#xf2b9;&lt;/i&gt;</span></span><br><span class=\"line\">&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-react中使用\"><a href=\"#3-react中使用\" class=\"headerlink\" title=\"3. react中使用\"></a>3. react中使用</h2><p>最后再讲一下react框架下怎么使用<br>首先</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save font-awesome</span><br></pre></td></tr></table></figure>\n<p>然后在你要用的地方，或者是公共的less文件中引入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import <span class=\"string\">'～/node_modules/font-awesome/css/font-awesome.min.css'</span>;</span><br></pre></td></tr></table></figure>\n<p>页面上使用的写法还是跟上面说的一样一样的。</p>"},{"title":"git","date":"2019-10-18T07:15:55.000Z","_content":"git status git status git status git status git status \n<!--more-->\n## 1. I was just mumbling. Skip it please.\n自从开始工作，就开始用git，我记得第一个国庆的时候的任务，就是看git，还记得当时看的是廖雪峰老师的教程。\n当时基本是啥都不懂，就看个热闹，把看到的指令记录一下就觉得学会了，还觉得很简单。。。\n之后在工作上，用的是idea，基本不敲指令(就git clone拉一下项目)，都是图形化界面，每天也就拉拉代码，提提代码，有时候还会把别人的代码覆盖了，\n也不知道是什么原因，就被告知要先pull再push。。。\n后来上项目了跟着一个小姐姐，她用git bash和git gui，然后我也跟着用。\n再后来到了第二个项目开始知道还有merge呀stash等等，当然知道的多了，犯错的可能性就更大了。\n当时我们是多分支开发的，有一次我用master merge我的本地分支，但我的本地分支并不是最新的，导致好多提交都丢失了，经过了一上午才修复。\n那之后我一般就先本地merge master再push，再在master下merge远程分支了。。。\n再后来买了git的课程看，了解到它是分布式版本管理(*Distributed Version Control Systems*)，本地就可以是一个完整的仓库，没有远程也可以正常工作等等虽然是分布式的，但不是去中心化的，每个分布还是需要通过中心进行代码交换的。\n但是中心宕机不会影响本地，本地还是可以继续开发，等中心修复再push就可以了。\n后来小哥哥又给我讲了很多，基本上可以覆盖项目所需了。\n最近开始写blog，git总不能落下，好好梳理一下记录下来吧(我觉得这将会是搭blog以来，最长的一篇文了)。\n\n## 2. preparation\n环境：macos\ngit版本：2.20.1\n编辑器：sublime\ndiff工具：p4merge\ntips：\n   git有一个特别好的地方，就是当你打了个指令，出错了，它会告诉你出错了、为什么出错以及可能的解决指令，一般你执行一下它给你指令，就能解决问题。\n   git中，任何已提交的东西几乎都可以被找恢复，而未提交的丢失后很可能再也找不到了。\n   另外，当你执行一些rebase呀，merge，reset包括pull的时候，最好先保证本地工作目录是干净的，可以用<font color=#DC143C>stash</font>暂存，这样最安全，报错的可能性也会小一些。\n\n## 3. config\n安装就不说了，直接从配置开始吧。\n为什么开头要写那么多遍git status呢，因为这真的是git所有指令里(well，我用到的指令里)最难打的一个了。。。\n然而其实通过配置，我完全可以用一个字母替代他。。。两年了，想到这个不觉有些心酸💔\n前面提到git是分布式的，每个本地都可以作为一个服务器，实现完整的版本管理。\n\n比如在我的laptop上，我就可以在目录a建一个远程裸仓库A，在目录b分支master开发，在目录c分支dev开发，然后都push到A，从A再pull。\n这个b和c就是两个local，local级别的配置优先级最高，用下面的命令，就可以看到不同本地仓库的配置。\n(注：这个--local只能在git仓库中执行，如果没有仓库就会报错。)\n```BASH\n$ git config --list --local\n```\n目录b和目录c可能是由不同的登录用户操作的，所以git还有global(用户)级别的配置，他的优先级低于local。\n```BASH\n$ git config --list --global\n```\n此外还有系统级别的配置system，对所有登录用户都有效，优先级最低。\n```BASH\n$ git config --list --system\n```\n除了用命令，还可以直接查看配置文件，目录如下：\n\n配置级别|配置文件目录|备注\n--|:--:|--:\nlocal|.git/config|在本地仓库路径下\nglobal|~/.gitconfig|macos: /Users/ever      centos: /home/ever\nsystem|/usr/local/etc/gitconfig|我的路径是这样的，不同的git安装目录，配置文件目录也不同，可以通过which git先看一下git安装目录\n\n### 3.1. user\n先说最重要的用户配置吧，这个是必须的，不然之后commit会报错，让你去配置，因为每一次commit都会用到这些信息，并且这些信息会写入commit中，不可更改。一般配global，如果你这个仓库需要不同的用户，就用local。\n```BASH\n$ git config --global user.name 'ever'\n$ git config --global user.email '89******2@qq.com'\n```\n邮箱配你在用的，这样你的代码有啥问题，就可以发邮件告诉你了。\n\n### 3.2. core\n这里可以<font color=#FF8C00>配置编辑器</font>，我的git默认的编辑器是vim，我改成了 sublime。\n```BASH\n$ git config --global core.editor 'subl -w'\n```\n当需要你编辑信息的时候，就会自动打开<font color=#FF8C00> sublime </font>，-w表示他会等你编辑好保存关闭之后再执行指令，比如\n```BASH\n$ git commit\n```\n就会打开sublime，等你保存好关掉就提交了，如果不加-w，会打开sublime，但是直接报错回滚commit了。\n\ncore.autocrlf=input // todo\n### 3.3. alias\n别名，这是个好东西呀，那些又臭又长的指令，都可以简化，举个例子。\n```BASH\n$ git config --global alias.ca 'commit --amend'\n$ git config --global alias.l \"log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'\" //里面有单引号所以外面用双引号\n```\n### 3.4. diff & merge\n\n## 4. command\ngit的指令千千万，常用的也就那么几个，可以用git help看一下，每个指令的用处都可以看到，这个离线就可以看，非常方便。\n你还可以git help -a 一下，所有的指令都可以看到。\n这边的东西确实非常多，我竟不知道该用一个怎样的顺序来介绍。\n\n### 4.1. git init\n那就先用我这个blog项目作为实验对象，用版本管理起来吧。\n\n其实，之前在搭建的时候按照教程已经用了git，还上传了git hub，但之后push主题的时候一直报错。。。好像不支持我改配置。。。就很难受\n但是，我这个要放到服务器上去的，每次都scp的话太麻烦了，所以还是得传到git hub上，到时候就可以用jenkins部署启动啦。\n到需要git管理的目录下，我这边是 */Users/ever/lasting/ever-blog/public*，初始化git仓库。\n```BASH\n$ git init\n```\n你会看到多了一个.git目录,之前提到的config配置文件就在这个目录里面，还有很多文件，文件夹，具体都是些啥，我们先不看。\ninit之后，你就可以在这个目录下执行git的众多指令啦。\n\n### 4.2. git add\n当然init只是初始化，所有的文件还没有被git管理起来。用<font color=#00FFFF> **git add** </font>就可以实现对文件的跟踪啦。\n```BASH\n$ git add [file_name]  将file_name添加到暂存区\n$ git add -u           将已被git管理过的又修改了的文件添加到暂存区  \n$ git add .            将当前目录下的所有文件添加到暂存区\n$ git add -A           将所有文件添加到暂存区\n```\n### 4.3. git commit\n再用<font color=#00FFFF> **git commit** </font>将文件提交到本地仓库\n```BASH\n$ git commit    // 会自动打开你配置好的编辑器\n$ git commit -m 'writing your commit message here'\n```\n这边提一句git commit -am，省略了git add步骤，可以直接提交，但是如果是从未被git跟踪过的文件，是不行的，只有git add过的才行。\n\n### 4.4. 关于四个去和4种状态\n上边提到了暂存区、本地仓库，就涉及到了git的四个区：\n工作区(workspace)、暂存区(Index/Stage)、本地仓库(Repository)、远程仓库(Remote)\n\n![图1. git四大区](git四大区.jpg)\n\ngit中的文件也有多种状态：\n未跟踪(Untracked)、已入库未修改(Unmodified)、已修改(Modified)、暂存(Staged)、已提交(Committed)\n\n![图2. git文件四种状态](git文件四种状态.png)\n\n![图3. 状态转变](状态转变.jpeg)\n\n实际操作一下，就一目了然啦～\n这边还没有远程仓库，就先到本地仓库为止。\n\n目前工作目录有文件index，未跟踪状态进行如下操作\n\n序号|状态(区)|指令/操作|状态(区)\n--|:--:|--:|--:\n1|Untracked(工作目录)|git add index|Staged(暂存区)\n2|Staged(暂存区)|git commit|Committed(本地仓库)\n3|Committed(本地仓库)|edit index|Modified(暂存区)\n4|Modified(暂存区)|git add index|Staged(暂存区)\n5|Staged(暂存区)|<font color=#00FFFF> **git reset HEAD** </font> index|Modified(暂存区)\n6|Modified(暂存区)|<font color=#00FFFF> **git checkout - -** </font> index|Unmodified(暂存区)\n7|Staged(暂存区)|<font color=#00FFFF> **git rm - -cached** </font> index|Untracked(工作目录)\n\n这边乍一看蛮混乱的，举几个实际例子吧。\nExample 1\n有两个文件file1、file2，我 git add -A 全部放进暂存区了，但是后来我发现这两个文件我必须分开提交，所以我得先把一个unstage，就可以用到第7条或者第5条也行。\n如果这个文件已经commit过了，那么5和7的效果是不一样的，5是把修改的部分从暂存区挪到工作区，而7是直接从暂存区删除整个文件，相当于rm，只是文件内容会保留在工作区，所以7主要是为了rm，而5是为了unstage。\n当你提交了7的操作，那个本地仓库当前版本中就是没有这个文件的。可以用cat-file看，这个我们后面说。\nExample 2\n文件file1我提交了一次，之后又做了修改，后来这些修改我都不想要了，就可以用到6，恢复到和本地仓库一样的状态；\n我又修改了file1，add了之后，又修改了，这时候执行6，就会回到add之后的状态。\n所以6就是用于删掉工作目录的修改，这部分未被跟踪的修改是无法恢复的，所以使用时要确认自己确实不要这部分修改了，不然还是建议先commit。\n\n*(Ps：为什么关于几个状态要说这么多呢，其实我最开始在idea中用到git，从来都没有用过git add，也不知道还有暂存区，但是随着项目做得多了，代码写得多了，你会发现，规范很重要，commit message很重要，它能告诉你，告诉别人，这个commit到底做了什么，有时候看到一个commit里面8万个文件，message只有寥寥几个字，真的很气。通过add、commit你可以记录自己开发的历程，不同的方案，很重要。)*\n\n上述的各种状态都可以通过<font color=#00FFFF> **git status** </font>看到，当然配置了alias之后，我可以直接用 git s 啦。\n多打打git status，git不仅会告诉你文件当前状态，还会告诉你你接下去可以执行的操作，非常人性化。\n\n上面提到了 git rm --cached ，如果你完全不想要这个文件了，可以省略 --cached ，直接<font color=#00FFFF> **git rm** </font>[file name]。\n如果你想重命名某个文件，你可以rm再创建，或者<font color=#00FFFF> **git mv** </font>[old name] [new name]。\n\n### 4.5. git clone\n好像有点跑偏，赶紧拉回来，继续说指令\n用<font color=#00FFFF> **git clone** </font>可以把远程项目拉到本地，比如下面是我的项目在github上的url，用git clone就可以拉到本地。\n```BASH\n$ git clone https://github.com/yyycc/ever.git\n```\n\n### 4.6. git push\n\ngit remote\ngit fetch\ngit pull\ngit push\ngit merge\ngit mergetool\ngit tag\ngit checkout\ngit branch\ngit log\ngit diff\ngit cat-file\ngit stash\ngit commit --amend\ngit reset -i HEAD~\n\n如何\n```BASH\n\n```\n```BASH\n\n```\n```BASH\n\n```\n\n## Z. 参考\n[1.【Git】(1)---工作区、暂存区、版本库、远程仓库](https://www.cnblogs.com/qdhxhz/p/9757390.html)\n[2. Git官网](https://git-scm.com/)\n\n","source":"_posts/git.md","raw":"---\ntitle: git\ndate: 2019-10-18 15:15:55\ntags: 版本控制\n---\ngit status git status git status git status git status \n<!--more-->\n## 1. I was just mumbling. Skip it please.\n自从开始工作，就开始用git，我记得第一个国庆的时候的任务，就是看git，还记得当时看的是廖雪峰老师的教程。\n当时基本是啥都不懂，就看个热闹，把看到的指令记录一下就觉得学会了，还觉得很简单。。。\n之后在工作上，用的是idea，基本不敲指令(就git clone拉一下项目)，都是图形化界面，每天也就拉拉代码，提提代码，有时候还会把别人的代码覆盖了，\n也不知道是什么原因，就被告知要先pull再push。。。\n后来上项目了跟着一个小姐姐，她用git bash和git gui，然后我也跟着用。\n再后来到了第二个项目开始知道还有merge呀stash等等，当然知道的多了，犯错的可能性就更大了。\n当时我们是多分支开发的，有一次我用master merge我的本地分支，但我的本地分支并不是最新的，导致好多提交都丢失了，经过了一上午才修复。\n那之后我一般就先本地merge master再push，再在master下merge远程分支了。。。\n再后来买了git的课程看，了解到它是分布式版本管理(*Distributed Version Control Systems*)，本地就可以是一个完整的仓库，没有远程也可以正常工作等等虽然是分布式的，但不是去中心化的，每个分布还是需要通过中心进行代码交换的。\n但是中心宕机不会影响本地，本地还是可以继续开发，等中心修复再push就可以了。\n后来小哥哥又给我讲了很多，基本上可以覆盖项目所需了。\n最近开始写blog，git总不能落下，好好梳理一下记录下来吧(我觉得这将会是搭blog以来，最长的一篇文了)。\n\n## 2. preparation\n环境：macos\ngit版本：2.20.1\n编辑器：sublime\ndiff工具：p4merge\ntips：\n   git有一个特别好的地方，就是当你打了个指令，出错了，它会告诉你出错了、为什么出错以及可能的解决指令，一般你执行一下它给你指令，就能解决问题。\n   git中，任何已提交的东西几乎都可以被找恢复，而未提交的丢失后很可能再也找不到了。\n   另外，当你执行一些rebase呀，merge，reset包括pull的时候，最好先保证本地工作目录是干净的，可以用<font color=#DC143C>stash</font>暂存，这样最安全，报错的可能性也会小一些。\n\n## 3. config\n安装就不说了，直接从配置开始吧。\n为什么开头要写那么多遍git status呢，因为这真的是git所有指令里(well，我用到的指令里)最难打的一个了。。。\n然而其实通过配置，我完全可以用一个字母替代他。。。两年了，想到这个不觉有些心酸💔\n前面提到git是分布式的，每个本地都可以作为一个服务器，实现完整的版本管理。\n\n比如在我的laptop上，我就可以在目录a建一个远程裸仓库A，在目录b分支master开发，在目录c分支dev开发，然后都push到A，从A再pull。\n这个b和c就是两个local，local级别的配置优先级最高，用下面的命令，就可以看到不同本地仓库的配置。\n(注：这个--local只能在git仓库中执行，如果没有仓库就会报错。)\n```BASH\n$ git config --list --local\n```\n目录b和目录c可能是由不同的登录用户操作的，所以git还有global(用户)级别的配置，他的优先级低于local。\n```BASH\n$ git config --list --global\n```\n此外还有系统级别的配置system，对所有登录用户都有效，优先级最低。\n```BASH\n$ git config --list --system\n```\n除了用命令，还可以直接查看配置文件，目录如下：\n\n配置级别|配置文件目录|备注\n--|:--:|--:\nlocal|.git/config|在本地仓库路径下\nglobal|~/.gitconfig|macos: /Users/ever      centos: /home/ever\nsystem|/usr/local/etc/gitconfig|我的路径是这样的，不同的git安装目录，配置文件目录也不同，可以通过which git先看一下git安装目录\n\n### 3.1. user\n先说最重要的用户配置吧，这个是必须的，不然之后commit会报错，让你去配置，因为每一次commit都会用到这些信息，并且这些信息会写入commit中，不可更改。一般配global，如果你这个仓库需要不同的用户，就用local。\n```BASH\n$ git config --global user.name 'ever'\n$ git config --global user.email '89******2@qq.com'\n```\n邮箱配你在用的，这样你的代码有啥问题，就可以发邮件告诉你了。\n\n### 3.2. core\n这里可以<font color=#FF8C00>配置编辑器</font>，我的git默认的编辑器是vim，我改成了 sublime。\n```BASH\n$ git config --global core.editor 'subl -w'\n```\n当需要你编辑信息的时候，就会自动打开<font color=#FF8C00> sublime </font>，-w表示他会等你编辑好保存关闭之后再执行指令，比如\n```BASH\n$ git commit\n```\n就会打开sublime，等你保存好关掉就提交了，如果不加-w，会打开sublime，但是直接报错回滚commit了。\n\ncore.autocrlf=input // todo\n### 3.3. alias\n别名，这是个好东西呀，那些又臭又长的指令，都可以简化，举个例子。\n```BASH\n$ git config --global alias.ca 'commit --amend'\n$ git config --global alias.l \"log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'\" //里面有单引号所以外面用双引号\n```\n### 3.4. diff & merge\n\n## 4. command\ngit的指令千千万，常用的也就那么几个，可以用git help看一下，每个指令的用处都可以看到，这个离线就可以看，非常方便。\n你还可以git help -a 一下，所有的指令都可以看到。\n这边的东西确实非常多，我竟不知道该用一个怎样的顺序来介绍。\n\n### 4.1. git init\n那就先用我这个blog项目作为实验对象，用版本管理起来吧。\n\n其实，之前在搭建的时候按照教程已经用了git，还上传了git hub，但之后push主题的时候一直报错。。。好像不支持我改配置。。。就很难受\n但是，我这个要放到服务器上去的，每次都scp的话太麻烦了，所以还是得传到git hub上，到时候就可以用jenkins部署启动啦。\n到需要git管理的目录下，我这边是 */Users/ever/lasting/ever-blog/public*，初始化git仓库。\n```BASH\n$ git init\n```\n你会看到多了一个.git目录,之前提到的config配置文件就在这个目录里面，还有很多文件，文件夹，具体都是些啥，我们先不看。\ninit之后，你就可以在这个目录下执行git的众多指令啦。\n\n### 4.2. git add\n当然init只是初始化，所有的文件还没有被git管理起来。用<font color=#00FFFF> **git add** </font>就可以实现对文件的跟踪啦。\n```BASH\n$ git add [file_name]  将file_name添加到暂存区\n$ git add -u           将已被git管理过的又修改了的文件添加到暂存区  \n$ git add .            将当前目录下的所有文件添加到暂存区\n$ git add -A           将所有文件添加到暂存区\n```\n### 4.3. git commit\n再用<font color=#00FFFF> **git commit** </font>将文件提交到本地仓库\n```BASH\n$ git commit    // 会自动打开你配置好的编辑器\n$ git commit -m 'writing your commit message here'\n```\n这边提一句git commit -am，省略了git add步骤，可以直接提交，但是如果是从未被git跟踪过的文件，是不行的，只有git add过的才行。\n\n### 4.4. 关于四个去和4种状态\n上边提到了暂存区、本地仓库，就涉及到了git的四个区：\n工作区(workspace)、暂存区(Index/Stage)、本地仓库(Repository)、远程仓库(Remote)\n\n![图1. git四大区](git四大区.jpg)\n\ngit中的文件也有多种状态：\n未跟踪(Untracked)、已入库未修改(Unmodified)、已修改(Modified)、暂存(Staged)、已提交(Committed)\n\n![图2. git文件四种状态](git文件四种状态.png)\n\n![图3. 状态转变](状态转变.jpeg)\n\n实际操作一下，就一目了然啦～\n这边还没有远程仓库，就先到本地仓库为止。\n\n目前工作目录有文件index，未跟踪状态进行如下操作\n\n序号|状态(区)|指令/操作|状态(区)\n--|:--:|--:|--:\n1|Untracked(工作目录)|git add index|Staged(暂存区)\n2|Staged(暂存区)|git commit|Committed(本地仓库)\n3|Committed(本地仓库)|edit index|Modified(暂存区)\n4|Modified(暂存区)|git add index|Staged(暂存区)\n5|Staged(暂存区)|<font color=#00FFFF> **git reset HEAD** </font> index|Modified(暂存区)\n6|Modified(暂存区)|<font color=#00FFFF> **git checkout - -** </font> index|Unmodified(暂存区)\n7|Staged(暂存区)|<font color=#00FFFF> **git rm - -cached** </font> index|Untracked(工作目录)\n\n这边乍一看蛮混乱的，举几个实际例子吧。\nExample 1\n有两个文件file1、file2，我 git add -A 全部放进暂存区了，但是后来我发现这两个文件我必须分开提交，所以我得先把一个unstage，就可以用到第7条或者第5条也行。\n如果这个文件已经commit过了，那么5和7的效果是不一样的，5是把修改的部分从暂存区挪到工作区，而7是直接从暂存区删除整个文件，相当于rm，只是文件内容会保留在工作区，所以7主要是为了rm，而5是为了unstage。\n当你提交了7的操作，那个本地仓库当前版本中就是没有这个文件的。可以用cat-file看，这个我们后面说。\nExample 2\n文件file1我提交了一次，之后又做了修改，后来这些修改我都不想要了，就可以用到6，恢复到和本地仓库一样的状态；\n我又修改了file1，add了之后，又修改了，这时候执行6，就会回到add之后的状态。\n所以6就是用于删掉工作目录的修改，这部分未被跟踪的修改是无法恢复的，所以使用时要确认自己确实不要这部分修改了，不然还是建议先commit。\n\n*(Ps：为什么关于几个状态要说这么多呢，其实我最开始在idea中用到git，从来都没有用过git add，也不知道还有暂存区，但是随着项目做得多了，代码写得多了，你会发现，规范很重要，commit message很重要，它能告诉你，告诉别人，这个commit到底做了什么，有时候看到一个commit里面8万个文件，message只有寥寥几个字，真的很气。通过add、commit你可以记录自己开发的历程，不同的方案，很重要。)*\n\n上述的各种状态都可以通过<font color=#00FFFF> **git status** </font>看到，当然配置了alias之后，我可以直接用 git s 啦。\n多打打git status，git不仅会告诉你文件当前状态，还会告诉你你接下去可以执行的操作，非常人性化。\n\n上面提到了 git rm --cached ，如果你完全不想要这个文件了，可以省略 --cached ，直接<font color=#00FFFF> **git rm** </font>[file name]。\n如果你想重命名某个文件，你可以rm再创建，或者<font color=#00FFFF> **git mv** </font>[old name] [new name]。\n\n### 4.5. git clone\n好像有点跑偏，赶紧拉回来，继续说指令\n用<font color=#00FFFF> **git clone** </font>可以把远程项目拉到本地，比如下面是我的项目在github上的url，用git clone就可以拉到本地。\n```BASH\n$ git clone https://github.com/yyycc/ever.git\n```\n\n### 4.6. git push\n\ngit remote\ngit fetch\ngit pull\ngit push\ngit merge\ngit mergetool\ngit tag\ngit checkout\ngit branch\ngit log\ngit diff\ngit cat-file\ngit stash\ngit commit --amend\ngit reset -i HEAD~\n\n如何\n```BASH\n\n```\n```BASH\n\n```\n```BASH\n\n```\n\n## Z. 参考\n[1.【Git】(1)---工作区、暂存区、版本库、远程仓库](https://www.cnblogs.com/qdhxhz/p/9757390.html)\n[2. Git官网](https://git-scm.com/)\n\n","slug":"git","published":1,"updated":"2019-10-18T07:15:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpux000640s6he6t7pvf","content":"<p>git status git status git status git status git status </p>\n<a id=\"more\"></a>\n<h2 id=\"1-I-was-just-mumbling-Skip-it-please\"><a href=\"#1-I-was-just-mumbling-Skip-it-please\" class=\"headerlink\" title=\"1. I was just mumbling. Skip it please.\"></a>1. I was just mumbling. Skip it please.</h2><p>自从开始工作，就开始用git，我记得第一个国庆的时候的任务，就是看git，还记得当时看的是廖雪峰老师的教程。<br>当时基本是啥都不懂，就看个热闹，把看到的指令记录一下就觉得学会了，还觉得很简单。。。<br>之后在工作上，用的是idea，基本不敲指令(就git clone拉一下项目)，都是图形化界面，每天也就拉拉代码，提提代码，有时候还会把别人的代码覆盖了，<br>也不知道是什么原因，就被告知要先pull再push。。。<br>后来上项目了跟着一个小姐姐，她用git bash和git gui，然后我也跟着用。<br>再后来到了第二个项目开始知道还有merge呀stash等等，当然知道的多了，犯错的可能性就更大了。<br>当时我们是多分支开发的，有一次我用master merge我的本地分支，但我的本地分支并不是最新的，导致好多提交都丢失了，经过了一上午才修复。<br>那之后我一般就先本地merge master再push，再在master下merge远程分支了。。。<br>再后来买了git的课程看，了解到它是分布式版本管理(<em>Distributed Version Control Systems</em>)，本地就可以是一个完整的仓库，没有远程也可以正常工作等等虽然是分布式的，但不是去中心化的，每个分布还是需要通过中心进行代码交换的。<br>但是中心宕机不会影响本地，本地还是可以继续开发，等中心修复再push就可以了。<br>后来小哥哥又给我讲了很多，基本上可以覆盖项目所需了。<br>最近开始写blog，git总不能落下，好好梳理一下记录下来吧(我觉得这将会是搭blog以来，最长的一篇文了)。</p>\n<h2 id=\"2-preparation\"><a href=\"#2-preparation\" class=\"headerlink\" title=\"2. preparation\"></a>2. preparation</h2><p>环境：macos<br>git版本：2.20.1<br>编辑器：sublime<br>diff工具：p4merge<br>tips：<br>   git有一个特别好的地方，就是当你打了个指令，出错了，它会告诉你出错了、为什么出错以及可能的解决指令，一般你执行一下它给你指令，就能解决问题。<br>   git中，任何已提交的东西几乎都可以被找恢复，而未提交的丢失后很可能再也找不到了。<br>   另外，当你执行一些rebase呀，merge，reset包括pull的时候，最好先保证本地工作目录是干净的，可以用<font color=\"#DC143C\">stash</font>暂存，这样最安全，报错的可能性也会小一些。</p>\n<h2 id=\"3-config\"><a href=\"#3-config\" class=\"headerlink\" title=\"3. config\"></a>3. config</h2><p>安装就不说了，直接从配置开始吧。<br>为什么开头要写那么多遍git status呢，因为这真的是git所有指令里(well，我用到的指令里)最难打的一个了。。。<br>然而其实通过配置，我完全可以用一个字母替代他。。。两年了，想到这个不觉有些心酸💔<br>前面提到git是分布式的，每个本地都可以作为一个服务器，实现完整的版本管理。</p>\n<p>比如在我的laptop上，我就可以在目录a建一个远程裸仓库A，在目录b分支master开发，在目录c分支dev开发，然后都push到A，从A再pull。<br>这个b和c就是两个local，local级别的配置优先级最高，用下面的命令，就可以看到不同本地仓库的配置。<br>(注：这个–local只能在git仓库中执行，如果没有仓库就会报错。)</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list --<span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure></div>\n<p>目录b和目录c可能是由不同的登录用户操作的，所以git还有global(用户)级别的配置，他的优先级低于local。</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list --global</span><br></pre></td></tr></table></figure></div>\n<p>此外还有系统级别的配置system，对所有登录用户都有效，优先级最低。</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list --system</span><br></pre></td></tr></table></figure></div>\n<p>除了用命令，还可以直接查看配置文件，目录如下：</p>\n<table>\n<thead>\n<tr>\n<th>配置级别</th>\n<th align=\"center\">配置文件目录</th>\n<th align=\"right\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>local</td>\n<td align=\"center\">.git/config</td>\n<td align=\"right\">在本地仓库路径下</td>\n</tr>\n<tr>\n<td>global</td>\n<td align=\"center\">~/.gitconfig</td>\n<td align=\"right\">macos: /Users/ever      centos: /home/ever</td>\n</tr>\n<tr>\n<td>system</td>\n<td align=\"center\">/usr/local/etc/gitconfig</td>\n<td align=\"right\">我的路径是这样的，不同的git安装目录，配置文件目录也不同，可以通过which git先看一下git安装目录</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-1-user\"><a href=\"#3-1-user\" class=\"headerlink\" title=\"3.1. user\"></a>3.1. user</h3><p>先说最重要的用户配置吧，这个是必须的，不然之后commit会报错，让你去配置，因为每一次commit都会用到这些信息，并且这些信息会写入commit中，不可更改。一般配global，如果你这个仓库需要不同的用户，就用local。</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">'ever'</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">'89******2@qq.com'</span></span><br></pre></td></tr></table></figure></div>\n<p>邮箱配你在用的，这样你的代码有啥问题，就可以发邮件告诉你了。</p>\n<h3 id=\"3-2-core\"><a href=\"#3-2-core\" class=\"headerlink\" title=\"3.2. core\"></a>3.2. core</h3><p>这里可以<font color=\"#FF8C00\">配置编辑器</font>，我的git默认的编辑器是vim，我改成了 sublime。</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global core.editor <span class=\"string\">'subl -w'</span></span><br></pre></td></tr></table></figure></div>\n<p>当需要你编辑信息的时候，就会自动打开<font color=\"#FF8C00\"> sublime </font>，-w表示他会等你编辑好保存关闭之后再执行指令，比如</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit</span><br></pre></td></tr></table></figure></div>\n<p>就会打开sublime，等你保存好关掉就提交了，如果不加-w，会打开sublime，但是直接报错回滚commit了。</p>\n<p>core.autocrlf=input // todo</p>\n<h3 id=\"3-3-alias\"><a href=\"#3-3-alias\" class=\"headerlink\" title=\"3.3. alias\"></a>3.3. alias</h3><p>别名，这是个好东西呀，那些又臭又长的指令，都可以简化，举个例子。</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.ca <span class=\"string\">'commit --amend'</span></span><br><span class=\"line\">$ git config --global alias.l <span class=\"string\">\"log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'\"</span> //里面有单引号所以外面用双引号</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"3-4-diff-amp-merge\"><a href=\"#3-4-diff-amp-merge\" class=\"headerlink\" title=\"3.4. diff &amp; merge\"></a>3.4. diff &amp; merge</h3><h2 id=\"4-command\"><a href=\"#4-command\" class=\"headerlink\" title=\"4. command\"></a>4. command</h2><p>git的指令千千万，常用的也就那么几个，可以用git help看一下，每个指令的用处都可以看到，这个离线就可以看，非常方便。<br>你还可以git help -a 一下，所有的指令都可以看到。<br>这边的东西确实非常多，我竟不知道该用一个怎样的顺序来介绍。</p>\n<h3 id=\"4-1-git-init\"><a href=\"#4-1-git-init\" class=\"headerlink\" title=\"4.1. git init\"></a>4.1. git init</h3><p>那就先用我这个blog项目作为实验对象，用版本管理起来吧。</p>\n<p>其实，之前在搭建的时候按照教程已经用了git，还上传了git hub，但之后push主题的时候一直报错。。。好像不支持我改配置。。。就很难受<br>但是，我这个要放到服务器上去的，每次都scp的话太麻烦了，所以还是得传到git hub上，到时候就可以用jenkins部署启动啦。<br>到需要git管理的目录下，我这边是 <em>/Users/ever/lasting/ever-blog/public</em>，初始化git仓库。</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure></div>\n<p>你会看到多了一个.git目录,之前提到的config配置文件就在这个目录里面，还有很多文件，文件夹，具体都是些啥，我们先不看。<br>init之后，你就可以在这个目录下执行git的众多指令啦。</p>\n<h3 id=\"4-2-git-add\"><a href=\"#4-2-git-add\" class=\"headerlink\" title=\"4.2. git add\"></a>4.2. git add</h3><p>当然init只是初始化，所有的文件还没有被git管理起来。用<font color=\"#00FFFF\"> <strong>git add</strong> </font>就可以实现对文件的跟踪啦。</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add [file_name]  将file_name添加到暂存区</span><br><span class=\"line\">$ git add -u           将已被git管理过的又修改了的文件添加到暂存区  </span><br><span class=\"line\">$ git add .            将当前目录下的所有文件添加到暂存区</span><br><span class=\"line\">$ git add -A           将所有文件添加到暂存区</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"4-3-git-commit\"><a href=\"#4-3-git-commit\" class=\"headerlink\" title=\"4.3. git commit\"></a>4.3. git commit</h3><p>再用<font color=\"#00FFFF\"> <strong>git commit</strong> </font>将文件提交到本地仓库</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit    // 会自动打开你配置好的编辑器</span><br><span class=\"line\">$ git commit -m <span class=\"string\">'writing your commit message here'</span></span><br></pre></td></tr></table></figure></div>\n<p>这边提一句git commit -am，省略了git add步骤，可以直接提交，但是如果是从未被git跟踪过的文件，是不行的，只有git add过的才行。</p>\n<h3 id=\"4-4-关于四个去和4种状态\"><a href=\"#4-4-关于四个去和4种状态\" class=\"headerlink\" title=\"4.4. 关于四个去和4种状态\"></a>4.4. 关于四个去和4种状态</h3><p>上边提到了暂存区、本地仓库，就涉及到了git的四个区：<br>工作区(workspace)、暂存区(Index/Stage)、本地仓库(Repository)、远程仓库(Remote)</p>\n<p><img src=\"/2019/10/18/git/git%E5%9B%9B%E5%A4%A7%E5%8C%BA.jpg\" alt=\"图1. git四大区\"></p>\n<p>git中的文件也有多种状态：<br>未跟踪(Untracked)、已入库未修改(Unmodified)、已修改(Modified)、暂存(Staged)、已提交(Committed)</p>\n<p><img src=\"/2019/10/18/git/git%E6%96%87%E4%BB%B6%E5%9B%9B%E7%A7%8D%E7%8A%B6%E6%80%81.png\" alt=\"图2. git文件四种状态\"></p>\n<p><img src=\"/2019/10/18/git/%E7%8A%B6%E6%80%81%E8%BD%AC%E5%8F%98.jpeg\" alt=\"图3. 状态转变\"></p>\n<p>实际操作一下，就一目了然啦～<br>这边还没有远程仓库，就先到本地仓库为止。</p>\n<p>目前工作目录有文件index，未跟踪状态进行如下操作</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th align=\"center\">状态(区)</th>\n<th align=\"right\">指令/操作</th>\n<th align=\"right\">状态(区)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td align=\"center\">Untracked(工作目录)</td>\n<td align=\"right\">git add index</td>\n<td align=\"right\">Staged(暂存区)</td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"center\">Staged(暂存区)</td>\n<td align=\"right\">git commit</td>\n<td align=\"right\">Committed(本地仓库)</td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"center\">Committed(本地仓库)</td>\n<td align=\"right\">edit index</td>\n<td align=\"right\">Modified(暂存区)</td>\n</tr>\n<tr>\n<td>4</td>\n<td align=\"center\">Modified(暂存区)</td>\n<td align=\"right\">git add index</td>\n<td align=\"right\">Staged(暂存区)</td>\n</tr>\n<tr>\n<td>5</td>\n<td align=\"center\">Staged(暂存区)</td>\n<td align=\"right\"><font color=\"#00FFFF\"> <strong>git reset HEAD</strong> </font> index</td>\n<td align=\"right\">Modified(暂存区)</td>\n</tr>\n<tr>\n<td>6</td>\n<td align=\"center\">Modified(暂存区)</td>\n<td align=\"right\"><font color=\"#00FFFF\"> <strong>git checkout - -</strong> </font> index</td>\n<td align=\"right\">Unmodified(暂存区)</td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"center\">Staged(暂存区)</td>\n<td align=\"right\"><font color=\"#00FFFF\"> <strong>git rm - -cached</strong> </font> index</td>\n<td align=\"right\">Untracked(工作目录)</td>\n</tr>\n</tbody></table>\n<p>这边乍一看蛮混乱的，举几个实际例子吧。<br>Example 1<br>有两个文件file1、file2，我 git add -A 全部放进暂存区了，但是后来我发现这两个文件我必须分开提交，所以我得先把一个unstage，就可以用到第7条或者第5条也行。<br>如果这个文件已经commit过了，那么5和7的效果是不一样的，5是把修改的部分从暂存区挪到工作区，而7是直接从暂存区删除整个文件，相当于rm，只是文件内容会保留在工作区，所以7主要是为了rm，而5是为了unstage。<br>当你提交了7的操作，那个本地仓库当前版本中就是没有这个文件的。可以用cat-file看，这个我们后面说。<br>Example 2<br>文件file1我提交了一次，之后又做了修改，后来这些修改我都不想要了，就可以用到6，恢复到和本地仓库一样的状态；<br>我又修改了file1，add了之后，又修改了，这时候执行6，就会回到add之后的状态。<br>所以6就是用于删掉工作目录的修改，这部分未被跟踪的修改是无法恢复的，所以使用时要确认自己确实不要这部分修改了，不然还是建议先commit。</p>\n<p><em>(Ps：为什么关于几个状态要说这么多呢，其实我最开始在idea中用到git，从来都没有用过git add，也不知道还有暂存区，但是随着项目做得多了，代码写得多了，你会发现，规范很重要，commit message很重要，它能告诉你，告诉别人，这个commit到底做了什么，有时候看到一个commit里面8万个文件，message只有寥寥几个字，真的很气。通过add、commit你可以记录自己开发的历程，不同的方案，很重要。)</em></p>\n<p>上述的各种状态都可以通过<font color=\"#00FFFF\"> <strong>git status</strong> </font>看到，当然配置了alias之后，我可以直接用 git s 啦。<br>多打打git status，git不仅会告诉你文件当前状态，还会告诉你你接下去可以执行的操作，非常人性化。</p>\n<p>上面提到了 git rm –cached ，如果你完全不想要这个文件了，可以省略 –cached ，直接<font color=\"#00FFFF\"> <strong>git rm</strong> </font>[file name]。<br>如果你想重命名某个文件，你可以rm再创建，或者<font color=\"#00FFFF\"> <strong>git mv</strong> </font>[old name] [new name]。</p>\n<h3 id=\"4-5-git-clone\"><a href=\"#4-5-git-clone\" class=\"headerlink\" title=\"4.5. git clone\"></a>4.5. git clone</h3><p>好像有点跑偏，赶紧拉回来，继续说指令<br>用<font color=\"#00FFFF\"> <strong>git clone</strong> </font>可以把远程项目拉到本地，比如下面是我的项目在github上的url，用git clone就可以拉到本地。</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/yyycc/ever.git</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"4-6-git-push\"><a href=\"#4-6-git-push\" class=\"headerlink\" title=\"4.6. git push\"></a>4.6. git push</h3><p>git remote<br>git fetch<br>git pull<br>git push<br>git merge<br>git mergetool<br>git tag<br>git checkout<br>git branch<br>git log<br>git diff<br>git cat-file<br>git stash<br>git commit –amend<br>git reset -i HEAD~</p>\n<p>如何</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"Z-参考\"><a href=\"#Z-参考\" class=\"headerlink\" title=\"Z. 参考\"></a>Z. 参考</h2><p><a href=\"https://www.cnblogs.com/qdhxhz/p/9757390.html\" target=\"_blank\" rel=\"noopener\">1.【Git】(1)—工作区、暂存区、版本库、远程仓库</a><br><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">2. Git官网</a></p>\n","site":{"data":{}},"excerpt":"<p>git status git status git status git status git status </p>","more":"<h2 id=\"1-I-was-just-mumbling-Skip-it-please\"><a href=\"#1-I-was-just-mumbling-Skip-it-please\" class=\"headerlink\" title=\"1. I was just mumbling. Skip it please.\"></a>1. I was just mumbling. Skip it please.</h2><p>自从开始工作，就开始用git，我记得第一个国庆的时候的任务，就是看git，还记得当时看的是廖雪峰老师的教程。<br>当时基本是啥都不懂，就看个热闹，把看到的指令记录一下就觉得学会了，还觉得很简单。。。<br>之后在工作上，用的是idea，基本不敲指令(就git clone拉一下项目)，都是图形化界面，每天也就拉拉代码，提提代码，有时候还会把别人的代码覆盖了，<br>也不知道是什么原因，就被告知要先pull再push。。。<br>后来上项目了跟着一个小姐姐，她用git bash和git gui，然后我也跟着用。<br>再后来到了第二个项目开始知道还有merge呀stash等等，当然知道的多了，犯错的可能性就更大了。<br>当时我们是多分支开发的，有一次我用master merge我的本地分支，但我的本地分支并不是最新的，导致好多提交都丢失了，经过了一上午才修复。<br>那之后我一般就先本地merge master再push，再在master下merge远程分支了。。。<br>再后来买了git的课程看，了解到它是分布式版本管理(<em>Distributed Version Control Systems</em>)，本地就可以是一个完整的仓库，没有远程也可以正常工作等等虽然是分布式的，但不是去中心化的，每个分布还是需要通过中心进行代码交换的。<br>但是中心宕机不会影响本地，本地还是可以继续开发，等中心修复再push就可以了。<br>后来小哥哥又给我讲了很多，基本上可以覆盖项目所需了。<br>最近开始写blog，git总不能落下，好好梳理一下记录下来吧(我觉得这将会是搭blog以来，最长的一篇文了)。</p>\n<h2 id=\"2-preparation\"><a href=\"#2-preparation\" class=\"headerlink\" title=\"2. preparation\"></a>2. preparation</h2><p>环境：macos<br>git版本：2.20.1<br>编辑器：sublime<br>diff工具：p4merge<br>tips：<br>   git有一个特别好的地方，就是当你打了个指令，出错了，它会告诉你出错了、为什么出错以及可能的解决指令，一般你执行一下它给你指令，就能解决问题。<br>   git中，任何已提交的东西几乎都可以被找恢复，而未提交的丢失后很可能再也找不到了。<br>   另外，当你执行一些rebase呀，merge，reset包括pull的时候，最好先保证本地工作目录是干净的，可以用<font color=\"#DC143C\">stash</font>暂存，这样最安全，报错的可能性也会小一些。</p>\n<h2 id=\"3-config\"><a href=\"#3-config\" class=\"headerlink\" title=\"3. config\"></a>3. config</h2><p>安装就不说了，直接从配置开始吧。<br>为什么开头要写那么多遍git status呢，因为这真的是git所有指令里(well，我用到的指令里)最难打的一个了。。。<br>然而其实通过配置，我完全可以用一个字母替代他。。。两年了，想到这个不觉有些心酸💔<br>前面提到git是分布式的，每个本地都可以作为一个服务器，实现完整的版本管理。</p>\n<p>比如在我的laptop上，我就可以在目录a建一个远程裸仓库A，在目录b分支master开发，在目录c分支dev开发，然后都push到A，从A再pull。<br>这个b和c就是两个local，local级别的配置优先级最高，用下面的命令，就可以看到不同本地仓库的配置。<br>(注：这个–local只能在git仓库中执行，如果没有仓库就会报错。)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list --<span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n<p>目录b和目录c可能是由不同的登录用户操作的，所以git还有global(用户)级别的配置，他的优先级低于local。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list --global</span><br></pre></td></tr></table></figure>\n<p>此外还有系统级别的配置system，对所有登录用户都有效，优先级最低。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list --system</span><br></pre></td></tr></table></figure>\n<p>除了用命令，还可以直接查看配置文件，目录如下：</p>\n<table>\n<thead>\n<tr>\n<th>配置级别</th>\n<th align=\"center\">配置文件目录</th>\n<th align=\"right\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>local</td>\n<td align=\"center\">.git/config</td>\n<td align=\"right\">在本地仓库路径下</td>\n</tr>\n<tr>\n<td>global</td>\n<td align=\"center\">~/.gitconfig</td>\n<td align=\"right\">macos: /Users/ever      centos: /home/ever</td>\n</tr>\n<tr>\n<td>system</td>\n<td align=\"center\">/usr/local/etc/gitconfig</td>\n<td align=\"right\">我的路径是这样的，不同的git安装目录，配置文件目录也不同，可以通过which git先看一下git安装目录</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-1-user\"><a href=\"#3-1-user\" class=\"headerlink\" title=\"3.1. user\"></a>3.1. user</h3><p>先说最重要的用户配置吧，这个是必须的，不然之后commit会报错，让你去配置，因为每一次commit都会用到这些信息，并且这些信息会写入commit中，不可更改。一般配global，如果你这个仓库需要不同的用户，就用local。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">'ever'</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">'89******2@qq.com'</span></span><br></pre></td></tr></table></figure>\n<p>邮箱配你在用的，这样你的代码有啥问题，就可以发邮件告诉你了。</p>\n<h3 id=\"3-2-core\"><a href=\"#3-2-core\" class=\"headerlink\" title=\"3.2. core\"></a>3.2. core</h3><p>这里可以<font color=\"#FF8C00\">配置编辑器</font>，我的git默认的编辑器是vim，我改成了 sublime。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global core.editor <span class=\"string\">'subl -w'</span></span><br></pre></td></tr></table></figure>\n<p>当需要你编辑信息的时候，就会自动打开<font color=\"#FF8C00\"> sublime </font>，-w表示他会等你编辑好保存关闭之后再执行指令，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit</span><br></pre></td></tr></table></figure>\n<p>就会打开sublime，等你保存好关掉就提交了，如果不加-w，会打开sublime，但是直接报错回滚commit了。</p>\n<p>core.autocrlf=input // todo</p>\n<h3 id=\"3-3-alias\"><a href=\"#3-3-alias\" class=\"headerlink\" title=\"3.3. alias\"></a>3.3. alias</h3><p>别名，这是个好东西呀，那些又臭又长的指令，都可以简化，举个例子。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.ca <span class=\"string\">'commit --amend'</span></span><br><span class=\"line\">$ git config --global alias.l <span class=\"string\">\"log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'\"</span> //里面有单引号所以外面用双引号</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-diff-amp-merge\"><a href=\"#3-4-diff-amp-merge\" class=\"headerlink\" title=\"3.4. diff &amp; merge\"></a>3.4. diff &amp; merge</h3><h2 id=\"4-command\"><a href=\"#4-command\" class=\"headerlink\" title=\"4. command\"></a>4. command</h2><p>git的指令千千万，常用的也就那么几个，可以用git help看一下，每个指令的用处都可以看到，这个离线就可以看，非常方便。<br>你还可以git help -a 一下，所有的指令都可以看到。<br>这边的东西确实非常多，我竟不知道该用一个怎样的顺序来介绍。</p>\n<h3 id=\"4-1-git-init\"><a href=\"#4-1-git-init\" class=\"headerlink\" title=\"4.1. git init\"></a>4.1. git init</h3><p>那就先用我这个blog项目作为实验对象，用版本管理起来吧。</p>\n<p>其实，之前在搭建的时候按照教程已经用了git，还上传了git hub，但之后push主题的时候一直报错。。。好像不支持我改配置。。。就很难受<br>但是，我这个要放到服务器上去的，每次都scp的话太麻烦了，所以还是得传到git hub上，到时候就可以用jenkins部署启动啦。<br>到需要git管理的目录下，我这边是 <em>/Users/ever/lasting/ever-blog/public</em>，初始化git仓库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n<p>你会看到多了一个.git目录,之前提到的config配置文件就在这个目录里面，还有很多文件，文件夹，具体都是些啥，我们先不看。<br>init之后，你就可以在这个目录下执行git的众多指令啦。</p>\n<h3 id=\"4-2-git-add\"><a href=\"#4-2-git-add\" class=\"headerlink\" title=\"4.2. git add\"></a>4.2. git add</h3><p>当然init只是初始化，所有的文件还没有被git管理起来。用<font color=\"#00FFFF\"> <strong>git add</strong> </font>就可以实现对文件的跟踪啦。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add [file_name]  将file_name添加到暂存区</span><br><span class=\"line\">$ git add -u           将已被git管理过的又修改了的文件添加到暂存区  </span><br><span class=\"line\">$ git add .            将当前目录下的所有文件添加到暂存区</span><br><span class=\"line\">$ git add -A           将所有文件添加到暂存区</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-3-git-commit\"><a href=\"#4-3-git-commit\" class=\"headerlink\" title=\"4.3. git commit\"></a>4.3. git commit</h3><p>再用<font color=\"#00FFFF\"> <strong>git commit</strong> </font>将文件提交到本地仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit    // 会自动打开你配置好的编辑器</span><br><span class=\"line\">$ git commit -m <span class=\"string\">'writing your commit message here'</span></span><br></pre></td></tr></table></figure>\n<p>这边提一句git commit -am，省略了git add步骤，可以直接提交，但是如果是从未被git跟踪过的文件，是不行的，只有git add过的才行。</p>\n<h3 id=\"4-4-关于四个去和4种状态\"><a href=\"#4-4-关于四个去和4种状态\" class=\"headerlink\" title=\"4.4. 关于四个去和4种状态\"></a>4.4. 关于四个去和4种状态</h3><p>上边提到了暂存区、本地仓库，就涉及到了git的四个区：<br>工作区(workspace)、暂存区(Index/Stage)、本地仓库(Repository)、远程仓库(Remote)</p>\n<p><img src=\"/2019/10/18/git/git%E5%9B%9B%E5%A4%A7%E5%8C%BA.jpg\" alt=\"图1. git四大区\"></p>\n<p>git中的文件也有多种状态：<br>未跟踪(Untracked)、已入库未修改(Unmodified)、已修改(Modified)、暂存(Staged)、已提交(Committed)</p>\n<p><img src=\"/2019/10/18/git/git%E6%96%87%E4%BB%B6%E5%9B%9B%E7%A7%8D%E7%8A%B6%E6%80%81.png\" alt=\"图2. git文件四种状态\"></p>\n<p><img src=\"/2019/10/18/git/%E7%8A%B6%E6%80%81%E8%BD%AC%E5%8F%98.jpeg\" alt=\"图3. 状态转变\"></p>\n<p>实际操作一下，就一目了然啦～<br>这边还没有远程仓库，就先到本地仓库为止。</p>\n<p>目前工作目录有文件index，未跟踪状态进行如下操作</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th align=\"center\">状态(区)</th>\n<th align=\"right\">指令/操作</th>\n<th align=\"right\">状态(区)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td align=\"center\">Untracked(工作目录)</td>\n<td align=\"right\">git add index</td>\n<td align=\"right\">Staged(暂存区)</td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"center\">Staged(暂存区)</td>\n<td align=\"right\">git commit</td>\n<td align=\"right\">Committed(本地仓库)</td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"center\">Committed(本地仓库)</td>\n<td align=\"right\">edit index</td>\n<td align=\"right\">Modified(暂存区)</td>\n</tr>\n<tr>\n<td>4</td>\n<td align=\"center\">Modified(暂存区)</td>\n<td align=\"right\">git add index</td>\n<td align=\"right\">Staged(暂存区)</td>\n</tr>\n<tr>\n<td>5</td>\n<td align=\"center\">Staged(暂存区)</td>\n<td align=\"right\"><font color=\"#00FFFF\"> <strong>git reset HEAD</strong> </font> index</td>\n<td align=\"right\">Modified(暂存区)</td>\n</tr>\n<tr>\n<td>6</td>\n<td align=\"center\">Modified(暂存区)</td>\n<td align=\"right\"><font color=\"#00FFFF\"> <strong>git checkout - -</strong> </font> index</td>\n<td align=\"right\">Unmodified(暂存区)</td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"center\">Staged(暂存区)</td>\n<td align=\"right\"><font color=\"#00FFFF\"> <strong>git rm - -cached</strong> </font> index</td>\n<td align=\"right\">Untracked(工作目录)</td>\n</tr>\n</tbody></table>\n<p>这边乍一看蛮混乱的，举几个实际例子吧。<br>Example 1<br>有两个文件file1、file2，我 git add -A 全部放进暂存区了，但是后来我发现这两个文件我必须分开提交，所以我得先把一个unstage，就可以用到第7条或者第5条也行。<br>如果这个文件已经commit过了，那么5和7的效果是不一样的，5是把修改的部分从暂存区挪到工作区，而7是直接从暂存区删除整个文件，相当于rm，只是文件内容会保留在工作区，所以7主要是为了rm，而5是为了unstage。<br>当你提交了7的操作，那个本地仓库当前版本中就是没有这个文件的。可以用cat-file看，这个我们后面说。<br>Example 2<br>文件file1我提交了一次，之后又做了修改，后来这些修改我都不想要了，就可以用到6，恢复到和本地仓库一样的状态；<br>我又修改了file1，add了之后，又修改了，这时候执行6，就会回到add之后的状态。<br>所以6就是用于删掉工作目录的修改，这部分未被跟踪的修改是无法恢复的，所以使用时要确认自己确实不要这部分修改了，不然还是建议先commit。</p>\n<p><em>(Ps：为什么关于几个状态要说这么多呢，其实我最开始在idea中用到git，从来都没有用过git add，也不知道还有暂存区，但是随着项目做得多了，代码写得多了，你会发现，规范很重要，commit message很重要，它能告诉你，告诉别人，这个commit到底做了什么，有时候看到一个commit里面8万个文件，message只有寥寥几个字，真的很气。通过add、commit你可以记录自己开发的历程，不同的方案，很重要。)</em></p>\n<p>上述的各种状态都可以通过<font color=\"#00FFFF\"> <strong>git status</strong> </font>看到，当然配置了alias之后，我可以直接用 git s 啦。<br>多打打git status，git不仅会告诉你文件当前状态，还会告诉你你接下去可以执行的操作，非常人性化。</p>\n<p>上面提到了 git rm –cached ，如果你完全不想要这个文件了，可以省略 –cached ，直接<font color=\"#00FFFF\"> <strong>git rm</strong> </font>[file name]。<br>如果你想重命名某个文件，你可以rm再创建，或者<font color=\"#00FFFF\"> <strong>git mv</strong> </font>[old name] [new name]。</p>\n<h3 id=\"4-5-git-clone\"><a href=\"#4-5-git-clone\" class=\"headerlink\" title=\"4.5. git clone\"></a>4.5. git clone</h3><p>好像有点跑偏，赶紧拉回来，继续说指令<br>用<font color=\"#00FFFF\"> <strong>git clone</strong> </font>可以把远程项目拉到本地，比如下面是我的项目在github上的url，用git clone就可以拉到本地。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/yyycc/ever.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-6-git-push\"><a href=\"#4-6-git-push\" class=\"headerlink\" title=\"4.6. git push\"></a>4.6. git push</h3><p>git remote<br>git fetch<br>git pull<br>git push<br>git merge<br>git mergetool<br>git tag<br>git checkout<br>git branch<br>git log<br>git diff<br>git cat-file<br>git stash<br>git commit –amend<br>git reset -i HEAD~</p>\n<p>如何</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Z-参考\"><a href=\"#Z-参考\" class=\"headerlink\" title=\"Z. 参考\"></a>Z. 参考</h2><p><a href=\"https://www.cnblogs.com/qdhxhz/p/9757390.html\" target=\"_blank\" rel=\"noopener\">1.【Git】(1)—工作区、暂存区、版本库、远程仓库</a><br><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">2. Git官网</a></p>"},{"title":"Hello World","date":"2019-10-16T06:24:53.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n其实我一直不是很清楚我写这个blog的目的是什么\n我想记录一些我用过，但之后怕忘的东西\n我想分享技术，分享心得\n就是想写blog\n。。。\n我也不知道写blog能够我带来什么\n。。。\n也许只要我坚持写下去\n终有一天我会知道的\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2019-10-16 14:24:53\ntags:\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n其实我一直不是很清楚我写这个blog的目的是什么\n我想记录一些我用过，但之后怕忘的东西\n我想分享技术，分享心得\n就是想写blog\n。。。\n我也不知道写blog能够我带来什么\n。。。\n也许只要我坚持写下去\n终有一天我会知道的\n","slug":"hello-world","published":1,"updated":"2019-10-16T06:24:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpuy000940s6c7ieh1dt","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure></div>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></div>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></div>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></div>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p>其实我一直不是很清楚我写这个blog的目的是什么<br>我想记录一些我用过，但之后怕忘的东西<br>我想分享技术，分享心得<br>就是想写blog<br>。。。<br>我也不知道写blog能够我带来什么<br>。。。<br>也许只要我坚持写下去<br>终有一天我会知道的</p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p>其实我一直不是很清楚我写这个blog的目的是什么<br>我想记录一些我用过，但之后怕忘的东西<br>我想分享技术，分享心得<br>就是想写blog<br>。。。<br>我也不知道写blog能够我带来什么<br>。。。<br>也许只要我坚持写下去<br>终有一天我会知道的</p>"},{"title":"如何让img居中显示","date":"2020-03-18T10:52:46.000Z","_content":"今天画blog的时候遇见了一个小问题，记录一下。。。 \n<!--more-->\n## 1. 问题\n<img>标签如何在父<div>中居中显示\n\n## 2. 解决办法一\n\n``` bash \n<div style=\"text-align: center;\">\n <p styl=\"text-align:center\"><img/></p>\n</div>\n```\n这就轻松解决了呀。。。还要啥plan B呀。\n\n## 3. 解决办法二\n利用p标签\n``` bash \n<div>\n <p styl=\"text-align:center\"><img/></p>\n</div>\n```\n这种方法真的很有意思\n\n## 4. 解决办法三\nflex布局\n``` bash \n<div style=\"display: flex;justify-content: center\">\n <img/>\n</div>\n```\n或者\n``` bash \n<div style=\"display: flex;flex-direction: column;align-items: center\">\n <img/>\n</div>\n```\n\n","source":"_posts/img.md","raw":"---\ntitle: 如何让img居中显示\ndate: 2020-03-18 18:52:46\ntags: css\n---\n今天画blog的时候遇见了一个小问题，记录一下。。。 \n<!--more-->\n## 1. 问题\n<img>标签如何在父<div>中居中显示\n\n## 2. 解决办法一\n\n``` bash \n<div style=\"text-align: center;\">\n <p styl=\"text-align:center\"><img/></p>\n</div>\n```\n这就轻松解决了呀。。。还要啥plan B呀。\n\n## 3. 解决办法二\n利用p标签\n``` bash \n<div>\n <p styl=\"text-align:center\"><img/></p>\n</div>\n```\n这种方法真的很有意思\n\n## 4. 解决办法三\nflex布局\n``` bash \n<div style=\"display: flex;justify-content: center\">\n <img/>\n</div>\n```\n或者\n``` bash \n<div style=\"display: flex;flex-direction: column;align-items: center\">\n <img/>\n</div>\n```\n\n","slug":"img","published":1,"updated":"2020-03-18T10:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpuz000a40s68qbw7xw2","content":"<p>今天画blog的时候遇见了一个小问题，记录一下。。。 </p>\n<a id=\"more\"></a>\n<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1. 问题\"></a>1. 问题</h2><p><img>标签如何在父<div>中居中显示</div></p>\n<h2 id=\"2-解决办法一\"><a href=\"#2-解决办法一\" class=\"headerlink\" title=\"2. 解决办法一\"></a>2. 解决办法一</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=<span class=\"string\">\"text-align: center;\"</span>&gt;</span><br><span class=\"line\"> &lt;p styl=<span class=\"string\">\"text-align:center\"</span>&gt;&lt;img/&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div>\n<p>这就轻松解决了呀。。。还要啥plan B呀。</p>\n<h2 id=\"3-解决办法二\"><a href=\"#3-解决办法二\" class=\"headerlink\" title=\"3. 解决办法二\"></a>3. 解决办法二</h2><p>利用p标签</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"> &lt;p styl=<span class=\"string\">\"text-align:center\"</span>&gt;&lt;img/&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div>\n<p>这种方法真的很有意思</p>\n<h2 id=\"4-解决办法三\"><a href=\"#4-解决办法三\" class=\"headerlink\" title=\"4. 解决办法三\"></a>4. 解决办法三</h2><p>flex布局</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=<span class=\"string\">\"display: flex;justify-content: center\"</span>&gt;</span><br><span class=\"line\"> &lt;img/&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div>\n<p>或者</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=<span class=\"string\">\"display: flex;flex-direction: column;align-items: center\"</span>&gt;</span><br><span class=\"line\"> &lt;img/&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div>\n\n","site":{"data":{}},"excerpt":"<p>今天画blog的时候遇见了一个小问题，记录一下。。。 </p>","more":"<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1. 问题\"></a>1. 问题</h2><p><img>标签如何在父<div>中居中显示</div></p>\n<h2 id=\"2-解决办法一\"><a href=\"#2-解决办法一\" class=\"headerlink\" title=\"2. 解决办法一\"></a>2. 解决办法一</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=<span class=\"string\">\"text-align: center;\"</span>&gt;</span><br><span class=\"line\"> &lt;p styl=<span class=\"string\">\"text-align:center\"</span>&gt;&lt;img/&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>这就轻松解决了呀。。。还要啥plan B呀。</p>\n<h2 id=\"3-解决办法二\"><a href=\"#3-解决办法二\" class=\"headerlink\" title=\"3. 解决办法二\"></a>3. 解决办法二</h2><p>利用p标签</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"> &lt;p styl=<span class=\"string\">\"text-align:center\"</span>&gt;&lt;img/&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>这种方法真的很有意思</p>\n<h2 id=\"4-解决办法三\"><a href=\"#4-解决办法三\" class=\"headerlink\" title=\"4. 解决办法三\"></a>4. 解决办法三</h2><p>flex布局</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=<span class=\"string\">\"display: flex;justify-content: center\"</span>&gt;</span><br><span class=\"line\"> &lt;img/&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=<span class=\"string\">\"display: flex;flex-direction: column;align-items: center\"</span>&gt;</span><br><span class=\"line\"> &lt;img/&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>"},{"title":"linux 指令 -- 常用指令","date":"2020-01-13T07:27:19.000Z","_content":"记录一下linux中常用的指令\n<!--more-->\n\n## 1. netstat\n查看端口占用情况\n<font color=#FF0000> netstat -anp|grep 4000 </font>\n\n## 2. find\n在 当前目录下，查找所有内容包含‘abc’的文件\n<font color=#FF0000> find . -type f | xargs grep -l 'abc' </font>\n\n在当前目录下，查找所有文件名以my开头的文件\n<font color=#FF0000> find . -name \"my*\" </font>\n\n在当前文件夹下所有文件中(*)找包含'指定的内容'的文件输出文件名\n<font color=#FF0000> grep -rnRi 指定的内容 * | awk -F\":\" '{print $1}' </font>\n\n## 3. env\n看环境变量\n\n## 4. whereis\n搜索程序名\n\n## 5. which\n搜索系统命令\n\n## 6. lsnrctl\noracle中设置监听器指令 +[status]/[start]/[stop]\n\n## 7. tar\n打成tar包\n<font color=#FF0000> tar -cvf cyy.tar cyy </font>\n解压tar包\n<font color=#FF0000> tar -xvf cyy.tar  </font>\n\n如果要操作.tar.gz的压缩包，就多加一个z指令\n\n## 8. >\n将指令的输出放进文件\ngit config --list > config\n当前目录就会出现config文件，里面是git配置内容\n\n## 9. echo\n输出cyy\necho cyy\n输出黄底 红色的 ever\n<font color=#FF0000> echo -e \"\\033[43;31mever\\033[0m\"  </font>\n\n\n## z. 参考\n[1. Linux xargs 命令](https://www.runoob.com/linux/linux-comm-xargs.html)\n","source":"_posts/linux-指令-常用指令.md","raw":"---\ntitle: linux 指令 -- 常用指令\ndate: 2020-01-13 15:27:19\ntags: linux\n---\n记录一下linux中常用的指令\n<!--more-->\n\n## 1. netstat\n查看端口占用情况\n<font color=#FF0000> netstat -anp|grep 4000 </font>\n\n## 2. find\n在 当前目录下，查找所有内容包含‘abc’的文件\n<font color=#FF0000> find . -type f | xargs grep -l 'abc' </font>\n\n在当前目录下，查找所有文件名以my开头的文件\n<font color=#FF0000> find . -name \"my*\" </font>\n\n在当前文件夹下所有文件中(*)找包含'指定的内容'的文件输出文件名\n<font color=#FF0000> grep -rnRi 指定的内容 * | awk -F\":\" '{print $1}' </font>\n\n## 3. env\n看环境变量\n\n## 4. whereis\n搜索程序名\n\n## 5. which\n搜索系统命令\n\n## 6. lsnrctl\noracle中设置监听器指令 +[status]/[start]/[stop]\n\n## 7. tar\n打成tar包\n<font color=#FF0000> tar -cvf cyy.tar cyy </font>\n解压tar包\n<font color=#FF0000> tar -xvf cyy.tar  </font>\n\n如果要操作.tar.gz的压缩包，就多加一个z指令\n\n## 8. >\n将指令的输出放进文件\ngit config --list > config\n当前目录就会出现config文件，里面是git配置内容\n\n## 9. echo\n输出cyy\necho cyy\n输出黄底 红色的 ever\n<font color=#FF0000> echo -e \"\\033[43;31mever\\033[0m\"  </font>\n\n\n## z. 参考\n[1. Linux xargs 命令](https://www.runoob.com/linux/linux-comm-xargs.html)\n","slug":"linux-指令-常用指令","published":1,"updated":"2020-01-13T07:27:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpv2000c40s676s740dz","content":"<p>记录一下linux中常用的指令</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-netstat\"><a href=\"#1-netstat\" class=\"headerlink\" title=\"1. netstat\"></a>1. netstat</h2><p>查看端口占用情况<br><font color=\"#FF0000\"> netstat -anp|grep 4000 </font></p>\n<h2 id=\"2-find\"><a href=\"#2-find\" class=\"headerlink\" title=\"2. find\"></a>2. find</h2><p>在 当前目录下，查找所有内容包含‘abc’的文件<br><font color=\"#FF0000\"> find . -type f | xargs grep -l ‘abc’ </font></p>\n<p>在当前目录下，查找所有文件名以my开头的文件<br><font color=\"#FF0000\"> find . -name “my*” </font></p>\n<p>在当前文件夹下所有文件中(*)找包含’指定的内容’的文件输出文件名<br><font color=\"#FF0000\"> grep -rnRi 指定的内容 * | awk -F”:” ‘{print $1}’ </font></p>\n<h2 id=\"3-env\"><a href=\"#3-env\" class=\"headerlink\" title=\"3. env\"></a>3. env</h2><p>看环境变量</p>\n<h2 id=\"4-whereis\"><a href=\"#4-whereis\" class=\"headerlink\" title=\"4. whereis\"></a>4. whereis</h2><p>搜索程序名</p>\n<h2 id=\"5-which\"><a href=\"#5-which\" class=\"headerlink\" title=\"5. which\"></a>5. which</h2><p>搜索系统命令</p>\n<h2 id=\"6-lsnrctl\"><a href=\"#6-lsnrctl\" class=\"headerlink\" title=\"6. lsnrctl\"></a>6. lsnrctl</h2><p>oracle中设置监听器指令 +[status]/[start]/[stop]</p>\n<h2 id=\"7-tar\"><a href=\"#7-tar\" class=\"headerlink\" title=\"7. tar\"></a>7. tar</h2><p>打成tar包<br><font color=\"#FF0000\"> tar -cvf cyy.tar cyy </font><br>解压tar包<br><font color=\"#FF0000\"> tar -xvf cyy.tar  </font></p>\n<p>如果要操作.tar.gz的压缩包，就多加一个z指令</p>\n<h2 id=\"8-gt\"><a href=\"#8-gt\" class=\"headerlink\" title=\"8. &gt;\"></a>8. &gt;</h2><p>将指令的输出放进文件<br>git config –list &gt; config<br>当前目录就会出现config文件，里面是git配置内容</p>\n<h2 id=\"9-echo\"><a href=\"#9-echo\" class=\"headerlink\" title=\"9. echo\"></a>9. echo</h2><p>输出cyy<br>echo cyy<br>输出黄底 红色的 ever<br><font color=\"#FF0000\"> echo -e “\\033[43;31mever\\033[0m”  </font></p>\n<h2 id=\"z-参考\"><a href=\"#z-参考\" class=\"headerlink\" title=\"z. 参考\"></a>z. 参考</h2><p><a href=\"https://www.runoob.com/linux/linux-comm-xargs.html\" target=\"_blank\" rel=\"noopener\">1. Linux xargs 命令</a></p>\n","site":{"data":{}},"excerpt":"<p>记录一下linux中常用的指令</p>","more":"<h2 id=\"1-netstat\"><a href=\"#1-netstat\" class=\"headerlink\" title=\"1. netstat\"></a>1. netstat</h2><p>查看端口占用情况<br><font color=\"#FF0000\"> netstat -anp|grep 4000 </font></p>\n<h2 id=\"2-find\"><a href=\"#2-find\" class=\"headerlink\" title=\"2. find\"></a>2. find</h2><p>在 当前目录下，查找所有内容包含‘abc’的文件<br><font color=\"#FF0000\"> find . -type f | xargs grep -l ‘abc’ </font></p>\n<p>在当前目录下，查找所有文件名以my开头的文件<br><font color=\"#FF0000\"> find . -name “my*” </font></p>\n<p>在当前文件夹下所有文件中(*)找包含’指定的内容’的文件输出文件名<br><font color=\"#FF0000\"> grep -rnRi 指定的内容 * | awk -F”:” ‘{print $1}’ </font></p>\n<h2 id=\"3-env\"><a href=\"#3-env\" class=\"headerlink\" title=\"3. env\"></a>3. env</h2><p>看环境变量</p>\n<h2 id=\"4-whereis\"><a href=\"#4-whereis\" class=\"headerlink\" title=\"4. whereis\"></a>4. whereis</h2><p>搜索程序名</p>\n<h2 id=\"5-which\"><a href=\"#5-which\" class=\"headerlink\" title=\"5. which\"></a>5. which</h2><p>搜索系统命令</p>\n<h2 id=\"6-lsnrctl\"><a href=\"#6-lsnrctl\" class=\"headerlink\" title=\"6. lsnrctl\"></a>6. lsnrctl</h2><p>oracle中设置监听器指令 +[status]/[start]/[stop]</p>\n<h2 id=\"7-tar\"><a href=\"#7-tar\" class=\"headerlink\" title=\"7. tar\"></a>7. tar</h2><p>打成tar包<br><font color=\"#FF0000\"> tar -cvf cyy.tar cyy </font><br>解压tar包<br><font color=\"#FF0000\"> tar -xvf cyy.tar  </font></p>\n<p>如果要操作.tar.gz的压缩包，就多加一个z指令</p>\n<h2 id=\"8-gt\"><a href=\"#8-gt\" class=\"headerlink\" title=\"8. &gt;\"></a>8. &gt;</h2><p>将指令的输出放进文件<br>git config –list &gt; config<br>当前目录就会出现config文件，里面是git配置内容</p>\n<h2 id=\"9-echo\"><a href=\"#9-echo\" class=\"headerlink\" title=\"9. echo\"></a>9. echo</h2><p>输出cyy<br>echo cyy<br>输出黄底 红色的 ever<br><font color=\"#FF0000\"> echo -e “\\033[43;31mever\\033[0m”  </font></p>\n<h2 id=\"z-参考\"><a href=\"#z-参考\" class=\"headerlink\" title=\"z. 参考\"></a>z. 参考</h2><p><a href=\"https://www.runoob.com/linux/linux-comm-xargs.html\" target=\"_blank\" rel=\"noopener\">1. Linux xargs 命令</a></p>"},{"title":"linux 指令 -- 常用指令扩展(vi、cp、tail)","date":"2020-01-07T02:26:36.000Z","_content":"\nlinux指令万万千，用一个百度一个，百度一个忘一个。。。\n<!--more-->\n介绍一下平时最常用到的几个指令～～\n\n## 1. vi 文书编辑器\n在我本地，编辑器一般用sublime，图形化界面好操作，但是服务器上一般用不了。\n最近项目上访问服务器都要用云桌面，Xshell又回到了我的身边。\n\n指令|功能\n--|:--:\nvi + [file_name]|进入编辑器\ni|进入编辑状态\nesc|退出编辑状态\n:q!|不保存退出\n:wq|保存退出\n**上面的都是废话**|**凑凑字数什么的**\n<font color=#FF0000> **跳转** </font>|\nG|跳到最后一行\ngg|跳到第一行\n$|跳到行尾\n0 / ^|跳到行首\nngg|跳到第n行\n<font color=#FF0000> **删除** </font>|\ndd|删除光标所在行\nndd|删除包括光标所在行以下n行\nd + $|删除光标所在处到行尾的所有数据\nd + 0|删除光标所在处到行首的所有数据\n<font color=#FF0000> **行号** </font>|\n:set number/nu|显示行号\n:set nonumber/nonu|不显示行号\n<font color=#FF0000> **查找** </font>|\n/ + [key] + 回车|查找key\nn|查看下一个匹配\nshift + n|查看上一个匹配\n<font color=#FF0000> **more** </font>|\nu|复原前一个动作\n.|重复前一个动作\n\n(加班到10点。。。再写一个指令慰劳一下辛苦的自己)\n## 2. cp 复制\n这个指令也是非常常用的了呀。\n为了直观，我在本地建了两个文件夹作为测试案例 \n~/lasting/cp-test-1 (ONE)  \n~/lasting/cp-test-2 (TWO)\n\n指令|功能\n--|:--:\n**基础的指令**|**复制文件**\ncp ~/lasting/cp-test-1/a ~/lasting/cp-test-2(/another_name)|把ONE下的a复制到TWO下，括号里是给定复制出来的文件的名字，默认值是源文件文件名\n<font color=#FF0000> **参数** </font>|\n-i|覆盖已经存在的目标文件时，给出提示(我本地不加参数时默认是不给提示的)\n-f|覆盖已经存在的目标文件而不给出提示\n-r|若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件\n**-r**|**复制文件夹**\ncp -r ~/lasting/cp-test-1 ~/lasting/cp-test-2(/)|将ONE复制到TWO下\ncp -r ~/lasting/cp-test-1/ ~/lasting/cp-test-2(/)|将ONE下的所有复制到TWO下\n**相关指令**|**scp/docker cp**\nscp local_file remote_username@remote_ip:remote_file\n<font color=#FF0000> **主要就是加上了 远程服务器/容器名 再加上 冒号** </font>|\nscp ~/lasting/cp-test-1/a  root:/usr/local|root是配置了的远程linux服务器\ndocker cp ~/lasting/cp-test-1/a  oracle:/usr/local|oracle是docker容器名字\n\n## 3. tail\n这个指令通常用于在启动tomcat的时候看日志\ntail -f ./logs/catalina.out \n\n指令|功能\n--|:--:\ntail -f file|当某些行添加至文件时，会继续显示这些行\ntail -c 10 file|显示file内容，最后10个字符\ntail +10 file|显示file内容，从第十行至末尾\ntail -n -10 file|显示file内容，从第十行至末尾\n","source":"_posts/linux-指令.md","raw":"---\ntitle: linux 指令 -- 常用指令扩展(vi、cp、tail)\ndate: 2020-01-07 10:26:36\ntags: linux\n---\n\nlinux指令万万千，用一个百度一个，百度一个忘一个。。。\n<!--more-->\n介绍一下平时最常用到的几个指令～～\n\n## 1. vi 文书编辑器\n在我本地，编辑器一般用sublime，图形化界面好操作，但是服务器上一般用不了。\n最近项目上访问服务器都要用云桌面，Xshell又回到了我的身边。\n\n指令|功能\n--|:--:\nvi + [file_name]|进入编辑器\ni|进入编辑状态\nesc|退出编辑状态\n:q!|不保存退出\n:wq|保存退出\n**上面的都是废话**|**凑凑字数什么的**\n<font color=#FF0000> **跳转** </font>|\nG|跳到最后一行\ngg|跳到第一行\n$|跳到行尾\n0 / ^|跳到行首\nngg|跳到第n行\n<font color=#FF0000> **删除** </font>|\ndd|删除光标所在行\nndd|删除包括光标所在行以下n行\nd + $|删除光标所在处到行尾的所有数据\nd + 0|删除光标所在处到行首的所有数据\n<font color=#FF0000> **行号** </font>|\n:set number/nu|显示行号\n:set nonumber/nonu|不显示行号\n<font color=#FF0000> **查找** </font>|\n/ + [key] + 回车|查找key\nn|查看下一个匹配\nshift + n|查看上一个匹配\n<font color=#FF0000> **more** </font>|\nu|复原前一个动作\n.|重复前一个动作\n\n(加班到10点。。。再写一个指令慰劳一下辛苦的自己)\n## 2. cp 复制\n这个指令也是非常常用的了呀。\n为了直观，我在本地建了两个文件夹作为测试案例 \n~/lasting/cp-test-1 (ONE)  \n~/lasting/cp-test-2 (TWO)\n\n指令|功能\n--|:--:\n**基础的指令**|**复制文件**\ncp ~/lasting/cp-test-1/a ~/lasting/cp-test-2(/another_name)|把ONE下的a复制到TWO下，括号里是给定复制出来的文件的名字，默认值是源文件文件名\n<font color=#FF0000> **参数** </font>|\n-i|覆盖已经存在的目标文件时，给出提示(我本地不加参数时默认是不给提示的)\n-f|覆盖已经存在的目标文件而不给出提示\n-r|若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件\n**-r**|**复制文件夹**\ncp -r ~/lasting/cp-test-1 ~/lasting/cp-test-2(/)|将ONE复制到TWO下\ncp -r ~/lasting/cp-test-1/ ~/lasting/cp-test-2(/)|将ONE下的所有复制到TWO下\n**相关指令**|**scp/docker cp**\nscp local_file remote_username@remote_ip:remote_file\n<font color=#FF0000> **主要就是加上了 远程服务器/容器名 再加上 冒号** </font>|\nscp ~/lasting/cp-test-1/a  root:/usr/local|root是配置了的远程linux服务器\ndocker cp ~/lasting/cp-test-1/a  oracle:/usr/local|oracle是docker容器名字\n\n## 3. tail\n这个指令通常用于在启动tomcat的时候看日志\ntail -f ./logs/catalina.out \n\n指令|功能\n--|:--:\ntail -f file|当某些行添加至文件时，会继续显示这些行\ntail -c 10 file|显示file内容，最后10个字符\ntail +10 file|显示file内容，从第十行至末尾\ntail -n -10 file|显示file内容，从第十行至末尾\n","slug":"linux-指令","published":1,"updated":"2020-01-07T02:26:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpv3000e40s6681ng5qg","content":"<p>linux指令万万千，用一个百度一个，百度一个忘一个。。。</p>\n<a id=\"more\"></a>\n<p>介绍一下平时最常用到的几个指令～～</p>\n<h2 id=\"1-vi-文书编辑器\"><a href=\"#1-vi-文书编辑器\" class=\"headerlink\" title=\"1. vi 文书编辑器\"></a>1. vi 文书编辑器</h2><p>在我本地，编辑器一般用sublime，图形化界面好操作，但是服务器上一般用不了。<br>最近项目上访问服务器都要用云桌面，Xshell又回到了我的身边。</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vi + [file_name]</td>\n<td align=\"center\">进入编辑器</td>\n</tr>\n<tr>\n<td>i</td>\n<td align=\"center\">进入编辑状态</td>\n</tr>\n<tr>\n<td>esc</td>\n<td align=\"center\">退出编辑状态</td>\n</tr>\n<tr>\n<td>:q!</td>\n<td align=\"center\">不保存退出</td>\n</tr>\n<tr>\n<td>:wq</td>\n<td align=\"center\">保存退出</td>\n</tr>\n<tr>\n<td><strong>上面的都是废话</strong></td>\n<td align=\"center\"><strong>凑凑字数什么的</strong></td>\n</tr>\n<tr>\n<td><font color=\"#FF0000\"> <strong>跳转</strong> </font></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>G</td>\n<td align=\"center\">跳到最后一行</td>\n</tr>\n<tr>\n<td>gg</td>\n<td align=\"center\">跳到第一行</td>\n</tr>\n<tr>\n<td>$</td>\n<td align=\"center\">跳到行尾</td>\n</tr>\n<tr>\n<td>0 / ^</td>\n<td align=\"center\">跳到行首</td>\n</tr>\n<tr>\n<td>ngg</td>\n<td align=\"center\">跳到第n行</td>\n</tr>\n<tr>\n<td><font color=\"#FF0000\"> <strong>删除</strong> </font></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>dd</td>\n<td align=\"center\">删除光标所在行</td>\n</tr>\n<tr>\n<td>ndd</td>\n<td align=\"center\">删除包括光标所在行以下n行</td>\n</tr>\n<tr>\n<td>d + $</td>\n<td align=\"center\">删除光标所在处到行尾的所有数据</td>\n</tr>\n<tr>\n<td>d + 0</td>\n<td align=\"center\">删除光标所在处到行首的所有数据</td>\n</tr>\n<tr>\n<td><font color=\"#FF0000\"> <strong>行号</strong> </font></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>:set number/nu</td>\n<td align=\"center\">显示行号</td>\n</tr>\n<tr>\n<td>:set nonumber/nonu</td>\n<td align=\"center\">不显示行号</td>\n</tr>\n<tr>\n<td><font color=\"#FF0000\"> <strong>查找</strong> </font></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>/ + [key] + 回车</td>\n<td align=\"center\">查找key</td>\n</tr>\n<tr>\n<td>n</td>\n<td align=\"center\">查看下一个匹配</td>\n</tr>\n<tr>\n<td>shift + n</td>\n<td align=\"center\">查看上一个匹配</td>\n</tr>\n<tr>\n<td><font color=\"#FF0000\"> <strong>more</strong> </font></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>u</td>\n<td align=\"center\">复原前一个动作</td>\n</tr>\n<tr>\n<td>.</td>\n<td align=\"center\">重复前一个动作</td>\n</tr>\n</tbody></table>\n<p>(加班到10点。。。再写一个指令慰劳一下辛苦的自己)</p>\n<h2 id=\"2-cp-复制\"><a href=\"#2-cp-复制\" class=\"headerlink\" title=\"2. cp 复制\"></a>2. cp 复制</h2><p>这个指令也是非常常用的了呀。<br>为了直观，我在本地建了两个文件夹作为测试案例<br>~/lasting/cp-test-1 (ONE)<br>~/lasting/cp-test-2 (TWO)</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>基础的指令</strong></td>\n<td align=\"center\"><strong>复制文件</strong></td>\n</tr>\n<tr>\n<td>cp ~/lasting/cp-test-1/a ~/lasting/cp-test-2(/another_name)</td>\n<td align=\"center\">把ONE下的a复制到TWO下，括号里是给定复制出来的文件的名字，默认值是源文件文件名</td>\n</tr>\n<tr>\n<td><font color=\"#FF0000\"> <strong>参数</strong> </font></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>-i</td>\n<td align=\"center\">覆盖已经存在的目标文件时，给出提示(我本地不加参数时默认是不给提示的)</td>\n</tr>\n<tr>\n<td>-f</td>\n<td align=\"center\">覆盖已经存在的目标文件而不给出提示</td>\n</tr>\n<tr>\n<td>-r</td>\n<td align=\"center\">若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件</td>\n</tr>\n<tr>\n<td><strong>-r</strong></td>\n<td align=\"center\"><strong>复制文件夹</strong></td>\n</tr>\n<tr>\n<td>cp -r ~/lasting/cp-test-1 ~/lasting/cp-test-2(/)</td>\n<td align=\"center\">将ONE复制到TWO下</td>\n</tr>\n<tr>\n<td>cp -r ~/lasting/cp-test-1/ ~/lasting/cp-test-2(/)</td>\n<td align=\"center\">将ONE下的所有复制到TWO下</td>\n</tr>\n<tr>\n<td><strong>相关指令</strong></td>\n<td align=\"center\"><strong>scp/docker cp</strong></td>\n</tr>\n<tr>\n<td>scp local_file remote_username@remote_ip:remote_file</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td><font color=\"#FF0000\"> <strong>主要就是加上了 远程服务器/容器名 再加上 冒号</strong> </font></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>scp ~/lasting/cp-test-1/a  root:/usr/local</td>\n<td align=\"center\">root是配置了的远程linux服务器</td>\n</tr>\n<tr>\n<td>docker cp ~/lasting/cp-test-1/a  oracle:/usr/local</td>\n<td align=\"center\">oracle是docker容器名字</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-tail\"><a href=\"#3-tail\" class=\"headerlink\" title=\"3. tail\"></a>3. tail</h2><p>这个指令通常用于在启动tomcat的时候看日志<br>tail -f ./logs/catalina.out </p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>tail -f file</td>\n<td align=\"center\">当某些行添加至文件时，会继续显示这些行</td>\n</tr>\n<tr>\n<td>tail -c 10 file</td>\n<td align=\"center\">显示file内容，最后10个字符</td>\n</tr>\n<tr>\n<td>tail +10 file</td>\n<td align=\"center\">显示file内容，从第十行至末尾</td>\n</tr>\n<tr>\n<td>tail -n -10 file</td>\n<td align=\"center\">显示file内容，从第十行至末尾</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<p>linux指令万万千，用一个百度一个，百度一个忘一个。。。</p>","more":"<p>介绍一下平时最常用到的几个指令～～</p>\n<h2 id=\"1-vi-文书编辑器\"><a href=\"#1-vi-文书编辑器\" class=\"headerlink\" title=\"1. vi 文书编辑器\"></a>1. vi 文书编辑器</h2><p>在我本地，编辑器一般用sublime，图形化界面好操作，但是服务器上一般用不了。<br>最近项目上访问服务器都要用云桌面，Xshell又回到了我的身边。</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vi + [file_name]</td>\n<td align=\"center\">进入编辑器</td>\n</tr>\n<tr>\n<td>i</td>\n<td align=\"center\">进入编辑状态</td>\n</tr>\n<tr>\n<td>esc</td>\n<td align=\"center\">退出编辑状态</td>\n</tr>\n<tr>\n<td>:q!</td>\n<td align=\"center\">不保存退出</td>\n</tr>\n<tr>\n<td>:wq</td>\n<td align=\"center\">保存退出</td>\n</tr>\n<tr>\n<td><strong>上面的都是废话</strong></td>\n<td align=\"center\"><strong>凑凑字数什么的</strong></td>\n</tr>\n<tr>\n<td><font color=\"#FF0000\"> <strong>跳转</strong> </font></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>G</td>\n<td align=\"center\">跳到最后一行</td>\n</tr>\n<tr>\n<td>gg</td>\n<td align=\"center\">跳到第一行</td>\n</tr>\n<tr>\n<td>$</td>\n<td align=\"center\">跳到行尾</td>\n</tr>\n<tr>\n<td>0 / ^</td>\n<td align=\"center\">跳到行首</td>\n</tr>\n<tr>\n<td>ngg</td>\n<td align=\"center\">跳到第n行</td>\n</tr>\n<tr>\n<td><font color=\"#FF0000\"> <strong>删除</strong> </font></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>dd</td>\n<td align=\"center\">删除光标所在行</td>\n</tr>\n<tr>\n<td>ndd</td>\n<td align=\"center\">删除包括光标所在行以下n行</td>\n</tr>\n<tr>\n<td>d + $</td>\n<td align=\"center\">删除光标所在处到行尾的所有数据</td>\n</tr>\n<tr>\n<td>d + 0</td>\n<td align=\"center\">删除光标所在处到行首的所有数据</td>\n</tr>\n<tr>\n<td><font color=\"#FF0000\"> <strong>行号</strong> </font></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>:set number/nu</td>\n<td align=\"center\">显示行号</td>\n</tr>\n<tr>\n<td>:set nonumber/nonu</td>\n<td align=\"center\">不显示行号</td>\n</tr>\n<tr>\n<td><font color=\"#FF0000\"> <strong>查找</strong> </font></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>/ + [key] + 回车</td>\n<td align=\"center\">查找key</td>\n</tr>\n<tr>\n<td>n</td>\n<td align=\"center\">查看下一个匹配</td>\n</tr>\n<tr>\n<td>shift + n</td>\n<td align=\"center\">查看上一个匹配</td>\n</tr>\n<tr>\n<td><font color=\"#FF0000\"> <strong>more</strong> </font></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>u</td>\n<td align=\"center\">复原前一个动作</td>\n</tr>\n<tr>\n<td>.</td>\n<td align=\"center\">重复前一个动作</td>\n</tr>\n</tbody></table>\n<p>(加班到10点。。。再写一个指令慰劳一下辛苦的自己)</p>\n<h2 id=\"2-cp-复制\"><a href=\"#2-cp-复制\" class=\"headerlink\" title=\"2. cp 复制\"></a>2. cp 复制</h2><p>这个指令也是非常常用的了呀。<br>为了直观，我在本地建了两个文件夹作为测试案例<br>~/lasting/cp-test-1 (ONE)<br>~/lasting/cp-test-2 (TWO)</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>基础的指令</strong></td>\n<td align=\"center\"><strong>复制文件</strong></td>\n</tr>\n<tr>\n<td>cp ~/lasting/cp-test-1/a ~/lasting/cp-test-2(/another_name)</td>\n<td align=\"center\">把ONE下的a复制到TWO下，括号里是给定复制出来的文件的名字，默认值是源文件文件名</td>\n</tr>\n<tr>\n<td><font color=\"#FF0000\"> <strong>参数</strong> </font></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>-i</td>\n<td align=\"center\">覆盖已经存在的目标文件时，给出提示(我本地不加参数时默认是不给提示的)</td>\n</tr>\n<tr>\n<td>-f</td>\n<td align=\"center\">覆盖已经存在的目标文件而不给出提示</td>\n</tr>\n<tr>\n<td>-r</td>\n<td align=\"center\">若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件</td>\n</tr>\n<tr>\n<td><strong>-r</strong></td>\n<td align=\"center\"><strong>复制文件夹</strong></td>\n</tr>\n<tr>\n<td>cp -r ~/lasting/cp-test-1 ~/lasting/cp-test-2(/)</td>\n<td align=\"center\">将ONE复制到TWO下</td>\n</tr>\n<tr>\n<td>cp -r ~/lasting/cp-test-1/ ~/lasting/cp-test-2(/)</td>\n<td align=\"center\">将ONE下的所有复制到TWO下</td>\n</tr>\n<tr>\n<td><strong>相关指令</strong></td>\n<td align=\"center\"><strong>scp/docker cp</strong></td>\n</tr>\n<tr>\n<td>scp local_file remote_username@remote_ip:remote_file</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td><font color=\"#FF0000\"> <strong>主要就是加上了 远程服务器/容器名 再加上 冒号</strong> </font></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>scp ~/lasting/cp-test-1/a  root:/usr/local</td>\n<td align=\"center\">root是配置了的远程linux服务器</td>\n</tr>\n<tr>\n<td>docker cp ~/lasting/cp-test-1/a  oracle:/usr/local</td>\n<td align=\"center\">oracle是docker容器名字</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-tail\"><a href=\"#3-tail\" class=\"headerlink\" title=\"3. tail\"></a>3. tail</h2><p>这个指令通常用于在启动tomcat的时候看日志<br>tail -f ./logs/catalina.out </p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>tail -f file</td>\n<td align=\"center\">当某些行添加至文件时，会继续显示这些行</td>\n</tr>\n<tr>\n<td>tail -c 10 file</td>\n<td align=\"center\">显示file内容，最后10个字符</td>\n</tr>\n<tr>\n<td>tail +10 file</td>\n<td align=\"center\">显示file内容，从第十行至末尾</td>\n</tr>\n<tr>\n<td>tail -n -10 file</td>\n<td align=\"center\">显示file内容，从第十行至末尾</td>\n</tr>\n</tbody></table>"},{"title":"javaScript —————— 变量、函数的声明提升","date":"2020-03-09T01:23:16.000Z","_content":"搜console控制台如何换行的时候(shift + enter),看到这样一张图，乍一看就很懵〇。。。\n<!--more-->\n![图1. function](function.png)\n\n第二个undefined是function的返回值，就不提了。\n\n我的第一反应是1。。。\n因为。。。乍一看真的。。。\n要不是验证过结果，还实验了一通，我真的理所当然地以为是1。。。\n\n### 1. 运行结果\n首先，运行结束后a的值是多少：\n我的第一反应是5。。。居然是5，哎，傻*\n显然是1，因为函数中是var a = 5而不是a = 5\n外部定义的a是全局变量，也就是定义在window对象中\n而函数内部定义的是局部变量\n所以运行完var a = 5，函数内部作用域里面其实存在两个a\n一个a = 5，另一个window.a = 1\n而函数运行完后，所有局部变量都会被回收，只剩下了window.a = 1\n\n### 2. 提升\n那么为什么console.log(a)是undefined，换言之，为什么进入函数后a是undefined了呢\n这就涉及另一个知识，叫做提升\nb = 2;\nvar b;\nconsole.log(b)\n运行这么一段你会发现输出是2\n为什么呢\nvar b;不会覆盖b = 2的声明么，答案是不会的\n在js中函数声明和变量声明都会被提升到头部\n也就是你可以先用，再声明(虽然这样做不好，请不要这样做，重复，请不要这样做)\n所以其实当你进入函数b的时候，首先运行的是\nvar a;\n这个时候a的值是undefined，因为上面我们说了，函数中的a跟外面的a其实不是同一个，只不过名字一样而已\n函数中var a;是重新定义了一个变量\n所以此时运行console.log(a),打印的值即undefined。\n\n\n\n\n","source":"_posts/javaScript-1.md","raw":"---\ntitle: javaScript —————— 变量、函数的声明提升\ndate: 2020-03-09 09:23:16\ntags: javaScript\n---\n搜console控制台如何换行的时候(shift + enter),看到这样一张图，乍一看就很懵〇。。。\n<!--more-->\n![图1. function](function.png)\n\n第二个undefined是function的返回值，就不提了。\n\n我的第一反应是1。。。\n因为。。。乍一看真的。。。\n要不是验证过结果，还实验了一通，我真的理所当然地以为是1。。。\n\n### 1. 运行结果\n首先，运行结束后a的值是多少：\n我的第一反应是5。。。居然是5，哎，傻*\n显然是1，因为函数中是var a = 5而不是a = 5\n外部定义的a是全局变量，也就是定义在window对象中\n而函数内部定义的是局部变量\n所以运行完var a = 5，函数内部作用域里面其实存在两个a\n一个a = 5，另一个window.a = 1\n而函数运行完后，所有局部变量都会被回收，只剩下了window.a = 1\n\n### 2. 提升\n那么为什么console.log(a)是undefined，换言之，为什么进入函数后a是undefined了呢\n这就涉及另一个知识，叫做提升\nb = 2;\nvar b;\nconsole.log(b)\n运行这么一段你会发现输出是2\n为什么呢\nvar b;不会覆盖b = 2的声明么，答案是不会的\n在js中函数声明和变量声明都会被提升到头部\n也就是你可以先用，再声明(虽然这样做不好，请不要这样做，重复，请不要这样做)\n所以其实当你进入函数b的时候，首先运行的是\nvar a;\n这个时候a的值是undefined，因为上面我们说了，函数中的a跟外面的a其实不是同一个，只不过名字一样而已\n函数中var a;是重新定义了一个变量\n所以此时运行console.log(a),打印的值即undefined。\n\n\n\n\n","slug":"javaScript-1","published":1,"updated":"2020-03-09T01:23:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpv5000h40s61l9e7xsq","content":"<p>搜console控制台如何换行的时候(shift + enter),看到这样一张图，乍一看就很懵〇。。。</p>\n<a id=\"more\"></a>\n<p><img src=\"/2020/03/09/javaScript-1/function.png\" alt=\"图1. function\"></p>\n<p>第二个undefined是function的返回值，就不提了。</p>\n<p>我的第一反应是1。。。<br>因为。。。乍一看真的。。。<br>要不是验证过结果，还实验了一通，我真的理所当然地以为是1。。。</p>\n<h3 id=\"1-运行结果\"><a href=\"#1-运行结果\" class=\"headerlink\" title=\"1. 运行结果\"></a>1. 运行结果</h3><p>首先，运行结束后a的值是多少：<br>我的第一反应是5。。。居然是5，哎，傻*<br>显然是1，因为函数中是var a = 5而不是a = 5<br>外部定义的a是全局变量，也就是定义在window对象中<br>而函数内部定义的是局部变量<br>所以运行完var a = 5，函数内部作用域里面其实存在两个a<br>一个a = 5，另一个window.a = 1<br>而函数运行完后，所有局部变量都会被回收，只剩下了window.a = 1</p>\n<h3 id=\"2-提升\"><a href=\"#2-提升\" class=\"headerlink\" title=\"2. 提升\"></a>2. 提升</h3><p>那么为什么console.log(a)是undefined，换言之，为什么进入函数后a是undefined了呢<br>这就涉及另一个知识，叫做提升<br>b = 2;<br>var b;<br>console.log(b)<br>运行这么一段你会发现输出是2<br>为什么呢<br>var b;不会覆盖b = 2的声明么，答案是不会的<br>在js中函数声明和变量声明都会被提升到头部<br>也就是你可以先用，再声明(虽然这样做不好，请不要这样做，重复，请不要这样做)<br>所以其实当你进入函数b的时候，首先运行的是<br>var a;<br>这个时候a的值是undefined，因为上面我们说了，函数中的a跟外面的a其实不是同一个，只不过名字一样而已<br>函数中var a;是重新定义了一个变量<br>所以此时运行console.log(a),打印的值即undefined。</p>\n","site":{"data":{}},"excerpt":"<p>搜console控制台如何换行的时候(shift + enter),看到这样一张图，乍一看就很懵〇。。。</p>","more":"<p><img src=\"/2020/03/09/javaScript-1/function.png\" alt=\"图1. function\"></p>\n<p>第二个undefined是function的返回值，就不提了。</p>\n<p>我的第一反应是1。。。<br>因为。。。乍一看真的。。。<br>要不是验证过结果，还实验了一通，我真的理所当然地以为是1。。。</p>\n<h3 id=\"1-运行结果\"><a href=\"#1-运行结果\" class=\"headerlink\" title=\"1. 运行结果\"></a>1. 运行结果</h3><p>首先，运行结束后a的值是多少：<br>我的第一反应是5。。。居然是5，哎，傻*<br>显然是1，因为函数中是var a = 5而不是a = 5<br>外部定义的a是全局变量，也就是定义在window对象中<br>而函数内部定义的是局部变量<br>所以运行完var a = 5，函数内部作用域里面其实存在两个a<br>一个a = 5，另一个window.a = 1<br>而函数运行完后，所有局部变量都会被回收，只剩下了window.a = 1</p>\n<h3 id=\"2-提升\"><a href=\"#2-提升\" class=\"headerlink\" title=\"2. 提升\"></a>2. 提升</h3><p>那么为什么console.log(a)是undefined，换言之，为什么进入函数后a是undefined了呢<br>这就涉及另一个知识，叫做提升<br>b = 2;<br>var b;<br>console.log(b)<br>运行这么一段你会发现输出是2<br>为什么呢<br>var b;不会覆盖b = 2的声明么，答案是不会的<br>在js中函数声明和变量声明都会被提升到头部<br>也就是你可以先用，再声明(虽然这样做不好，请不要这样做，重复，请不要这样做)<br>所以其实当你进入函数b的时候，首先运行的是<br>var a;<br>这个时候a的值是undefined，因为上面我们说了，函数中的a跟外面的a其实不是同一个，只不过名字一样而已<br>函数中var a;是重新定义了一个变量<br>所以此时运行console.log(a),打印的值即undefined。</p>"},{"title":"mysql安装","date":"2019-10-22T08:00:30.000Z","_content":"好久都没用mysql了，赶紧肥来看看\n<!--more-->\n\n## centos 7的服务器下安装mysql\n下载mysql源安装包\n``` bash\n$ wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\n```\n安装mysql源\n``` bash\n$ yum localinstall mysql57-community-release-el7-8.noarch.rpm \n```\n安装mysql\n``` bash\n$ yum install mysql-community-server\n```\n启动MySQL服务并设置开机启动\n``` bash\n$ systemctl start mysqld\n$ systemctl enable mysqld\n$ systemctl daemon-reload\n```\n到此已经安装好啦可以通过 mysql -u -p 访问，输入密码就行啦\n``` bash\n$ mysql -u root -p\n```\n当然刚安装好，我门不知道初始密码是啥，可以通过下面的命令查看\n``` bash\n$ grep 'temporary password' /var/log/mysqld.log\n```\n登录后先改root密码，初始化的密码要求规则比较复杂，可以先更改一下\n``` bash\n$ set global validate_password_policy=0;\n```\n修改密码\n``` bash\n$ ALTER USER 'root'@'localhost' IDENTIFIED BY '050511';\nor\n$ set password for 'root'@'localhost'=password('ever050511'); \n```\n@'localhost'的用户是只支持本地访问的，我们添加一个支持远程访问的用户\n``` bash\n$ GRANT ALL PRIVILEGES ON *.* TO 'ever'@'%' IDENTIFIED BY 'ever050511' WITH GRANT OPTION;\n```\n创建一个数据库试一哈\n``` bash\n$ CREATE DATABASE IF NOT EXISTS last DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\n```\n远程连接\n``` bash\n$ mysql -u ever -h **.**.***.* -p\n```\n如果访问不了，那就是端口没开放，mysql默认端口是3306\n``` bash\n$ firewall-cmd --query-port=3306/tcp                //  查看端口是否开放\n$ firewall-cmd --add-port=3306/tcp --permanent      //  开放端口\n$ firewall-cmd --reload                             //  重载入添加的端口\n$ firewall-cmd --permanent --remove-port=3306/tcp   //  移除指定端口\n```\n\n","source":"_posts/mysql.md","raw":"---\ntitle: mysql安装\ndate: 2019-10-22 16:00:30\ntags: 数据库\n---\n好久都没用mysql了，赶紧肥来看看\n<!--more-->\n\n## centos 7的服务器下安装mysql\n下载mysql源安装包\n``` bash\n$ wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\n```\n安装mysql源\n``` bash\n$ yum localinstall mysql57-community-release-el7-8.noarch.rpm \n```\n安装mysql\n``` bash\n$ yum install mysql-community-server\n```\n启动MySQL服务并设置开机启动\n``` bash\n$ systemctl start mysqld\n$ systemctl enable mysqld\n$ systemctl daemon-reload\n```\n到此已经安装好啦可以通过 mysql -u -p 访问，输入密码就行啦\n``` bash\n$ mysql -u root -p\n```\n当然刚安装好，我门不知道初始密码是啥，可以通过下面的命令查看\n``` bash\n$ grep 'temporary password' /var/log/mysqld.log\n```\n登录后先改root密码，初始化的密码要求规则比较复杂，可以先更改一下\n``` bash\n$ set global validate_password_policy=0;\n```\n修改密码\n``` bash\n$ ALTER USER 'root'@'localhost' IDENTIFIED BY '050511';\nor\n$ set password for 'root'@'localhost'=password('ever050511'); \n```\n@'localhost'的用户是只支持本地访问的，我们添加一个支持远程访问的用户\n``` bash\n$ GRANT ALL PRIVILEGES ON *.* TO 'ever'@'%' IDENTIFIED BY 'ever050511' WITH GRANT OPTION;\n```\n创建一个数据库试一哈\n``` bash\n$ CREATE DATABASE IF NOT EXISTS last DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\n```\n远程连接\n``` bash\n$ mysql -u ever -h **.**.***.* -p\n```\n如果访问不了，那就是端口没开放，mysql默认端口是3306\n``` bash\n$ firewall-cmd --query-port=3306/tcp                //  查看端口是否开放\n$ firewall-cmd --add-port=3306/tcp --permanent      //  开放端口\n$ firewall-cmd --reload                             //  重载入添加的端口\n$ firewall-cmd --permanent --remove-port=3306/tcp   //  移除指定端口\n```\n\n","slug":"mysql","published":1,"updated":"2019-10-22T08:00:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpv7000j40s6fq3r7prj","content":"<p>好久都没用mysql了，赶紧肥来看看</p>\n<a id=\"more\"></a>\n\n<h2 id=\"centos-7的服务器下安装mysql\"><a href=\"#centos-7的服务器下安装mysql\" class=\"headerlink\" title=\"centos 7的服务器下安装mysql\"></a>centos 7的服务器下安装mysql</h2><p>下载mysql源安装包</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure></div>\n<p>安装mysql源</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum localinstall mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure></div>\n<p>安装mysql</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install mysql-community-server</span><br></pre></td></tr></table></figure></div>\n<p>启动MySQL服务并设置开机启动</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start mysqld</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> mysqld</span><br><span class=\"line\">$ systemctl daemon-reload</span><br></pre></td></tr></table></figure></div>\n<p>到此已经安装好啦可以通过 mysql -u -p 访问，输入密码就行啦</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -p</span><br></pre></td></tr></table></figure></div>\n<p>当然刚安装好，我门不知道初始密码是啥，可以通过下面的命令查看</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grep <span class=\"string\">'temporary password'</span> /var/<span class=\"built_in\">log</span>/mysqld.log</span><br></pre></td></tr></table></figure></div>\n<p>登录后先改root密码，初始化的密码要求规则比较复杂，可以先更改一下</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">set</span> global validate_password_policy=0;</span><br></pre></td></tr></table></figure></div>\n<p>修改密码</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED BY <span class=\"string\">'050511'</span>;</span><br><span class=\"line\">or</span><br><span class=\"line\">$ <span class=\"built_in\">set</span> password <span class=\"keyword\">for</span> <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span>=password(<span class=\"string\">'ever050511'</span>);</span><br></pre></td></tr></table></figure></div>\n<p>@’localhost’的用户是只支持本地访问的，我们添加一个支持远程访问的用户</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">'ever'</span>@<span class=\"string\">'%'</span> IDENTIFIED BY <span class=\"string\">'ever050511'</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></div>\n<p>创建一个数据库试一哈</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ CREATE DATABASE IF NOT EXISTS last DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure></div>\n<p>远程连接</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u ever -h **.**.***.* -p</span><br></pre></td></tr></table></figure></div>\n<p>如果访问不了，那就是端口没开放，mysql默认端口是3306</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-cmd --query-port=3306/tcp                //  查看端口是否开放</span><br><span class=\"line\">$ firewall-cmd --add-port=3306/tcp --permanent      //  开放端口</span><br><span class=\"line\">$ firewall-cmd --reload                             //  重载入添加的端口</span><br><span class=\"line\">$ firewall-cmd --permanent --remove-port=3306/tcp   //  移除指定端口</span><br></pre></td></tr></table></figure></div>\n\n","site":{"data":{}},"excerpt":"<p>好久都没用mysql了，赶紧肥来看看</p>","more":"<h2 id=\"centos-7的服务器下安装mysql\"><a href=\"#centos-7的服务器下安装mysql\" class=\"headerlink\" title=\"centos 7的服务器下安装mysql\"></a>centos 7的服务器下安装mysql</h2><p>下载mysql源安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>安装mysql源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum localinstall mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>安装mysql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<p>启动MySQL服务并设置开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start mysqld</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> mysqld</span><br><span class=\"line\">$ systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<p>到此已经安装好啦可以通过 mysql -u -p 访问，输入密码就行啦</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>当然刚安装好，我门不知道初始密码是啥，可以通过下面的命令查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grep <span class=\"string\">'temporary password'</span> /var/<span class=\"built_in\">log</span>/mysqld.log</span><br></pre></td></tr></table></figure>\n<p>登录后先改root密码，初始化的密码要求规则比较复杂，可以先更改一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">set</span> global validate_password_policy=0;</span><br></pre></td></tr></table></figure>\n<p>修改密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED BY <span class=\"string\">'050511'</span>;</span><br><span class=\"line\">or</span><br><span class=\"line\">$ <span class=\"built_in\">set</span> password <span class=\"keyword\">for</span> <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span>=password(<span class=\"string\">'ever050511'</span>);</span><br></pre></td></tr></table></figure>\n<p>@’localhost’的用户是只支持本地访问的，我们添加一个支持远程访问的用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">'ever'</span>@<span class=\"string\">'%'</span> IDENTIFIED BY <span class=\"string\">'ever050511'</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n<p>创建一个数据库试一哈</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ CREATE DATABASE IF NOT EXISTS last DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>\n<p>远程连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u ever -h **.**.***.* -p</span><br></pre></td></tr></table></figure>\n<p>如果访问不了，那就是端口没开放，mysql默认端口是3306</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-cmd --query-port=3306/tcp                //  查看端口是否开放</span><br><span class=\"line\">$ firewall-cmd --add-port=3306/tcp --permanent      //  开放端口</span><br><span class=\"line\">$ firewall-cmd --reload                             //  重载入添加的端口</span><br><span class=\"line\">$ firewall-cmd --permanent --remove-port=3306/tcp   //  移除指定端口</span><br></pre></td></tr></table></figure>"},{"title":"nginx","date":"2019-10-17T03:32:50.000Z","_content":"那些年我用nginx做过的事\n<!--more-->\n## 一、搭建nginx\n搭建nginx的方法很多，都很easy。。。\n\n### 1. mac\n我的机子是mac的，我本地装了homebrew，所以我本地的nginx使用homebrew安装的\n``` bash\n$ brew install nginx\n```\n安装好就可以启动啦(~~status~~)\n``` bash\n$ brew services start|restart|stop|status nginx\n```\n用 http://localhost:8080 就可以访问\nnginx -t 检查配置文件语法，他会返回给你配置文件的目录结构的\n``` bash\nnginx: the configuration file /usr/local/etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /usr/local/etc/nginx/nginx.conf test is successful\n```\n\n### 2. centos\ncentos 7的服务器上搭建nginx\n``` bash\n$ yum install -y nginx\n```\n\n### 3. RedHat 6(离线安装nginx)\n本来也想用yum的，奈何这个服务器不通外网。。。我q\n所以我就把安装包下载到我本地，然后sftp到服务器上\nnginx的安装包不止nginx，他还有很多依赖模块，包括pcre、zlib、openssl \n```\nnginx-1.14.2.tar.gz    \nopenssl-1.1.1a.tar.gz  \npcre-8.42.tar.gz       \nzlib-1.2.11.tar.gz\n```\n这些都下下来，解压，进入文件目录\n``` bash\n$ ./configure  //有的是需要带参数，这里不详了\n$ make\n$ install\n```\n/usr/local/nginx/sbin/nginx -t 检查配置文件语法\n/usr/local/nginx/sbin/nginx    启动nginx\n这个跟用yum安装是一样的\n可以配置成系统服务启动 \n``` bash\nservice nginx start\n```\n\n## 二、nginx部署前端项目\n安装完了，就来说使用吧，nginx搭建非常的容易，用他来实现各种代理，主要就是写配置文件nginx.conf\n我的blog就是部署在nginx上的，之前搭的vue项目，也部署在nginx上，这样我们就不需要在控制台运行项目啦。\n配置文件主要是这么一个结构\n这个配置问题，一定记得加分号，每次都是因为忘记;然后就报错。。。\n``` list\n#user  nobody;\nworker_processes  1;\n\n# error_log  logs/error.log;\n# error_log  logs/error.log  notice;\n# error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n    server {\n        listen       8092;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  cyy.html ;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n        location ~ \\.php$ {\n            root           html;\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n    }\n    include servers/*;\n}\n``` \nlisten是监听的端口，配多个server就可以监听多个端口，server_name是服务名，可以随意取。\n我本地的nginx是监听了8091端口，部署了blog，8092端口会显示cyy.html。配置分别如下\n``` bash\nlocation / {\n            alias html/public/;\n            index index.html;\n        }\n``` \n``` bash\nlocation / {\n            root   html;\n            index  cyy.html ;\n        }\n``` \nalias和root后面都是目录，我blog的index.html，就在nginx(/usr/local/Cellar/nginx/1.15.8/html)html/public目录下,\ncyy.html是我自己新建的就在html下，这个文件夹里面一开始就会生成50x.html、index.html，刚安装好访问的时候就是访问这个index.html。\n\n之前还在服务器上用nginx部署过vue服务\n## 三、转发\n之前项目上有一个任务，是调接口的时候要做一个转发，因为生产服务器在内网，访问不了外网，要调用的服务在外网。\n需要从生产先发请求到中间区域，从中间区域接受请求转发到外网服务。\n``` bash\nlocation / {\n            if ($request_uri ~* \"/cyy\") {\n                proxy_pass http://ip:8070;\n                break;\n            }\n        }\n``` \n根据请求路径内容匹配，如果匹配成功，就转发到外网ip，请求路径和参数都不变。\n","source":"_posts/nginx.md","raw":"---\ntitle: nginx\ndate: 2019-10-17 11:32:50\ntags: 服务\n---\n那些年我用nginx做过的事\n<!--more-->\n## 一、搭建nginx\n搭建nginx的方法很多，都很easy。。。\n\n### 1. mac\n我的机子是mac的，我本地装了homebrew，所以我本地的nginx使用homebrew安装的\n``` bash\n$ brew install nginx\n```\n安装好就可以启动啦(~~status~~)\n``` bash\n$ brew services start|restart|stop|status nginx\n```\n用 http://localhost:8080 就可以访问\nnginx -t 检查配置文件语法，他会返回给你配置文件的目录结构的\n``` bash\nnginx: the configuration file /usr/local/etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /usr/local/etc/nginx/nginx.conf test is successful\n```\n\n### 2. centos\ncentos 7的服务器上搭建nginx\n``` bash\n$ yum install -y nginx\n```\n\n### 3. RedHat 6(离线安装nginx)\n本来也想用yum的，奈何这个服务器不通外网。。。我q\n所以我就把安装包下载到我本地，然后sftp到服务器上\nnginx的安装包不止nginx，他还有很多依赖模块，包括pcre、zlib、openssl \n```\nnginx-1.14.2.tar.gz    \nopenssl-1.1.1a.tar.gz  \npcre-8.42.tar.gz       \nzlib-1.2.11.tar.gz\n```\n这些都下下来，解压，进入文件目录\n``` bash\n$ ./configure  //有的是需要带参数，这里不详了\n$ make\n$ install\n```\n/usr/local/nginx/sbin/nginx -t 检查配置文件语法\n/usr/local/nginx/sbin/nginx    启动nginx\n这个跟用yum安装是一样的\n可以配置成系统服务启动 \n``` bash\nservice nginx start\n```\n\n## 二、nginx部署前端项目\n安装完了，就来说使用吧，nginx搭建非常的容易，用他来实现各种代理，主要就是写配置文件nginx.conf\n我的blog就是部署在nginx上的，之前搭的vue项目，也部署在nginx上，这样我们就不需要在控制台运行项目啦。\n配置文件主要是这么一个结构\n这个配置问题，一定记得加分号，每次都是因为忘记;然后就报错。。。\n``` list\n#user  nobody;\nworker_processes  1;\n\n# error_log  logs/error.log;\n# error_log  logs/error.log  notice;\n# error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n    server {\n        listen       8092;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  cyy.html ;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n        location ~ \\.php$ {\n            root           html;\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n    }\n    include servers/*;\n}\n``` \nlisten是监听的端口，配多个server就可以监听多个端口，server_name是服务名，可以随意取。\n我本地的nginx是监听了8091端口，部署了blog，8092端口会显示cyy.html。配置分别如下\n``` bash\nlocation / {\n            alias html/public/;\n            index index.html;\n        }\n``` \n``` bash\nlocation / {\n            root   html;\n            index  cyy.html ;\n        }\n``` \nalias和root后面都是目录，我blog的index.html，就在nginx(/usr/local/Cellar/nginx/1.15.8/html)html/public目录下,\ncyy.html是我自己新建的就在html下，这个文件夹里面一开始就会生成50x.html、index.html，刚安装好访问的时候就是访问这个index.html。\n\n之前还在服务器上用nginx部署过vue服务\n## 三、转发\n之前项目上有一个任务，是调接口的时候要做一个转发，因为生产服务器在内网，访问不了外网，要调用的服务在外网。\n需要从生产先发请求到中间区域，从中间区域接受请求转发到外网服务。\n``` bash\nlocation / {\n            if ($request_uri ~* \"/cyy\") {\n                proxy_pass http://ip:8070;\n                break;\n            }\n        }\n``` \n根据请求路径内容匹配，如果匹配成功，就转发到外网ip，请求路径和参数都不变。\n","slug":"nginx","published":1,"updated":"2019-10-17T03:32:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpv9000m40s68j7xc9gx","content":"<p>那些年我用nginx做过的事</p>\n<a id=\"more\"></a>\n<h2 id=\"一、搭建nginx\"><a href=\"#一、搭建nginx\" class=\"headerlink\" title=\"一、搭建nginx\"></a>一、搭建nginx</h2><p>搭建nginx的方法很多，都很easy。。。</p>\n<h3 id=\"1-mac\"><a href=\"#1-mac\" class=\"headerlink\" title=\"1. mac\"></a>1. mac</h3><p>我的机子是mac的，我本地装了homebrew，所以我本地的nginx使用homebrew安装的</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install nginx</span><br></pre></td></tr></table></figure></div>\n<p>安装好就可以启动啦(<del>status</del>)</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew services start|restart|stop|status nginx</span><br></pre></td></tr></table></figure></div>\n<p>用 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a> 就可以访问<br>nginx -t 检查配置文件语法，他会返回给你配置文件的目录结构的</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx: the configuration file /usr/<span class=\"built_in\">local</span>/etc/nginx/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /usr/<span class=\"built_in\">local</span>/etc/nginx/nginx.conf <span class=\"built_in\">test</span> is successful</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-centos\"><a href=\"#2-centos\" class=\"headerlink\" title=\"2. centos\"></a>2. centos</h3><p>centos 7的服务器上搭建nginx</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y nginx</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"3-RedHat-6-离线安装nginx\"><a href=\"#3-RedHat-6-离线安装nginx\" class=\"headerlink\" title=\"3. RedHat 6(离线安装nginx)\"></a>3. RedHat 6(离线安装nginx)</h3><p>本来也想用yum的，奈何这个服务器不通外网。。。我q<br>所以我就把安装包下载到我本地，然后sftp到服务器上<br>nginx的安装包不止nginx，他还有很多依赖模块，包括pcre、zlib、openssl </p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx-1.14.2.tar.gz    </span><br><span class=\"line\">openssl-1.1.1a.tar.gz  </span><br><span class=\"line\">pcre-8.42.tar.gz       </span><br><span class=\"line\">zlib-1.2.11.tar.gz</span><br></pre></td></tr></table></figure></div>\n<p>这些都下下来，解压，进入文件目录</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./configure  //有的是需要带参数，这里不详了</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ install</span><br></pre></td></tr></table></figure></div>\n<p>/usr/local/nginx/sbin/nginx -t 检查配置文件语法<br>/usr/local/nginx/sbin/nginx    启动nginx<br>这个跟用yum安装是一样的<br>可以配置成系统服务启动 </p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"二、nginx部署前端项目\"><a href=\"#二、nginx部署前端项目\" class=\"headerlink\" title=\"二、nginx部署前端项目\"></a>二、nginx部署前端项目</h2><p>安装完了，就来说使用吧，nginx搭建非常的容易，用他来实现各种代理，主要就是写配置文件nginx.conf<br>我的blog就是部署在nginx上的，之前搭的vue项目，也部署在nginx上，这样我们就不需要在控制台运行项目啦。<br>配置文件主要是这么一个结构<br>这个配置问题，一定记得加分号，每次都是因为忘记;然后就报错。。。</p>\n<pre><code class=\"list\">#user  nobody;\nworker_processes  1;\n\n# error_log  logs/error.log;\n# error_log  logs/error.log  notice;\n# error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;\n    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;\n    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n    server {\n        listen       8092;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  cyy.html ;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n        location ~ \\.php$ {\n            root           html;\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n    }\n    include servers/*;\n}</code></pre>\n<p>listen是监听的端口，配多个server就可以监听多个端口，server_name是服务名，可以随意取。<br>我本地的nginx是监听了8091端口，部署了blog，8092端口会显示cyy.html。配置分别如下</p>\n<pre><code class=\"bash\">location / {\n            <span class=\"built_in\">alias</span> html/public/;\n            index index.html;\n        }</code></pre>\n<pre><code class=\"bash\">location / {\n            root   html;\n            index  cyy.html ;\n        }</code></pre>\n<p>alias和root后面都是目录，我blog的index.html，就在nginx(/usr/local/Cellar/nginx/1.15.8/html)html/public目录下,<br>cyy.html是我自己新建的就在html下，这个文件夹里面一开始就会生成50x.html、index.html，刚安装好访问的时候就是访问这个index.html。</p>\n<p>之前还在服务器上用nginx部署过vue服务</p>\n<h2 id=\"三、转发\"><a href=\"#三、转发\" class=\"headerlink\" title=\"三、转发\"></a>三、转发</h2><p>之前项目上有一个任务，是调接口的时候要做一个转发，因为生产服务器在内网，访问不了外网，要调用的服务在外网。<br>需要从生产先发请求到中间区域，从中间区域接受请求转发到外网服务。</p>\n<pre><code class=\"bash\">location / {\n            <span class=\"keyword\">if</span> (<span class=\"variable\">$request_uri</span> ~* <span class=\"string\">\"/cyy\"</span>) {\n                proxy_pass http://ip:8070;\n                <span class=\"built_in\">break</span>;\n            }\n        }</code></pre>\n<p>根据请求路径内容匹配，如果匹配成功，就转发到外网ip，请求路径和参数都不变。</p>\n","site":{"data":{}},"excerpt":"<p>那些年我用nginx做过的事</p>","more":"<h2 id=\"一、搭建nginx\"><a href=\"#一、搭建nginx\" class=\"headerlink\" title=\"一、搭建nginx\"></a>一、搭建nginx</h2><p>搭建nginx的方法很多，都很easy。。。</p>\n<h3 id=\"1-mac\"><a href=\"#1-mac\" class=\"headerlink\" title=\"1. mac\"></a>1. mac</h3><p>我的机子是mac的，我本地装了homebrew，所以我本地的nginx使用homebrew安装的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install nginx</span><br></pre></td></tr></table></figure>\n<p>安装好就可以启动啦(<del>status</del>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew services start|restart|stop|status nginx</span><br></pre></td></tr></table></figure>\n<p>用 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a> 就可以访问<br>nginx -t 检查配置文件语法，他会返回给你配置文件的目录结构的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx: the configuration file /usr/<span class=\"built_in\">local</span>/etc/nginx/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /usr/<span class=\"built_in\">local</span>/etc/nginx/nginx.conf <span class=\"built_in\">test</span> is successful</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-centos\"><a href=\"#2-centos\" class=\"headerlink\" title=\"2. centos\"></a>2. centos</h3><p>centos 7的服务器上搭建nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-RedHat-6-离线安装nginx\"><a href=\"#3-RedHat-6-离线安装nginx\" class=\"headerlink\" title=\"3. RedHat 6(离线安装nginx)\"></a>3. RedHat 6(离线安装nginx)</h3><p>本来也想用yum的，奈何这个服务器不通外网。。。我q<br>所以我就把安装包下载到我本地，然后sftp到服务器上<br>nginx的安装包不止nginx，他还有很多依赖模块，包括pcre、zlib、openssl </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx-1.14.2.tar.gz    </span><br><span class=\"line\">openssl-1.1.1a.tar.gz  </span><br><span class=\"line\">pcre-8.42.tar.gz       </span><br><span class=\"line\">zlib-1.2.11.tar.gz</span><br></pre></td></tr></table></figure>\n<p>这些都下下来，解压，进入文件目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./configure  //有的是需要带参数，这里不详了</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ install</span><br></pre></td></tr></table></figure>\n<p>/usr/local/nginx/sbin/nginx -t 检查配置文件语法<br>/usr/local/nginx/sbin/nginx    启动nginx<br>这个跟用yum安装是一样的<br>可以配置成系统服务启动 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、nginx部署前端项目\"><a href=\"#二、nginx部署前端项目\" class=\"headerlink\" title=\"二、nginx部署前端项目\"></a>二、nginx部署前端项目</h2><p>安装完了，就来说使用吧，nginx搭建非常的容易，用他来实现各种代理，主要就是写配置文件nginx.conf<br>我的blog就是部署在nginx上的，之前搭的vue项目，也部署在nginx上，这样我们就不需要在控制台运行项目啦。<br>配置文件主要是这么一个结构<br>这个配置问题，一定记得加分号，每次都是因为忘记;然后就报错。。。</p>\n<pre><code class=\"list\">#user  nobody;\nworker_processes  1;\n\n# error_log  logs/error.log;\n# error_log  logs/error.log  notice;\n# error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;\n    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;\n    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n    server {\n        listen       8092;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  cyy.html ;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n        location ~ \\.php$ {\n            root           html;\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n    }\n    include servers/*;\n}</code></pre>\n<p>listen是监听的端口，配多个server就可以监听多个端口，server_name是服务名，可以随意取。<br>我本地的nginx是监听了8091端口，部署了blog，8092端口会显示cyy.html。配置分别如下</p>\n<pre><code class=\"bash\">location / {\n            <span class=\"built_in\">alias</span> html/public/;\n            index index.html;\n        }</code></pre>\n<pre><code class=\"bash\">location / {\n            root   html;\n            index  cyy.html ;\n        }</code></pre>\n<p>alias和root后面都是目录，我blog的index.html，就在nginx(/usr/local/Cellar/nginx/1.15.8/html)html/public目录下,<br>cyy.html是我自己新建的就在html下，这个文件夹里面一开始就会生成50x.html、index.html，刚安装好访问的时候就是访问这个index.html。</p>\n<p>之前还在服务器上用nginx部署过vue服务</p>\n<h2 id=\"三、转发\"><a href=\"#三、转发\" class=\"headerlink\" title=\"三、转发\"></a>三、转发</h2><p>之前项目上有一个任务，是调接口的时候要做一个转发，因为生产服务器在内网，访问不了外网，要调用的服务在外网。<br>需要从生产先发请求到中间区域，从中间区域接受请求转发到外网服务。</p>\n<pre><code class=\"bash\">location / {\n            <span class=\"keyword\">if</span> (<span class=\"variable\">$request_uri</span> ~* <span class=\"string\">\"/cyy\"</span>) {\n                proxy_pass http://ip:8070;\n                <span class=\"built_in\">break</span>;\n            }\n        }</code></pre>\n<p>根据请求路径内容匹配，如果匹配成功，就转发到外网ip，请求路径和参数都不变。</p>"},{"title":"oracle","date":"2019-10-17T01:52:27.000Z","_content":"oracle 那些我记不住的东西\n<!--more-->\n### 1. 启动\n我的oracle是安装在docker容器里面的，所以。。。\n``` bash\n$ docker start oracle\n$ ssh root@localhost -p 49160  // 49160是docker容器映射出来的端口，用ssh连接docker\n```\n偷偷记下来密码：admin\n\n### 2. 连接数据库\n``` bash\n$ su - oracle\n```\n不以任何用户登录(nolog)，之后再输用户名、密码。或者直接sqlplus就行。\n``` bash\n$ sqlplus / nolog\n```\n不要密码的dba登录\n``` bash\n$ sqlplus / as sysdba\n```\n或者nolog之后\n``` bash\n$ conn sys as sysdba \n```\n### 3. 一些sql\n我喜欢用Navicat，no feeling for sql developer什么的，所以很多东西没有可视化\n``` bash\n$ select * from v$version;        // 查数据库版本\n$ select * from dba_directories;  // 查出数据库的DATA_PUMP_DIR\n$ select * from dba_users; \t   // 查出所有用户\n$ select default_tablespace from dba_users where username=‘登录用户’;   // 查看该用户的默认表空间\n```\n``` bash\n$ select a.tablespace_name,a.total,b.free from( select tablespace_name,sum(bytes)/1024/1024 || 'M'\ntotal from dba_data_files\ngroup by tablespace_name) a,\n( select tablespace_name,sum(bytes)/1024/1024|| 'M' free from dba_free_space\ngroup by tablespace_name) b\nwhere a.tablespace_name=b.tablespace_name;  // 查询表空间占用情况\n```\n### 4. 数据的导入导出\n``` bash\n// 导出(DATA_PUMP_DIR就是一个逻辑地址)\n$ expdp userName/pwd@ip:1521/orcl directory=DATA_PUMP_DIR dumpfile=name.DMP logfile=DATA_PUMP_DIR:name.log\n// 导入\n$ impdp userName/pwd remap_schema=source:target remap_tablespace=source:target directory=DATA_PUMP_DIR dumpfile=ZJZL_PROD_SIT20190823.DMP \n// linux系统导入的时候可能会碰到权限问题，看一下dump文件的读写操作权限，权限不够就chmod 777一哈\n```\n### 5. 创建表空间、用户\n``` bash\n// 创建表空间\n$ CREATE TABLESPACE userName DATAFILE '/u01/app/oracle/admin/XE/dpdump/userName.dbf' SIZE 500M AUTOEXTEND ON;\n\n// 创建用户\n$ create user name identified by pwd default tablespace userName;\n```\n### 6. 授权\n``` bash\n$ grant dba to userName;\n$ grant connect to userName;\n$ grant alter session to userName;\n$ grant create any context to userName;\n$ grant create procedure to userName;\n$ grant create sequence to userName;\n$ grant create session to userName;\n$ grant create synonym to userName;\n$ grant create table to userName;\n$ grant create type to userName;\n$ grant create user to userName;\n$ grant create view to userName;\n$ grant create any table to userName;\n$ grant DEBUG CONNECT SESSION to userName;\n$ grant query rewrite to userName;\n$ grant select any dictionary to userName;\n$ grant unlimited tablespace to userName;\n$ grant read,write on directory DATA_PUMP_DIR to userName;\n```\n### 7. 删除用户、表空间\n``` bash\n$ drop user username cascade;\n$ drop tablespace tablespacename including contents and datafiles;\n```\n\n### 8. 表备份\n表明 sys_user\n``` bash\n$ create table sys_user_bak/sys_user_20200114 as select * from sys_user;\n```\n\n### 9. 执行脚本文件\n将多个sql语句放到test.sql文件中\n``` bash\nbegin\n    ...\n    sql语句\n    ...\n  commit;\nend;\n/\n```\n或者以.pck结尾的包脚本 test.pck\n放到某个目录下 /test\n``` bash\n$ su - oracle\n$ cd /test\n$ sqlplus\n$ username\n$ passworf\n$ @test.sql\n$ @test.pck\n```\n如果执行报错，可以执行show error，看具体错误。\n\n### 10. 将sql执行结果导入excel\n``` bash\n$ set linesize 1000 pagesize 0 echo off termout off trimout on trimspool on feedback off heading off pause off;\n$ spool test.xls;\n$ select t1.id from test t1;\n$ spool off;\n$ exit\n```\n可以直接放进一个sql脚本中执行，当前目录下就会生成一个test.xls文件。\n\n\n\n嗯，我知道你会回来看的\n\n\n","source":"_posts/oracle.md","raw":"---\ntitle: oracle\ndate: 2019-10-17 09:52:27\ntags: 数据库\n---\noracle 那些我记不住的东西\n<!--more-->\n### 1. 启动\n我的oracle是安装在docker容器里面的，所以。。。\n``` bash\n$ docker start oracle\n$ ssh root@localhost -p 49160  // 49160是docker容器映射出来的端口，用ssh连接docker\n```\n偷偷记下来密码：admin\n\n### 2. 连接数据库\n``` bash\n$ su - oracle\n```\n不以任何用户登录(nolog)，之后再输用户名、密码。或者直接sqlplus就行。\n``` bash\n$ sqlplus / nolog\n```\n不要密码的dba登录\n``` bash\n$ sqlplus / as sysdba\n```\n或者nolog之后\n``` bash\n$ conn sys as sysdba \n```\n### 3. 一些sql\n我喜欢用Navicat，no feeling for sql developer什么的，所以很多东西没有可视化\n``` bash\n$ select * from v$version;        // 查数据库版本\n$ select * from dba_directories;  // 查出数据库的DATA_PUMP_DIR\n$ select * from dba_users; \t   // 查出所有用户\n$ select default_tablespace from dba_users where username=‘登录用户’;   // 查看该用户的默认表空间\n```\n``` bash\n$ select a.tablespace_name,a.total,b.free from( select tablespace_name,sum(bytes)/1024/1024 || 'M'\ntotal from dba_data_files\ngroup by tablespace_name) a,\n( select tablespace_name,sum(bytes)/1024/1024|| 'M' free from dba_free_space\ngroup by tablespace_name) b\nwhere a.tablespace_name=b.tablespace_name;  // 查询表空间占用情况\n```\n### 4. 数据的导入导出\n``` bash\n// 导出(DATA_PUMP_DIR就是一个逻辑地址)\n$ expdp userName/pwd@ip:1521/orcl directory=DATA_PUMP_DIR dumpfile=name.DMP logfile=DATA_PUMP_DIR:name.log\n// 导入\n$ impdp userName/pwd remap_schema=source:target remap_tablespace=source:target directory=DATA_PUMP_DIR dumpfile=ZJZL_PROD_SIT20190823.DMP \n// linux系统导入的时候可能会碰到权限问题，看一下dump文件的读写操作权限，权限不够就chmod 777一哈\n```\n### 5. 创建表空间、用户\n``` bash\n// 创建表空间\n$ CREATE TABLESPACE userName DATAFILE '/u01/app/oracle/admin/XE/dpdump/userName.dbf' SIZE 500M AUTOEXTEND ON;\n\n// 创建用户\n$ create user name identified by pwd default tablespace userName;\n```\n### 6. 授权\n``` bash\n$ grant dba to userName;\n$ grant connect to userName;\n$ grant alter session to userName;\n$ grant create any context to userName;\n$ grant create procedure to userName;\n$ grant create sequence to userName;\n$ grant create session to userName;\n$ grant create synonym to userName;\n$ grant create table to userName;\n$ grant create type to userName;\n$ grant create user to userName;\n$ grant create view to userName;\n$ grant create any table to userName;\n$ grant DEBUG CONNECT SESSION to userName;\n$ grant query rewrite to userName;\n$ grant select any dictionary to userName;\n$ grant unlimited tablespace to userName;\n$ grant read,write on directory DATA_PUMP_DIR to userName;\n```\n### 7. 删除用户、表空间\n``` bash\n$ drop user username cascade;\n$ drop tablespace tablespacename including contents and datafiles;\n```\n\n### 8. 表备份\n表明 sys_user\n``` bash\n$ create table sys_user_bak/sys_user_20200114 as select * from sys_user;\n```\n\n### 9. 执行脚本文件\n将多个sql语句放到test.sql文件中\n``` bash\nbegin\n    ...\n    sql语句\n    ...\n  commit;\nend;\n/\n```\n或者以.pck结尾的包脚本 test.pck\n放到某个目录下 /test\n``` bash\n$ su - oracle\n$ cd /test\n$ sqlplus\n$ username\n$ passworf\n$ @test.sql\n$ @test.pck\n```\n如果执行报错，可以执行show error，看具体错误。\n\n### 10. 将sql执行结果导入excel\n``` bash\n$ set linesize 1000 pagesize 0 echo off termout off trimout on trimspool on feedback off heading off pause off;\n$ spool test.xls;\n$ select t1.id from test t1;\n$ spool off;\n$ exit\n```\n可以直接放进一个sql脚本中执行，当前目录下就会生成一个test.xls文件。\n\n\n\n嗯，我知道你会回来看的\n\n\n","slug":"oracle","published":1,"updated":"2019-10-17T01:52:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpva000o40s6277z7dlk","content":"<p>oracle 那些我记不住的东西</p>\n<a id=\"more\"></a>\n<h3 id=\"1-启动\"><a href=\"#1-启动\" class=\"headerlink\" title=\"1. 启动\"></a>1. 启动</h3><p>我的oracle是安装在docker容器里面的，所以。。。</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start oracle</span><br><span class=\"line\">$ ssh root@localhost -p 49160  // 49160是docker容器映射出来的端口，用ssh连接docker</span><br></pre></td></tr></table></figure></div>\n<p>偷偷记下来密码：admin</p>\n<h3 id=\"2-连接数据库\"><a href=\"#2-连接数据库\" class=\"headerlink\" title=\"2. 连接数据库\"></a>2. 连接数据库</h3><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su - oracle</span><br></pre></td></tr></table></figure></div>\n<p>不以任何用户登录(nolog)，之后再输用户名、密码。或者直接sqlplus就行。</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sqlplus / nolog</span><br></pre></td></tr></table></figure></div>\n<p>不要密码的dba登录</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sqlplus / as sysdba</span><br></pre></td></tr></table></figure></div>\n<p>或者nolog之后</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conn sys as sysdba</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"3-一些sql\"><a href=\"#3-一些sql\" class=\"headerlink\" title=\"3. 一些sql\"></a>3. 一些sql</h3><p>我喜欢用Navicat，no feeling for sql developer什么的，所以很多东西没有可视化</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ select * from v<span class=\"variable\">$version</span>;        // 查数据库版本</span><br><span class=\"line\">$ select * from dba_directories;  // 查出数据库的DATA_PUMP_DIR</span><br><span class=\"line\">$ select * from dba_users; \t   // 查出所有用户</span><br><span class=\"line\">$ select default_tablespace from dba_users <span class=\"built_in\">where</span> username=‘登录用户’;   // 查看该用户的默认表空间</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ select a.tablespace_name,a.total,b.free from( select tablespace_name,sum(bytes)/1024/1024 || <span class=\"string\">'M'</span></span><br><span class=\"line\">total from dba_data_files</span><br><span class=\"line\">group by tablespace_name) a,</span><br><span class=\"line\">( select tablespace_name,sum(bytes)/1024/1024|| <span class=\"string\">'M'</span> free from dba_free_space</span><br><span class=\"line\">group by tablespace_name) b</span><br><span class=\"line\"><span class=\"built_in\">where</span> a.tablespace_name=b.tablespace_name;  // 查询表空间占用情况</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"4-数据的导入导出\"><a href=\"#4-数据的导入导出\" class=\"headerlink\" title=\"4. 数据的导入导出\"></a>4. 数据的导入导出</h3><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 导出(DATA_PUMP_DIR就是一个逻辑地址)</span><br><span class=\"line\">$ expdp userName/<span class=\"built_in\">pwd</span>@ip:1521/orcl directory=DATA_PUMP_DIR dumpfile=name.DMP logfile=DATA_PUMP_DIR:name.log</span><br><span class=\"line\">// 导入</span><br><span class=\"line\">$ impdp userName/<span class=\"built_in\">pwd</span> remap_schema=<span class=\"built_in\">source</span>:target remap_tablespace=<span class=\"built_in\">source</span>:target directory=DATA_PUMP_DIR dumpfile=ZJZL_PROD_SIT20190823.DMP </span><br><span class=\"line\">// linux系统导入的时候可能会碰到权限问题，看一下dump文件的读写操作权限，权限不够就chmod 777一哈</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"5-创建表空间、用户\"><a href=\"#5-创建表空间、用户\" class=\"headerlink\" title=\"5. 创建表空间、用户\"></a>5. 创建表空间、用户</h3><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表空间</span><br><span class=\"line\">$ CREATE TABLESPACE userName DATAFILE <span class=\"string\">'/u01/app/oracle/admin/XE/dpdump/userName.dbf'</span> SIZE 500M AUTOEXTEND ON;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建用户</span><br><span class=\"line\">$ create user name identified by <span class=\"built_in\">pwd</span> default tablespace userName;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"6-授权\"><a href=\"#6-授权\" class=\"headerlink\" title=\"6. 授权\"></a>6. 授权</h3><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grant dba to userName;</span><br><span class=\"line\">$ grant connect to userName;</span><br><span class=\"line\">$ grant alter session to userName;</span><br><span class=\"line\">$ grant create any context to userName;</span><br><span class=\"line\">$ grant create procedure to userName;</span><br><span class=\"line\">$ grant create sequence to userName;</span><br><span class=\"line\">$ grant create session to userName;</span><br><span class=\"line\">$ grant create synonym to userName;</span><br><span class=\"line\">$ grant create table to userName;</span><br><span class=\"line\">$ grant create <span class=\"built_in\">type</span> to userName;</span><br><span class=\"line\">$ grant create user to userName;</span><br><span class=\"line\">$ grant create view to userName;</span><br><span class=\"line\">$ grant create any table to userName;</span><br><span class=\"line\">$ grant DEBUG CONNECT SESSION to userName;</span><br><span class=\"line\">$ grant query rewrite to userName;</span><br><span class=\"line\">$ grant select any dictionary to userName;</span><br><span class=\"line\">$ grant unlimited tablespace to userName;</span><br><span class=\"line\">$ grant <span class=\"built_in\">read</span>,write on directory DATA_PUMP_DIR to userName;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"7-删除用户、表空间\"><a href=\"#7-删除用户、表空间\" class=\"headerlink\" title=\"7. 删除用户、表空间\"></a>7. 删除用户、表空间</h3><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ drop user username cascade;</span><br><span class=\"line\">$ drop tablespace tablespacename including contents and datafiles;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"8-表备份\"><a href=\"#8-表备份\" class=\"headerlink\" title=\"8. 表备份\"></a>8. 表备份</h3><p>表明 sys_user</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ create table sys_user_bak/sys_user_20200114 as select * from sys_user;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"9-执行脚本文件\"><a href=\"#9-执行脚本文件\" class=\"headerlink\" title=\"9. 执行脚本文件\"></a>9. 执行脚本文件</h3><p>将多个sql语句放到test.sql文件中</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    sql语句</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  commit;</span><br><span class=\"line\">end;</span><br><span class=\"line\">/</span><br></pre></td></tr></table></figure></div>\n<p>或者以.pck结尾的包脚本 test.pck<br>放到某个目录下 /test</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su - oracle</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /<span class=\"built_in\">test</span></span><br><span class=\"line\">$ sqlplus</span><br><span class=\"line\">$ username</span><br><span class=\"line\">$ passworf</span><br><span class=\"line\">$ @test.sql</span><br><span class=\"line\">$ @test.pck</span><br></pre></td></tr></table></figure></div>\n<p>如果执行报错，可以执行show error，看具体错误。</p>\n<h3 id=\"10-将sql执行结果导入excel\"><a href=\"#10-将sql执行结果导入excel\" class=\"headerlink\" title=\"10. 将sql执行结果导入excel\"></a>10. 将sql执行结果导入excel</h3><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">set</span> linesize 1000 pagesize 0 <span class=\"built_in\">echo</span> off termout off trimout on trimspool on feedback off heading off pause off;</span><br><span class=\"line\">$ spool test.xls;</span><br><span class=\"line\">$ select t1.id from <span class=\"built_in\">test</span> t1;</span><br><span class=\"line\">$ spool off;</span><br><span class=\"line\">$ <span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure></div>\n<p>可以直接放进一个sql脚本中执行，当前目录下就会生成一个test.xls文件。</p>\n<p>嗯，我知道你会回来看的</p>\n","site":{"data":{}},"excerpt":"<p>oracle 那些我记不住的东西</p>","more":"<h3 id=\"1-启动\"><a href=\"#1-启动\" class=\"headerlink\" title=\"1. 启动\"></a>1. 启动</h3><p>我的oracle是安装在docker容器里面的，所以。。。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start oracle</span><br><span class=\"line\">$ ssh root@localhost -p 49160  // 49160是docker容器映射出来的端口，用ssh连接docker</span><br></pre></td></tr></table></figure>\n<p>偷偷记下来密码：admin</p>\n<h3 id=\"2-连接数据库\"><a href=\"#2-连接数据库\" class=\"headerlink\" title=\"2. 连接数据库\"></a>2. 连接数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su - oracle</span><br></pre></td></tr></table></figure>\n<p>不以任何用户登录(nolog)，之后再输用户名、密码。或者直接sqlplus就行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sqlplus / nolog</span><br></pre></td></tr></table></figure>\n<p>不要密码的dba登录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sqlplus / as sysdba</span><br></pre></td></tr></table></figure>\n<p>或者nolog之后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conn sys as sysdba</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-一些sql\"><a href=\"#3-一些sql\" class=\"headerlink\" title=\"3. 一些sql\"></a>3. 一些sql</h3><p>我喜欢用Navicat，no feeling for sql developer什么的，所以很多东西没有可视化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ select * from v<span class=\"variable\">$version</span>;        // 查数据库版本</span><br><span class=\"line\">$ select * from dba_directories;  // 查出数据库的DATA_PUMP_DIR</span><br><span class=\"line\">$ select * from dba_users; \t   // 查出所有用户</span><br><span class=\"line\">$ select default_tablespace from dba_users <span class=\"built_in\">where</span> username=‘登录用户’;   // 查看该用户的默认表空间</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ select a.tablespace_name,a.total,b.free from( select tablespace_name,sum(bytes)/1024/1024 || <span class=\"string\">'M'</span></span><br><span class=\"line\">total from dba_data_files</span><br><span class=\"line\">group by tablespace_name) a,</span><br><span class=\"line\">( select tablespace_name,sum(bytes)/1024/1024|| <span class=\"string\">'M'</span> free from dba_free_space</span><br><span class=\"line\">group by tablespace_name) b</span><br><span class=\"line\"><span class=\"built_in\">where</span> a.tablespace_name=b.tablespace_name;  // 查询表空间占用情况</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-数据的导入导出\"><a href=\"#4-数据的导入导出\" class=\"headerlink\" title=\"4. 数据的导入导出\"></a>4. 数据的导入导出</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 导出(DATA_PUMP_DIR就是一个逻辑地址)</span><br><span class=\"line\">$ expdp userName/<span class=\"built_in\">pwd</span>@ip:1521/orcl directory=DATA_PUMP_DIR dumpfile=name.DMP logfile=DATA_PUMP_DIR:name.log</span><br><span class=\"line\">// 导入</span><br><span class=\"line\">$ impdp userName/<span class=\"built_in\">pwd</span> remap_schema=<span class=\"built_in\">source</span>:target remap_tablespace=<span class=\"built_in\">source</span>:target directory=DATA_PUMP_DIR dumpfile=ZJZL_PROD_SIT20190823.DMP </span><br><span class=\"line\">// linux系统导入的时候可能会碰到权限问题，看一下dump文件的读写操作权限，权限不够就chmod 777一哈</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-创建表空间、用户\"><a href=\"#5-创建表空间、用户\" class=\"headerlink\" title=\"5. 创建表空间、用户\"></a>5. 创建表空间、用户</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表空间</span><br><span class=\"line\">$ CREATE TABLESPACE userName DATAFILE <span class=\"string\">'/u01/app/oracle/admin/XE/dpdump/userName.dbf'</span> SIZE 500M AUTOEXTEND ON;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建用户</span><br><span class=\"line\">$ create user name identified by <span class=\"built_in\">pwd</span> default tablespace userName;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-授权\"><a href=\"#6-授权\" class=\"headerlink\" title=\"6. 授权\"></a>6. 授权</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grant dba to userName;</span><br><span class=\"line\">$ grant connect to userName;</span><br><span class=\"line\">$ grant alter session to userName;</span><br><span class=\"line\">$ grant create any context to userName;</span><br><span class=\"line\">$ grant create procedure to userName;</span><br><span class=\"line\">$ grant create sequence to userName;</span><br><span class=\"line\">$ grant create session to userName;</span><br><span class=\"line\">$ grant create synonym to userName;</span><br><span class=\"line\">$ grant create table to userName;</span><br><span class=\"line\">$ grant create <span class=\"built_in\">type</span> to userName;</span><br><span class=\"line\">$ grant create user to userName;</span><br><span class=\"line\">$ grant create view to userName;</span><br><span class=\"line\">$ grant create any table to userName;</span><br><span class=\"line\">$ grant DEBUG CONNECT SESSION to userName;</span><br><span class=\"line\">$ grant query rewrite to userName;</span><br><span class=\"line\">$ grant select any dictionary to userName;</span><br><span class=\"line\">$ grant unlimited tablespace to userName;</span><br><span class=\"line\">$ grant <span class=\"built_in\">read</span>,write on directory DATA_PUMP_DIR to userName;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-删除用户、表空间\"><a href=\"#7-删除用户、表空间\" class=\"headerlink\" title=\"7. 删除用户、表空间\"></a>7. 删除用户、表空间</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ drop user username cascade;</span><br><span class=\"line\">$ drop tablespace tablespacename including contents and datafiles;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-表备份\"><a href=\"#8-表备份\" class=\"headerlink\" title=\"8. 表备份\"></a>8. 表备份</h3><p>表明 sys_user</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ create table sys_user_bak/sys_user_20200114 as select * from sys_user;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-执行脚本文件\"><a href=\"#9-执行脚本文件\" class=\"headerlink\" title=\"9. 执行脚本文件\"></a>9. 执行脚本文件</h3><p>将多个sql语句放到test.sql文件中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    sql语句</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  commit;</span><br><span class=\"line\">end;</span><br><span class=\"line\">/</span><br></pre></td></tr></table></figure>\n<p>或者以.pck结尾的包脚本 test.pck<br>放到某个目录下 /test</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su - oracle</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /<span class=\"built_in\">test</span></span><br><span class=\"line\">$ sqlplus</span><br><span class=\"line\">$ username</span><br><span class=\"line\">$ passworf</span><br><span class=\"line\">$ @test.sql</span><br><span class=\"line\">$ @test.pck</span><br></pre></td></tr></table></figure>\n<p>如果执行报错，可以执行show error，看具体错误。</p>\n<h3 id=\"10-将sql执行结果导入excel\"><a href=\"#10-将sql执行结果导入excel\" class=\"headerlink\" title=\"10. 将sql执行结果导入excel\"></a>10. 将sql执行结果导入excel</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">set</span> linesize 1000 pagesize 0 <span class=\"built_in\">echo</span> off termout off trimout on trimspool on feedback off heading off pause off;</span><br><span class=\"line\">$ spool test.xls;</span><br><span class=\"line\">$ select t1.id from <span class=\"built_in\">test</span> t1;</span><br><span class=\"line\">$ spool off;</span><br><span class=\"line\">$ <span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n<p>可以直接放进一个sql脚本中执行，当前目录下就会生成一个test.xls文件。</p>\n<p>嗯，我知道你会回来看的</p>"},{"title":"react","date":"2019-12-31T08:13:43.000Z","_content":"\n2019年的最后一天。\n好久没写博客了，真的是从善如流，从恶如崩。\n今年最大的收获应该是学习了react吧，虽然才入了个门，不记录一下，可能过完年就忘光了。。。\n<!--more-->\n\n## 1. 环境\nrekit脚手架搭建的react。\nnode.js     v12.13.1\nnpm         6.12.1\n\nwebpack\nredux\nrouter\nantd\naxios\njson-server\n\n## 2. 目录结构\n根目录：/rekit-app\n\n### 2.1. package.json\npackage.json\n\n<font color=#DC143C> **npm init** </font>就可以生成这个文件，下面就是我初始化的一个package.json。\n他是一个json对象，记录了项目的一些基本信息等等\n```\n{\n  \"name\": \"cyy\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n下面具体介绍一下，rekit项目的package.json文件,几个主要部分：dependencies，scripts，devDependencies等\n![图1. package.json](package.png)\n\n#### 2.1.1. dependencies\n如下，是我项目的依赖，模块名+版本范围\ndependencies是项目运行依赖的模块，devDependencies是项目开发依赖的模块。\n也就是devDependencies并不会被打进生产的包里。\n安装依赖包的时候 --save就会写入dependencies中，--save-dev就会写入devDependencies中\n```\n\"dependencies\": {\n    \"antd\": \"^3.26.0\",\n    \"autoprefixer\": \"7.1.6\",\n    \"axios\": \"^0.18.0\",\n    \"babel-core\": \"6.26.0\",\n    \"babel-eslint\": \"7.2.3\",\n    \"babel-jest\": \"20.0.3\",\n    \"babel-loader\": \"7.1.2\",\n    ...\n  },\n\"devDependencies\": {\n    \"babel-plugin-import\": \"^1.13.0\"\n}\n```\n\n#### 2.1.2. scripts\nscript中定义脚本命令\n当我执行比如<font color=#DC143C> **npm run build** </font>的时候，就相当于执行了<font color=#DC143C> **node scripts/build.js** </font>\n其中start可以直接写<font color=#DC143C> **npm start** </font>\n```\n\"scripts\": {\n    \"mock\": \"json-server --watch --port 6077 data/db.json\",\n    \"start\": \"concurrently \\\"node scripts/start.js\\\" \\\"json-server --watch --port 6077 data/db.json\\\"\",\n    \"build\": \"node scripts/build.js\",\n    \"test\": \"node scripts/test.js --env=jsdom\"\n},\n```\n可以看到start后面的指令有两部分，我这边是为了在启动项目的同时，把json-server也启动，所以用到了concurrently\njson-server是一个可以在前端运行，返回json数据的服务。用来提供前端测试数据还是不错的。\n```\nnpm insatll -g concurrently\n\n然后修改package.json中script：\n\n\"server\":\"react-scripts start\",\n\"json_server\":\"json-server mock/db.json --port 3003\",\n\"start\": \"concurrently \\\"npm run json_server\\\" \\\"npm run server\\\" \",\n```\n参考：[配置package.json 使一次npm run start 执行两个指令或者多个指令](https://blog.csdn.net/div_ma/article/details/80579227)\n\n#### 2.1.3. rekit\n这里配置了启动端口，可以在start.js中获取到，项目就会在你指定的端口下启动。\n```\n\"rekit\": {\n    \"devPort\": 6075,\n    \"studioPort\": 6076,\n    \"plugins\": [],\n    \"css\": \"less\"\n  },\n```\n\n当然啦，用 rekit creat <app-name> 创建一个rekit项目，这些他都帮你配置好了，可以直接开始业务代码的编写。\n\n### 2.2. /src\n所有的文件都放在这个目录序啊\n\n### 2.2.1. index.js\n这是项目的入口文件，将资源都挂载到root节点上。\nrekit中，他加载了Root组件，这个组件接收store和routeConfig，主要就是为了加载路由\n```\nrenderApp(<Root store={store} routeConfig={routeConfig} />);\n```\n\n### 2.2.2. /common/routeConfig.js\n不同feature的子路由都集中定义在这里\n```\n// 使用json方式定义路由、使用renderRouteConfigV3解析json，转换成react声明式语法\nconst routes = [{\n  path: '/',\n  component: App,\n  childRoutes: [\n    ...childRoutes,\n    { path: '*', name: 'Page not found', component: PageNotFound },\n  ].filter(r => r.component || (r.childRoutes && r.childRoutes.length > 0)),\n}];\n```\n\n### 2.2.3. Root.js\n这里定义了index.js中加载的Root组件，他调用了Root渲染函数renderRouteConfigV3解析json，转换成react声明式语法。\n\n### 2.2.4. /images   /styles\nimages不说了，就是放图片，styles下主要有global.less以及index.less\nglobal中定义一些全局的样式，而index.less中引入global.less以及每个feature中定义的style.less\n```\n// index is the entry for all styles.\n@import './global';\n@import '../features/home/style';\n@import '../features/common/style';\n@import '../features/examples/style';\n@import '../features/blog/style';\n@import '../features/log/style';\n```\n### 2.2.5. /common\n除了上面说的routeConfig.js集中定义各个feature的路由，还有\nrootReducer.js集中定义各个feature的reducer\n\n### 2.2.6. /features\n这是最重要的啦，之前说的feature就是他，features中就是项目的各个功能。\n","source":"_posts/react.md","raw":"---\ntitle: react\ndate: 2019-12-31 16:13:43\ntags: 前端\n---\n\n2019年的最后一天。\n好久没写博客了，真的是从善如流，从恶如崩。\n今年最大的收获应该是学习了react吧，虽然才入了个门，不记录一下，可能过完年就忘光了。。。\n<!--more-->\n\n## 1. 环境\nrekit脚手架搭建的react。\nnode.js     v12.13.1\nnpm         6.12.1\n\nwebpack\nredux\nrouter\nantd\naxios\njson-server\n\n## 2. 目录结构\n根目录：/rekit-app\n\n### 2.1. package.json\npackage.json\n\n<font color=#DC143C> **npm init** </font>就可以生成这个文件，下面就是我初始化的一个package.json。\n他是一个json对象，记录了项目的一些基本信息等等\n```\n{\n  \"name\": \"cyy\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n下面具体介绍一下，rekit项目的package.json文件,几个主要部分：dependencies，scripts，devDependencies等\n![图1. package.json](package.png)\n\n#### 2.1.1. dependencies\n如下，是我项目的依赖，模块名+版本范围\ndependencies是项目运行依赖的模块，devDependencies是项目开发依赖的模块。\n也就是devDependencies并不会被打进生产的包里。\n安装依赖包的时候 --save就会写入dependencies中，--save-dev就会写入devDependencies中\n```\n\"dependencies\": {\n    \"antd\": \"^3.26.0\",\n    \"autoprefixer\": \"7.1.6\",\n    \"axios\": \"^0.18.0\",\n    \"babel-core\": \"6.26.0\",\n    \"babel-eslint\": \"7.2.3\",\n    \"babel-jest\": \"20.0.3\",\n    \"babel-loader\": \"7.1.2\",\n    ...\n  },\n\"devDependencies\": {\n    \"babel-plugin-import\": \"^1.13.0\"\n}\n```\n\n#### 2.1.2. scripts\nscript中定义脚本命令\n当我执行比如<font color=#DC143C> **npm run build** </font>的时候，就相当于执行了<font color=#DC143C> **node scripts/build.js** </font>\n其中start可以直接写<font color=#DC143C> **npm start** </font>\n```\n\"scripts\": {\n    \"mock\": \"json-server --watch --port 6077 data/db.json\",\n    \"start\": \"concurrently \\\"node scripts/start.js\\\" \\\"json-server --watch --port 6077 data/db.json\\\"\",\n    \"build\": \"node scripts/build.js\",\n    \"test\": \"node scripts/test.js --env=jsdom\"\n},\n```\n可以看到start后面的指令有两部分，我这边是为了在启动项目的同时，把json-server也启动，所以用到了concurrently\njson-server是一个可以在前端运行，返回json数据的服务。用来提供前端测试数据还是不错的。\n```\nnpm insatll -g concurrently\n\n然后修改package.json中script：\n\n\"server\":\"react-scripts start\",\n\"json_server\":\"json-server mock/db.json --port 3003\",\n\"start\": \"concurrently \\\"npm run json_server\\\" \\\"npm run server\\\" \",\n```\n参考：[配置package.json 使一次npm run start 执行两个指令或者多个指令](https://blog.csdn.net/div_ma/article/details/80579227)\n\n#### 2.1.3. rekit\n这里配置了启动端口，可以在start.js中获取到，项目就会在你指定的端口下启动。\n```\n\"rekit\": {\n    \"devPort\": 6075,\n    \"studioPort\": 6076,\n    \"plugins\": [],\n    \"css\": \"less\"\n  },\n```\n\n当然啦，用 rekit creat <app-name> 创建一个rekit项目，这些他都帮你配置好了，可以直接开始业务代码的编写。\n\n### 2.2. /src\n所有的文件都放在这个目录序啊\n\n### 2.2.1. index.js\n这是项目的入口文件，将资源都挂载到root节点上。\nrekit中，他加载了Root组件，这个组件接收store和routeConfig，主要就是为了加载路由\n```\nrenderApp(<Root store={store} routeConfig={routeConfig} />);\n```\n\n### 2.2.2. /common/routeConfig.js\n不同feature的子路由都集中定义在这里\n```\n// 使用json方式定义路由、使用renderRouteConfigV3解析json，转换成react声明式语法\nconst routes = [{\n  path: '/',\n  component: App,\n  childRoutes: [\n    ...childRoutes,\n    { path: '*', name: 'Page not found', component: PageNotFound },\n  ].filter(r => r.component || (r.childRoutes && r.childRoutes.length > 0)),\n}];\n```\n\n### 2.2.3. Root.js\n这里定义了index.js中加载的Root组件，他调用了Root渲染函数renderRouteConfigV3解析json，转换成react声明式语法。\n\n### 2.2.4. /images   /styles\nimages不说了，就是放图片，styles下主要有global.less以及index.less\nglobal中定义一些全局的样式，而index.less中引入global.less以及每个feature中定义的style.less\n```\n// index is the entry for all styles.\n@import './global';\n@import '../features/home/style';\n@import '../features/common/style';\n@import '../features/examples/style';\n@import '../features/blog/style';\n@import '../features/log/style';\n```\n### 2.2.5. /common\n除了上面说的routeConfig.js集中定义各个feature的路由，还有\nrootReducer.js集中定义各个feature的reducer\n\n### 2.2.6. /features\n这是最重要的啦，之前说的feature就是他，features中就是项目的各个功能。\n","slug":"react","published":1,"updated":"2019-12-31T08:13:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpvb000q40s6euhh2xh2","content":"<p>2019年的最后一天。<br>好久没写博客了，真的是从善如流，从恶如崩。<br>今年最大的收获应该是学习了react吧，虽然才入了个门，不记录一下，可能过完年就忘光了。。。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-环境\"><a href=\"#1-环境\" class=\"headerlink\" title=\"1. 环境\"></a>1. 环境</h2><p>rekit脚手架搭建的react。<br>node.js     v12.13.1<br>npm         6.12.1</p>\n<p>webpack<br>redux<br>router<br>antd<br>axios<br>json-server</p>\n<h2 id=\"2-目录结构\"><a href=\"#2-目录结构\" class=\"headerlink\" title=\"2. 目录结构\"></a>2. 目录结构</h2><p>根目录：/rekit-app</p>\n<h3 id=\"2-1-package-json\"><a href=\"#2-1-package-json\" class=\"headerlink\" title=\"2.1. package.json\"></a>2.1. package.json</h3><p>package.json</p>\n<p><font color=\"#DC143C\"> <strong>npm init</strong> </font>就可以生成这个文件，下面就是我初始化的一个package.json。<br>他是一个json对象，记录了项目的一些基本信息等等</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;cyy&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>下面具体介绍一下，rekit项目的package.json文件,几个主要部分：dependencies，scripts，devDependencies等<br><img src=\"/2019/12/31/react/package.png\" alt=\"图1. package.json\"></p>\n<h4 id=\"2-1-1-dependencies\"><a href=\"#2-1-1-dependencies\" class=\"headerlink\" title=\"2.1.1. dependencies\"></a>2.1.1. dependencies</h4><p>如下，是我项目的依赖，模块名+版本范围<br>dependencies是项目运行依赖的模块，devDependencies是项目开发依赖的模块。<br>也就是devDependencies并不会被打进生产的包里。<br>安装依赖包的时候 –save就会写入dependencies中，–save-dev就会写入devDependencies中</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;antd&quot;: &quot;^3.26.0&quot;,</span><br><span class=\"line\">    &quot;autoprefixer&quot;: &quot;7.1.6&quot;,</span><br><span class=\"line\">    &quot;axios&quot;: &quot;^0.18.0&quot;,</span><br><span class=\"line\">    &quot;babel-core&quot;: &quot;6.26.0&quot;,</span><br><span class=\"line\">    &quot;babel-eslint&quot;: &quot;7.2.3&quot;,</span><br><span class=\"line\">    &quot;babel-jest&quot;: &quot;20.0.3&quot;,</span><br><span class=\"line\">    &quot;babel-loader&quot;: &quot;7.1.2&quot;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;babel-plugin-import&quot;: &quot;^1.13.0&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"2-1-2-scripts\"><a href=\"#2-1-2-scripts\" class=\"headerlink\" title=\"2.1.2. scripts\"></a>2.1.2. scripts</h4><p>script中定义脚本命令<br>当我执行比如<font color=\"#DC143C\"> <strong>npm run build</strong> </font>的时候，就相当于执行了<font color=\"#DC143C\"> <strong>node scripts/build.js</strong> </font><br>其中start可以直接写<font color=\"#DC143C\"> <strong>npm start</strong> </font></p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;mock&quot;: &quot;json-server --watch --port 6077 data&#x2F;db.json&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;concurrently \\&quot;node scripts&#x2F;start.js\\&quot; \\&quot;json-server --watch --port 6077 data&#x2F;db.json\\&quot;&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;node scripts&#x2F;build.js&quot;,</span><br><span class=\"line\">    &quot;test&quot;: &quot;node scripts&#x2F;test.js --env&#x3D;jsdom&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></div>\n<p>可以看到start后面的指令有两部分，我这边是为了在启动项目的同时，把json-server也启动，所以用到了concurrently<br>json-server是一个可以在前端运行，返回json数据的服务。用来提供前端测试数据还是不错的。</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm insatll -g concurrently</span><br><span class=\"line\"></span><br><span class=\"line\">然后修改package.json中script：</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;server&quot;:&quot;react-scripts start&quot;,</span><br><span class=\"line\">&quot;json_server&quot;:&quot;json-server mock&#x2F;db.json --port 3003&quot;,</span><br><span class=\"line\">&quot;start&quot;: &quot;concurrently \\&quot;npm run json_server\\&quot; \\&quot;npm run server\\&quot; &quot;,</span><br></pre></td></tr></table></figure></div>\n<p>参考：<a href=\"https://blog.csdn.net/div_ma/article/details/80579227\" target=\"_blank\" rel=\"noopener\">配置package.json 使一次npm run start 执行两个指令或者多个指令</a></p>\n<h4 id=\"2-1-3-rekit\"><a href=\"#2-1-3-rekit\" class=\"headerlink\" title=\"2.1.3. rekit\"></a>2.1.3. rekit</h4><p>这里配置了启动端口，可以在start.js中获取到，项目就会在你指定的端口下启动。</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;rekit&quot;: &#123;</span><br><span class=\"line\">    &quot;devPort&quot;: 6075,</span><br><span class=\"line\">    &quot;studioPort&quot;: 6076,</span><br><span class=\"line\">    &quot;plugins&quot;: [],</span><br><span class=\"line\">    &quot;css&quot;: &quot;less&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></div>\n\n<p>当然啦，用 rekit creat <app-name> 创建一个rekit项目，这些他都帮你配置好了，可以直接开始业务代码的编写。</app-name></p>\n<h3 id=\"2-2-src\"><a href=\"#2-2-src\" class=\"headerlink\" title=\"2.2. /src\"></a>2.2. /src</h3><p>所有的文件都放在这个目录序啊</p>\n<h3 id=\"2-2-1-index-js\"><a href=\"#2-2-1-index-js\" class=\"headerlink\" title=\"2.2.1. index.js\"></a>2.2.1. index.js</h3><p>这是项目的入口文件，将资源都挂载到root节点上。<br>rekit中，他加载了Root组件，这个组件接收store和routeConfig，主要就是为了加载路由</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">renderApp(&lt;Root store&#x3D;&#123;store&#125; routeConfig&#x3D;&#123;routeConfig&#125; &#x2F;&gt;);</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-2-2-common-routeConfig-js\"><a href=\"#2-2-2-common-routeConfig-js\" class=\"headerlink\" title=\"2.2.2. /common/routeConfig.js\"></a>2.2.2. /common/routeConfig.js</h3><p>不同feature的子路由都集中定义在这里</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 使用json方式定义路由、使用renderRouteConfigV3解析json，转换成react声明式语法</span><br><span class=\"line\">const routes &#x3D; [&#123;</span><br><span class=\"line\">  path: &#39;&#x2F;&#39;,</span><br><span class=\"line\">  component: App,</span><br><span class=\"line\">  childRoutes: [</span><br><span class=\"line\">    ...childRoutes,</span><br><span class=\"line\">    &#123; path: &#39;*&#39;, name: &#39;Page not found&#39;, component: PageNotFound &#125;,</span><br><span class=\"line\">  ].filter(r &#x3D;&gt; r.component || (r.childRoutes &amp;&amp; r.childRoutes.length &gt; 0)),</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-2-3-Root-js\"><a href=\"#2-2-3-Root-js\" class=\"headerlink\" title=\"2.2.3. Root.js\"></a>2.2.3. Root.js</h3><p>这里定义了index.js中加载的Root组件，他调用了Root渲染函数renderRouteConfigV3解析json，转换成react声明式语法。</p>\n<h3 id=\"2-2-4-images-styles\"><a href=\"#2-2-4-images-styles\" class=\"headerlink\" title=\"2.2.4. /images   /styles\"></a>2.2.4. /images   /styles</h3><p>images不说了，就是放图片，styles下主要有global.less以及index.less<br>global中定义一些全局的样式，而index.less中引入global.less以及每个feature中定义的style.less</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; index is the entry for all styles.</span><br><span class=\"line\">@import &#39;.&#x2F;global&#39;;</span><br><span class=\"line\">@import &#39;..&#x2F;features&#x2F;home&#x2F;style&#39;;</span><br><span class=\"line\">@import &#39;..&#x2F;features&#x2F;common&#x2F;style&#39;;</span><br><span class=\"line\">@import &#39;..&#x2F;features&#x2F;examples&#x2F;style&#39;;</span><br><span class=\"line\">@import &#39;..&#x2F;features&#x2F;blog&#x2F;style&#39;;</span><br><span class=\"line\">@import &#39;..&#x2F;features&#x2F;log&#x2F;style&#39;;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"2-2-5-common\"><a href=\"#2-2-5-common\" class=\"headerlink\" title=\"2.2.5. /common\"></a>2.2.5. /common</h3><p>除了上面说的routeConfig.js集中定义各个feature的路由，还有<br>rootReducer.js集中定义各个feature的reducer</p>\n<h3 id=\"2-2-6-features\"><a href=\"#2-2-6-features\" class=\"headerlink\" title=\"2.2.6. /features\"></a>2.2.6. /features</h3><p>这是最重要的啦，之前说的feature就是他，features中就是项目的各个功能。</p>\n","site":{"data":{}},"excerpt":"<p>2019年的最后一天。<br>好久没写博客了，真的是从善如流，从恶如崩。<br>今年最大的收获应该是学习了react吧，虽然才入了个门，不记录一下，可能过完年就忘光了。。。</p>","more":"<h2 id=\"1-环境\"><a href=\"#1-环境\" class=\"headerlink\" title=\"1. 环境\"></a>1. 环境</h2><p>rekit脚手架搭建的react。<br>node.js     v12.13.1<br>npm         6.12.1</p>\n<p>webpack<br>redux<br>router<br>antd<br>axios<br>json-server</p>\n<h2 id=\"2-目录结构\"><a href=\"#2-目录结构\" class=\"headerlink\" title=\"2. 目录结构\"></a>2. 目录结构</h2><p>根目录：/rekit-app</p>\n<h3 id=\"2-1-package-json\"><a href=\"#2-1-package-json\" class=\"headerlink\" title=\"2.1. package.json\"></a>2.1. package.json</h3><p>package.json</p>\n<p><font color=\"#DC143C\"> <strong>npm init</strong> </font>就可以生成这个文件，下面就是我初始化的一个package.json。<br>他是一个json对象，记录了项目的一些基本信息等等</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;cyy&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面具体介绍一下，rekit项目的package.json文件,几个主要部分：dependencies，scripts，devDependencies等<br><img src=\"/2019/12/31/react/package.png\" alt=\"图1. package.json\"></p>\n<h4 id=\"2-1-1-dependencies\"><a href=\"#2-1-1-dependencies\" class=\"headerlink\" title=\"2.1.1. dependencies\"></a>2.1.1. dependencies</h4><p>如下，是我项目的依赖，模块名+版本范围<br>dependencies是项目运行依赖的模块，devDependencies是项目开发依赖的模块。<br>也就是devDependencies并不会被打进生产的包里。<br>安装依赖包的时候 –save就会写入dependencies中，–save-dev就会写入devDependencies中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;antd&quot;: &quot;^3.26.0&quot;,</span><br><span class=\"line\">    &quot;autoprefixer&quot;: &quot;7.1.6&quot;,</span><br><span class=\"line\">    &quot;axios&quot;: &quot;^0.18.0&quot;,</span><br><span class=\"line\">    &quot;babel-core&quot;: &quot;6.26.0&quot;,</span><br><span class=\"line\">    &quot;babel-eslint&quot;: &quot;7.2.3&quot;,</span><br><span class=\"line\">    &quot;babel-jest&quot;: &quot;20.0.3&quot;,</span><br><span class=\"line\">    &quot;babel-loader&quot;: &quot;7.1.2&quot;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;babel-plugin-import&quot;: &quot;^1.13.0&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-2-scripts\"><a href=\"#2-1-2-scripts\" class=\"headerlink\" title=\"2.1.2. scripts\"></a>2.1.2. scripts</h4><p>script中定义脚本命令<br>当我执行比如<font color=\"#DC143C\"> <strong>npm run build</strong> </font>的时候，就相当于执行了<font color=\"#DC143C\"> <strong>node scripts/build.js</strong> </font><br>其中start可以直接写<font color=\"#DC143C\"> <strong>npm start</strong> </font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;mock&quot;: &quot;json-server --watch --port 6077 data&#x2F;db.json&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;concurrently \\&quot;node scripts&#x2F;start.js\\&quot; \\&quot;json-server --watch --port 6077 data&#x2F;db.json\\&quot;&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;node scripts&#x2F;build.js&quot;,</span><br><span class=\"line\">    &quot;test&quot;: &quot;node scripts&#x2F;test.js --env&#x3D;jsdom&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>可以看到start后面的指令有两部分，我这边是为了在启动项目的同时，把json-server也启动，所以用到了concurrently<br>json-server是一个可以在前端运行，返回json数据的服务。用来提供前端测试数据还是不错的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm insatll -g concurrently</span><br><span class=\"line\"></span><br><span class=\"line\">然后修改package.json中script：</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;server&quot;:&quot;react-scripts start&quot;,</span><br><span class=\"line\">&quot;json_server&quot;:&quot;json-server mock&#x2F;db.json --port 3003&quot;,</span><br><span class=\"line\">&quot;start&quot;: &quot;concurrently \\&quot;npm run json_server\\&quot; \\&quot;npm run server\\&quot; &quot;,</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://blog.csdn.net/div_ma/article/details/80579227\" target=\"_blank\" rel=\"noopener\">配置package.json 使一次npm run start 执行两个指令或者多个指令</a></p>\n<h4 id=\"2-1-3-rekit\"><a href=\"#2-1-3-rekit\" class=\"headerlink\" title=\"2.1.3. rekit\"></a>2.1.3. rekit</h4><p>这里配置了启动端口，可以在start.js中获取到，项目就会在你指定的端口下启动。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;rekit&quot;: &#123;</span><br><span class=\"line\">    &quot;devPort&quot;: 6075,</span><br><span class=\"line\">    &quot;studioPort&quot;: 6076,</span><br><span class=\"line\">    &quot;plugins&quot;: [],</span><br><span class=\"line\">    &quot;css&quot;: &quot;less&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>当然啦，用 rekit creat <app-name> 创建一个rekit项目，这些他都帮你配置好了，可以直接开始业务代码的编写。</app-name></p>\n<h3 id=\"2-2-src\"><a href=\"#2-2-src\" class=\"headerlink\" title=\"2.2. /src\"></a>2.2. /src</h3><p>所有的文件都放在这个目录序啊</p>\n<h3 id=\"2-2-1-index-js\"><a href=\"#2-2-1-index-js\" class=\"headerlink\" title=\"2.2.1. index.js\"></a>2.2.1. index.js</h3><p>这是项目的入口文件，将资源都挂载到root节点上。<br>rekit中，他加载了Root组件，这个组件接收store和routeConfig，主要就是为了加载路由</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">renderApp(&lt;Root store&#x3D;&#123;store&#125; routeConfig&#x3D;&#123;routeConfig&#125; &#x2F;&gt;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-2-common-routeConfig-js\"><a href=\"#2-2-2-common-routeConfig-js\" class=\"headerlink\" title=\"2.2.2. /common/routeConfig.js\"></a>2.2.2. /common/routeConfig.js</h3><p>不同feature的子路由都集中定义在这里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 使用json方式定义路由、使用renderRouteConfigV3解析json，转换成react声明式语法</span><br><span class=\"line\">const routes &#x3D; [&#123;</span><br><span class=\"line\">  path: &#39;&#x2F;&#39;,</span><br><span class=\"line\">  component: App,</span><br><span class=\"line\">  childRoutes: [</span><br><span class=\"line\">    ...childRoutes,</span><br><span class=\"line\">    &#123; path: &#39;*&#39;, name: &#39;Page not found&#39;, component: PageNotFound &#125;,</span><br><span class=\"line\">  ].filter(r &#x3D;&gt; r.component || (r.childRoutes &amp;&amp; r.childRoutes.length &gt; 0)),</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-3-Root-js\"><a href=\"#2-2-3-Root-js\" class=\"headerlink\" title=\"2.2.3. Root.js\"></a>2.2.3. Root.js</h3><p>这里定义了index.js中加载的Root组件，他调用了Root渲染函数renderRouteConfigV3解析json，转换成react声明式语法。</p>\n<h3 id=\"2-2-4-images-styles\"><a href=\"#2-2-4-images-styles\" class=\"headerlink\" title=\"2.2.4. /images   /styles\"></a>2.2.4. /images   /styles</h3><p>images不说了，就是放图片，styles下主要有global.less以及index.less<br>global中定义一些全局的样式，而index.less中引入global.less以及每个feature中定义的style.less</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; index is the entry for all styles.</span><br><span class=\"line\">@import &#39;.&#x2F;global&#39;;</span><br><span class=\"line\">@import &#39;..&#x2F;features&#x2F;home&#x2F;style&#39;;</span><br><span class=\"line\">@import &#39;..&#x2F;features&#x2F;common&#x2F;style&#39;;</span><br><span class=\"line\">@import &#39;..&#x2F;features&#x2F;examples&#x2F;style&#39;;</span><br><span class=\"line\">@import &#39;..&#x2F;features&#x2F;blog&#x2F;style&#39;;</span><br><span class=\"line\">@import &#39;..&#x2F;features&#x2F;log&#x2F;style&#39;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-5-common\"><a href=\"#2-2-5-common\" class=\"headerlink\" title=\"2.2.5. /common\"></a>2.2.5. /common</h3><p>除了上面说的routeConfig.js集中定义各个feature的路由，还有<br>rootReducer.js集中定义各个feature的reducer</p>\n<h3 id=\"2-2-6-features\"><a href=\"#2-2-6-features\" class=\"headerlink\" title=\"2.2.6. /features\"></a>2.2.6. /features</h3><p>这是最重要的啦，之前说的feature就是他，features中就是项目的各个功能。</p>"},{"title":"spring 事务配置","date":"2020-01-07T01:19:16.000Z","_content":"\nservice中存在众多业务逻辑，往往一个方法中就涉及多个增删改，当一个ddl报错，我们肯定希望之前执行的回滚，之后的不再执行，\n这样才能保证事务的一致性。不然我只记录账上少了100，没有记录这个100的去处，账就崩了。\n<!--more-->\n\n## 1. @Transactional\n最开始要求在每个service类上都加上这么一个注解\n那么这个service中的所有方法，报错就会回滚。\n```\n@Transactional(rollbackFor = Exception.class)\n```\n但是这个就存在问题，因为一个service下面的众多方法不是都需要事务支持的，有很多查询方法完全不需要事务，\n而将@Transactional注释在类上，就相当于将每个方法都纳入事务管理。会影响性能。\n\n所以最好不要再接口上加@Transactional注解，而是在每个具体的方法上加注解。\n\n查询的方法上可以这么写(没试过。。。)\n```\n@Transactional(readOnly=true) //配置事务 查询使用 只读\n```\n### 1.2. 注意事项\n使用@Transactional注解的，只能是public，@Transactional注解的方法都是被外部其他类调用才有效，故只能是public。\n在 protected、private 或者 package-visible 的方法上使用 @Transactional 注解，它也不会报错，但事务无效。\n\n\n \n## 2. Propagation\n事务属性|解释\n--|:--:\nREQUIRED|支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 \nSUPPORTS|支持当前事务，如果当前没有事务，就以非事务方式执行。 \nMANDATORY|支持当前事务，如果当前没有事务，就抛出异常。 \nREQUIRES_NEW|新建事务，如果当前存在事务，把当前事务挂起。 \nNOT_SUPPORTED|以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 \nNEVER|以非事务方式执行，如果当前存在事务，则抛出异常。 \nNESTED|支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。 \n\n### 2.1. REQUIRES_NEW\n举个例子：\nA类a方法中调用B类b方法。\na方法不能回滚，因为无论是否报错我都要记录日志，所以a没有开启事务，但是b需要事务支持，\n所以在b方法上加上以下注解，表示新建事务\n```\n@Transactional(rollbackFor = Exception.class, propagation = Propagation.REQUIRED) // or REQUIRES_NEW\n```\n(写着写着就感觉不对劲了。。。我当初为啥要用REQUIRES_NEW来着，REQUIRED不好么？。。。)\n这个事务还是多尝试，找到适合对应业务需求的。\n\n## Z. 参考\n[1. Spring中propagation的7种事务配置](https://blog.csdn.net/sayoko06/article/details/79164858)\n[2. @Transactional事务几点注意](https://www.cnblogs.com/happyday56/p/8906443.html)\n\n","source":"_posts/spring-事务配置.md","raw":"---\ntitle: spring 事务配置\ndate: 2020-01-07 09:19:16\ntags: spring\n---\n\nservice中存在众多业务逻辑，往往一个方法中就涉及多个增删改，当一个ddl报错，我们肯定希望之前执行的回滚，之后的不再执行，\n这样才能保证事务的一致性。不然我只记录账上少了100，没有记录这个100的去处，账就崩了。\n<!--more-->\n\n## 1. @Transactional\n最开始要求在每个service类上都加上这么一个注解\n那么这个service中的所有方法，报错就会回滚。\n```\n@Transactional(rollbackFor = Exception.class)\n```\n但是这个就存在问题，因为一个service下面的众多方法不是都需要事务支持的，有很多查询方法完全不需要事务，\n而将@Transactional注释在类上，就相当于将每个方法都纳入事务管理。会影响性能。\n\n所以最好不要再接口上加@Transactional注解，而是在每个具体的方法上加注解。\n\n查询的方法上可以这么写(没试过。。。)\n```\n@Transactional(readOnly=true) //配置事务 查询使用 只读\n```\n### 1.2. 注意事项\n使用@Transactional注解的，只能是public，@Transactional注解的方法都是被外部其他类调用才有效，故只能是public。\n在 protected、private 或者 package-visible 的方法上使用 @Transactional 注解，它也不会报错，但事务无效。\n\n\n \n## 2. Propagation\n事务属性|解释\n--|:--:\nREQUIRED|支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 \nSUPPORTS|支持当前事务，如果当前没有事务，就以非事务方式执行。 \nMANDATORY|支持当前事务，如果当前没有事务，就抛出异常。 \nREQUIRES_NEW|新建事务，如果当前存在事务，把当前事务挂起。 \nNOT_SUPPORTED|以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 \nNEVER|以非事务方式执行，如果当前存在事务，则抛出异常。 \nNESTED|支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。 \n\n### 2.1. REQUIRES_NEW\n举个例子：\nA类a方法中调用B类b方法。\na方法不能回滚，因为无论是否报错我都要记录日志，所以a没有开启事务，但是b需要事务支持，\n所以在b方法上加上以下注解，表示新建事务\n```\n@Transactional(rollbackFor = Exception.class, propagation = Propagation.REQUIRED) // or REQUIRES_NEW\n```\n(写着写着就感觉不对劲了。。。我当初为啥要用REQUIRES_NEW来着，REQUIRED不好么？。。。)\n这个事务还是多尝试，找到适合对应业务需求的。\n\n## Z. 参考\n[1. Spring中propagation的7种事务配置](https://blog.csdn.net/sayoko06/article/details/79164858)\n[2. @Transactional事务几点注意](https://www.cnblogs.com/happyday56/p/8906443.html)\n\n","slug":"spring-事务配置","published":1,"updated":"2020-01-07T01:19:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpvc000s40s6541919fb","content":"<p>service中存在众多业务逻辑，往往一个方法中就涉及多个增删改，当一个ddl报错，我们肯定希望之前执行的回滚，之后的不再执行，<br>这样才能保证事务的一致性。不然我只记录账上少了100，没有记录这个100的去处，账就崩了。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-Transactional\"><a href=\"#1-Transactional\" class=\"headerlink\" title=\"1. @Transactional\"></a>1. @Transactional</h2><p>最开始要求在每个service类上都加上这么一个注解<br>那么这个service中的所有方法，报错就会回滚。</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(rollbackFor &#x3D; Exception.class)</span><br></pre></td></tr></table></figure></div>\n<p>但是这个就存在问题，因为一个service下面的众多方法不是都需要事务支持的，有很多查询方法完全不需要事务，<br>而将@Transactional注释在类上，就相当于将每个方法都纳入事务管理。会影响性能。</p>\n<p>所以最好不要再接口上加@Transactional注解，而是在每个具体的方法上加注解。</p>\n<p>查询的方法上可以这么写(没试过。。。)</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(readOnly&#x3D;true) &#x2F;&#x2F;配置事务 查询使用 只读</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"1-2-注意事项\"><a href=\"#1-2-注意事项\" class=\"headerlink\" title=\"1.2. 注意事项\"></a>1.2. 注意事项</h3><p>使用@Transactional注解的，只能是public，@Transactional注解的方法都是被外部其他类调用才有效，故只能是public。<br>在 protected、private 或者 package-visible 的方法上使用 @Transactional 注解，它也不会报错，但事务无效。</p>\n<h2 id=\"2-Propagation\"><a href=\"#2-Propagation\" class=\"headerlink\" title=\"2. Propagation\"></a>2. Propagation</h2><table>\n<thead>\n<tr>\n<th>事务属性</th>\n<th align=\"center\">解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>REQUIRED</td>\n<td align=\"center\">支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。</td>\n</tr>\n<tr>\n<td>SUPPORTS</td>\n<td align=\"center\">支持当前事务，如果当前没有事务，就以非事务方式执行。</td>\n</tr>\n<tr>\n<td>MANDATORY</td>\n<td align=\"center\">支持当前事务，如果当前没有事务，就抛出异常。</td>\n</tr>\n<tr>\n<td>REQUIRES_NEW</td>\n<td align=\"center\">新建事务，如果当前存在事务，把当前事务挂起。</td>\n</tr>\n<tr>\n<td>NOT_SUPPORTED</td>\n<td align=\"center\">以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td>\n</tr>\n<tr>\n<td>NEVER</td>\n<td align=\"center\">以非事务方式执行，如果当前存在事务，则抛出异常。</td>\n</tr>\n<tr>\n<td>NESTED</td>\n<td align=\"center\">支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-1-REQUIRES-NEW\"><a href=\"#2-1-REQUIRES-NEW\" class=\"headerlink\" title=\"2.1. REQUIRES_NEW\"></a>2.1. REQUIRES_NEW</h3><p>举个例子：<br>A类a方法中调用B类b方法。<br>a方法不能回滚，因为无论是否报错我都要记录日志，所以a没有开启事务，但是b需要事务支持，<br>所以在b方法上加上以下注解，表示新建事务</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(rollbackFor &#x3D; Exception.class, propagation &#x3D; Propagation.REQUIRED) &#x2F;&#x2F; or REQUIRES_NEW</span><br></pre></td></tr></table></figure></div>\n<p>(写着写着就感觉不对劲了。。。我当初为啥要用REQUIRES_NEW来着，REQUIRED不好么？。。。)<br>这个事务还是多尝试，找到适合对应业务需求的。</p>\n<h2 id=\"Z-参考\"><a href=\"#Z-参考\" class=\"headerlink\" title=\"Z. 参考\"></a>Z. 参考</h2><p><a href=\"https://blog.csdn.net/sayoko06/article/details/79164858\" target=\"_blank\" rel=\"noopener\">1. Spring中propagation的7种事务配置</a><br><a href=\"https://www.cnblogs.com/happyday56/p/8906443.html\" target=\"_blank\" rel=\"noopener\">2. @Transactional事务几点注意</a></p>\n","site":{"data":{}},"excerpt":"<p>service中存在众多业务逻辑，往往一个方法中就涉及多个增删改，当一个ddl报错，我们肯定希望之前执行的回滚，之后的不再执行，<br>这样才能保证事务的一致性。不然我只记录账上少了100，没有记录这个100的去处，账就崩了。</p>","more":"<h2 id=\"1-Transactional\"><a href=\"#1-Transactional\" class=\"headerlink\" title=\"1. @Transactional\"></a>1. @Transactional</h2><p>最开始要求在每个service类上都加上这么一个注解<br>那么这个service中的所有方法，报错就会回滚。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(rollbackFor &#x3D; Exception.class)</span><br></pre></td></tr></table></figure>\n<p>但是这个就存在问题，因为一个service下面的众多方法不是都需要事务支持的，有很多查询方法完全不需要事务，<br>而将@Transactional注释在类上，就相当于将每个方法都纳入事务管理。会影响性能。</p>\n<p>所以最好不要再接口上加@Transactional注解，而是在每个具体的方法上加注解。</p>\n<p>查询的方法上可以这么写(没试过。。。)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(readOnly&#x3D;true) &#x2F;&#x2F;配置事务 查询使用 只读</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-注意事项\"><a href=\"#1-2-注意事项\" class=\"headerlink\" title=\"1.2. 注意事项\"></a>1.2. 注意事项</h3><p>使用@Transactional注解的，只能是public，@Transactional注解的方法都是被外部其他类调用才有效，故只能是public。<br>在 protected、private 或者 package-visible 的方法上使用 @Transactional 注解，它也不会报错，但事务无效。</p>\n<h2 id=\"2-Propagation\"><a href=\"#2-Propagation\" class=\"headerlink\" title=\"2. Propagation\"></a>2. Propagation</h2><table>\n<thead>\n<tr>\n<th>事务属性</th>\n<th align=\"center\">解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>REQUIRED</td>\n<td align=\"center\">支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。</td>\n</tr>\n<tr>\n<td>SUPPORTS</td>\n<td align=\"center\">支持当前事务，如果当前没有事务，就以非事务方式执行。</td>\n</tr>\n<tr>\n<td>MANDATORY</td>\n<td align=\"center\">支持当前事务，如果当前没有事务，就抛出异常。</td>\n</tr>\n<tr>\n<td>REQUIRES_NEW</td>\n<td align=\"center\">新建事务，如果当前存在事务，把当前事务挂起。</td>\n</tr>\n<tr>\n<td>NOT_SUPPORTED</td>\n<td align=\"center\">以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td>\n</tr>\n<tr>\n<td>NEVER</td>\n<td align=\"center\">以非事务方式执行，如果当前存在事务，则抛出异常。</td>\n</tr>\n<tr>\n<td>NESTED</td>\n<td align=\"center\">支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-1-REQUIRES-NEW\"><a href=\"#2-1-REQUIRES-NEW\" class=\"headerlink\" title=\"2.1. REQUIRES_NEW\"></a>2.1. REQUIRES_NEW</h3><p>举个例子：<br>A类a方法中调用B类b方法。<br>a方法不能回滚，因为无论是否报错我都要记录日志，所以a没有开启事务，但是b需要事务支持，<br>所以在b方法上加上以下注解，表示新建事务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(rollbackFor &#x3D; Exception.class, propagation &#x3D; Propagation.REQUIRED) &#x2F;&#x2F; or REQUIRES_NEW</span><br></pre></td></tr></table></figure>\n<p>(写着写着就感觉不对劲了。。。我当初为啥要用REQUIRES_NEW来着，REQUIRED不好么？。。。)<br>这个事务还是多尝试，找到适合对应业务需求的。</p>\n<h2 id=\"Z-参考\"><a href=\"#Z-参考\" class=\"headerlink\" title=\"Z. 参考\"></a>Z. 参考</h2><p><a href=\"https://blog.csdn.net/sayoko06/article/details/79164858\" target=\"_blank\" rel=\"noopener\">1. Spring中propagation的7种事务配置</a><br><a href=\"https://www.cnblogs.com/happyday56/p/8906443.html\" target=\"_blank\" rel=\"noopener\">2. @Transactional事务几点注意</a></p>"},{"title":"ssh免密钥登录","date":"2019-10-21T01:14:07.000Z","_content":"大清早，先偷会儿懒，把昨天弄好的ssh免密钥登录记录一哈，免得过两天忘记了。\n<!--more-->\n### 先做一哈背景介绍\n我是centos 7 的服务器，在vultr上搭建的，一开始搭的时候我就选择了之前生成的SSH Keys。\n后来想实现免密登录，发现本地私钥找不到了。。。\n所以就得新生成一个，把之前的SSH key换掉。\n具体肿么实现呢：\n\n### Step 1 配置文件\n进入服务器\n``` bash\n$ vi /etc/ssh/sshd_config\n```\n\n找到以下内容并且把注释符 # 删掉：\n``` \nRSAAuthentication yes \nPubkeyAuthentication yes \nAuthorizedKeysFile .ssh/authorized_keys \n```\n然后重启sshd服务：\n\n``` bash\n$ /sbin/service sshd restart \n```\n\n### Step 2 生成ssh key\n因为我原来就有ssh，所以～目录下有.ssh文件夹，里面有authorized_keys文件，内容是以ssh-rsa打头的公钥，将其备份一下(其实不需要了可以删掉)。\n生成新的ssh key：\n``` bash\n$ ssh-keygen -t rsa \n```\n\n之后的提示都直接回车，默认会在～/.ssh目录下生成id_rsa私钥、id_rsa.pub公钥两个文件,known_hosts文件会记录ssh密钥登陆的主机列表。\n\n### Step 3 将公钥导入认证文件\n之前，我们将 AuthorizedKeysFile .ssh/authorized_keys 这句话启用，就是将.ssh目录下的authorized_keys作为认证文件，\n现在我们换了新的ssh key，就把新生成的id_rsa.pub公钥复制到.ssh目录下，并改名为authorized_keys。\n\n### Step 4 本地配置\n将密钥从服务器复制到本地\n\n``` bash\n$ scp root@ever:~/.ssh/id_rsa /usr/local/aliyun/SSH-ever-vultr-private\n```\n\n在本地～目录下新建.ssh文件夹，进入该文件夹，新建config文件，写入这段配置：\n\n```\nHost ever // 自定义服务名\nHostName ip地址\nPort 22\nUser root  //登录用户\nIdentityFile    /usr/local/aliyun/SSH-ever-vultr-private   //本地密钥\n```\n然后 ssh ever 就可以免密登录我的服务器啦！\n\nps 如果不免密登录，也可以在config里面配置除了IdentityFile以外的属性，登录的时候就可以不用写ip和登录用户啦。\n\npps 百度的时候看到了用ssh-copy-id也可以实现免密登录，打算再搭一个服务器试一下，先去工作啦～～\n\n","source":"_posts/ssh免密钥登录.md","raw":"---\ntitle: ssh免密钥登录\ndate: 2019-10-21 09:14:07\ntags: linux\n---\n大清早，先偷会儿懒，把昨天弄好的ssh免密钥登录记录一哈，免得过两天忘记了。\n<!--more-->\n### 先做一哈背景介绍\n我是centos 7 的服务器，在vultr上搭建的，一开始搭的时候我就选择了之前生成的SSH Keys。\n后来想实现免密登录，发现本地私钥找不到了。。。\n所以就得新生成一个，把之前的SSH key换掉。\n具体肿么实现呢：\n\n### Step 1 配置文件\n进入服务器\n``` bash\n$ vi /etc/ssh/sshd_config\n```\n\n找到以下内容并且把注释符 # 删掉：\n``` \nRSAAuthentication yes \nPubkeyAuthentication yes \nAuthorizedKeysFile .ssh/authorized_keys \n```\n然后重启sshd服务：\n\n``` bash\n$ /sbin/service sshd restart \n```\n\n### Step 2 生成ssh key\n因为我原来就有ssh，所以～目录下有.ssh文件夹，里面有authorized_keys文件，内容是以ssh-rsa打头的公钥，将其备份一下(其实不需要了可以删掉)。\n生成新的ssh key：\n``` bash\n$ ssh-keygen -t rsa \n```\n\n之后的提示都直接回车，默认会在～/.ssh目录下生成id_rsa私钥、id_rsa.pub公钥两个文件,known_hosts文件会记录ssh密钥登陆的主机列表。\n\n### Step 3 将公钥导入认证文件\n之前，我们将 AuthorizedKeysFile .ssh/authorized_keys 这句话启用，就是将.ssh目录下的authorized_keys作为认证文件，\n现在我们换了新的ssh key，就把新生成的id_rsa.pub公钥复制到.ssh目录下，并改名为authorized_keys。\n\n### Step 4 本地配置\n将密钥从服务器复制到本地\n\n``` bash\n$ scp root@ever:~/.ssh/id_rsa /usr/local/aliyun/SSH-ever-vultr-private\n```\n\n在本地～目录下新建.ssh文件夹，进入该文件夹，新建config文件，写入这段配置：\n\n```\nHost ever // 自定义服务名\nHostName ip地址\nPort 22\nUser root  //登录用户\nIdentityFile    /usr/local/aliyun/SSH-ever-vultr-private   //本地密钥\n```\n然后 ssh ever 就可以免密登录我的服务器啦！\n\nps 如果不免密登录，也可以在config里面配置除了IdentityFile以外的属性，登录的时候就可以不用写ip和登录用户啦。\n\npps 百度的时候看到了用ssh-copy-id也可以实现免密登录，打算再搭一个服务器试一下，先去工作啦～～\n\n","slug":"ssh免密钥登录","published":1,"updated":"2019-10-21T01:14:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpve000u40s6089o9whq","content":"<p>大清早，先偷会儿懒，把昨天弄好的ssh免密钥登录记录一哈，免得过两天忘记了。</p>\n<a id=\"more\"></a>\n<h3 id=\"先做一哈背景介绍\"><a href=\"#先做一哈背景介绍\" class=\"headerlink\" title=\"先做一哈背景介绍\"></a>先做一哈背景介绍</h3><p>我是centos 7 的服务器，在vultr上搭建的，一开始搭的时候我就选择了之前生成的SSH Keys。<br>后来想实现免密登录，发现本地私钥找不到了。。。<br>所以就得新生成一个，把之前的SSH key换掉。<br>具体肿么实现呢：</p>\n<h3 id=\"Step-1-配置文件\"><a href=\"#Step-1-配置文件\" class=\"headerlink\" title=\"Step 1 配置文件\"></a>Step 1 配置文件</h3><p>进入服务器</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></div>\n\n<p>找到以下内容并且把注释符 # 删掉：</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSAAuthentication yes </span><br><span class=\"line\">PubkeyAuthentication yes </span><br><span class=\"line\">AuthorizedKeysFile .ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure></div>\n<p>然后重启sshd服务：</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /sbin/service sshd restart</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"Step-2-生成ssh-key\"><a href=\"#Step-2-生成ssh-key\" class=\"headerlink\" title=\"Step 2 生成ssh key\"></a>Step 2 生成ssh key</h3><p>因为我原来就有ssh，所以～目录下有.ssh文件夹，里面有authorized_keys文件，内容是以ssh-rsa打头的公钥，将其备份一下(其实不需要了可以删掉)。<br>生成新的ssh key：</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></div>\n\n<p>之后的提示都直接回车，默认会在～/.ssh目录下生成id_rsa私钥、id_rsa.pub公钥两个文件,known_hosts文件会记录ssh密钥登陆的主机列表。</p>\n<h3 id=\"Step-3-将公钥导入认证文件\"><a href=\"#Step-3-将公钥导入认证文件\" class=\"headerlink\" title=\"Step 3 将公钥导入认证文件\"></a>Step 3 将公钥导入认证文件</h3><p>之前，我们将 AuthorizedKeysFile .ssh/authorized_keys 这句话启用，就是将.ssh目录下的authorized_keys作为认证文件，<br>现在我们换了新的ssh key，就把新生成的id_rsa.pub公钥复制到.ssh目录下，并改名为authorized_keys。</p>\n<h3 id=\"Step-4-本地配置\"><a href=\"#Step-4-本地配置\" class=\"headerlink\" title=\"Step 4 本地配置\"></a>Step 4 本地配置</h3><p>将密钥从服务器复制到本地</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ scp root@ever:~/.ssh/id_rsa /usr/<span class=\"built_in\">local</span>/aliyun/SSH-ever-vultr-private</span><br></pre></td></tr></table></figure></div>\n\n<p>在本地～目录下新建.ssh文件夹，进入该文件夹，新建config文件，写入这段配置：</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host ever &#x2F;&#x2F; 自定义服务名</span><br><span class=\"line\">HostName ip地址</span><br><span class=\"line\">Port 22</span><br><span class=\"line\">User root  &#x2F;&#x2F;登录用户</span><br><span class=\"line\">IdentityFile    &#x2F;usr&#x2F;local&#x2F;aliyun&#x2F;SSH-ever-vultr-private   &#x2F;&#x2F;本地密钥</span><br></pre></td></tr></table></figure></div>\n<p>然后 ssh ever 就可以免密登录我的服务器啦！</p>\n<p>ps 如果不免密登录，也可以在config里面配置除了IdentityFile以外的属性，登录的时候就可以不用写ip和登录用户啦。</p>\n<p>pps 百度的时候看到了用ssh-copy-id也可以实现免密登录，打算再搭一个服务器试一下，先去工作啦～～</p>\n","site":{"data":{}},"excerpt":"<p>大清早，先偷会儿懒，把昨天弄好的ssh免密钥登录记录一哈，免得过两天忘记了。</p>","more":"<h3 id=\"先做一哈背景介绍\"><a href=\"#先做一哈背景介绍\" class=\"headerlink\" title=\"先做一哈背景介绍\"></a>先做一哈背景介绍</h3><p>我是centos 7 的服务器，在vultr上搭建的，一开始搭的时候我就选择了之前生成的SSH Keys。<br>后来想实现免密登录，发现本地私钥找不到了。。。<br>所以就得新生成一个，把之前的SSH key换掉。<br>具体肿么实现呢：</p>\n<h3 id=\"Step-1-配置文件\"><a href=\"#Step-1-配置文件\" class=\"headerlink\" title=\"Step 1 配置文件\"></a>Step 1 配置文件</h3><p>进入服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<p>找到以下内容并且把注释符 # 删掉：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSAAuthentication yes </span><br><span class=\"line\">PubkeyAuthentication yes </span><br><span class=\"line\">AuthorizedKeysFile .ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure>\n<p>然后重启sshd服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /sbin/service sshd restart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step-2-生成ssh-key\"><a href=\"#Step-2-生成ssh-key\" class=\"headerlink\" title=\"Step 2 生成ssh key\"></a>Step 2 生成ssh key</h3><p>因为我原来就有ssh，所以～目录下有.ssh文件夹，里面有authorized_keys文件，内容是以ssh-rsa打头的公钥，将其备份一下(其实不需要了可以删掉)。<br>生成新的ssh key：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p>之后的提示都直接回车，默认会在～/.ssh目录下生成id_rsa私钥、id_rsa.pub公钥两个文件,known_hosts文件会记录ssh密钥登陆的主机列表。</p>\n<h3 id=\"Step-3-将公钥导入认证文件\"><a href=\"#Step-3-将公钥导入认证文件\" class=\"headerlink\" title=\"Step 3 将公钥导入认证文件\"></a>Step 3 将公钥导入认证文件</h3><p>之前，我们将 AuthorizedKeysFile .ssh/authorized_keys 这句话启用，就是将.ssh目录下的authorized_keys作为认证文件，<br>现在我们换了新的ssh key，就把新生成的id_rsa.pub公钥复制到.ssh目录下，并改名为authorized_keys。</p>\n<h3 id=\"Step-4-本地配置\"><a href=\"#Step-4-本地配置\" class=\"headerlink\" title=\"Step 4 本地配置\"></a>Step 4 本地配置</h3><p>将密钥从服务器复制到本地</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ scp root@ever:~/.ssh/id_rsa /usr/<span class=\"built_in\">local</span>/aliyun/SSH-ever-vultr-private</span><br></pre></td></tr></table></figure>\n\n<p>在本地～目录下新建.ssh文件夹，进入该文件夹，新建config文件，写入这段配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host ever &#x2F;&#x2F; 自定义服务名</span><br><span class=\"line\">HostName ip地址</span><br><span class=\"line\">Port 22</span><br><span class=\"line\">User root  &#x2F;&#x2F;登录用户</span><br><span class=\"line\">IdentityFile    &#x2F;usr&#x2F;local&#x2F;aliyun&#x2F;SSH-ever-vultr-private   &#x2F;&#x2F;本地密钥</span><br></pre></td></tr></table></figure>\n<p>然后 ssh ever 就可以免密登录我的服务器啦！</p>\n<p>ps 如果不免密登录，也可以在config里面配置除了IdentityFile以外的属性，登录的时候就可以不用写ip和登录用户啦。</p>\n<p>pps 百度的时候看到了用ssh-copy-id也可以实现免密登录，打算再搭一个服务器试一下，先去工作啦～～</p>"},{"title":"web service -- spring + cxf 发布web service(2)","date":"2020-01-03T07:17:15.000Z","_content":"\n这个项目的接口，断断续续做了3个月了，从一开始的一脸懵逼，到现在的一知半解。。。\n<!--more-->\n## 一、问题描述\n项目上是用spring框架加上cxf来发布webservice的，啥都有，就配置一下，再写java就行。\n但是，仅仅发布，客户大人是不会满意的，他们对这个报文格式，是有要求滴。\n归纳为以下几点:\n\n### 1. 命名空间\n以系统简称作为命名空间，并且要求body下每个节点前面都有命名空间前缀\n那么我遇到了什么问题呢\n首先我们这个系统简称有点长，有6个字母，生成的报文前缀直接给我截取成了3个字母。。。\n其次就是每个节点前都要加命名空间前缀，让我好一番折腾\n\n### 2. 节点要求\nBody中第一层应使用输入数据模型根节点信息，即服务方法名+\"Request\"。\n而我生成的第一层永远是方法名，第二层才是数据模型。\n\n### 3. Header\n服务请求报文在Header中添加服务安全验证信息\n想校验安全信息，找不到Header。。。\n\n每每回想起那审查后的十大问题，我都觉得要是到时候报文不严格按照这个来，都对不起我这么久的研究\n\n## 二、解决方法\n先上报文，要求是这样的\n```\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:qwerty=\"http://qwerty.com\">\n   <soapenv:Header>\n      <qwerty:security>\n         <qwerty:username>?</qwerty:username>\n         <qwerty:password>?</qwerty:password>\n      </qwerty:security>\n   </soapenv:Header>\n   <soapenv:Body>\n\t <qwerty:functionNameRequest>\n\t    <!--Optional:-->\n\t    <qwerty:number>?</qwerty:number>\n\t    <!--Optional:-->\n\t    <qwerty:id>?</qwerty:id>\n\t    <!--Optional:-->\n         <qwerty:date>?</qwerty:date>\n\t </qwerty:functionNameRequest>\n   </soapenv:Body>\n</soapenv:Envelope>\n```\n我只能生成这样滴\n```\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:qwe=\"http://qwerty.com\">\n   <soapenv:Header>\n      <qwe:security>\n         <qwe:username>?</qwe:username>\n         <qwe:password>?</qwe:password>\n      </qwe:security>\n   </soapenv:Header>\n   <soapenv:Body>\n      <qwe:functionName>\n         <qwe:functionNameRequest>\n            <!--Optional:-->\n            <qwe:paymentReqNumber>111</qwe:paymentReqNumber>\n            <!--Optional:-->\n            <qwe:contractId>?</qwe:contractId>\n            <!--Optional:-->\n            <qwe:applyPayDate>?</qwe:applyPayDate>\n         </qwe:functionNameRequest>\n      </qwe:functionName>\n   </soapenv:Body>\n</soapenv:Envelope>\n```\n先说说这样婶儿的是怎么生成的\n### 1. 命名空间\n\n#### 1.1. 在接口方法上加注释(这样就会有xmlns，security，request前面会有命名空间)\n@WebService(targetNamespace = \"http://qwerty.com\")\n#### 1.2. 在方法参数上加注释(这样方法名前面就会有命名空间)\n@XmlElement(required = true, namespace = \"http://qwerty.com\") @WebParam(name = \"functionNameRequest\", partName = \"functionNameRequest\")\n                                               FunctionNameRequest functionNameRequest\n#### 1.3. 要在对象每个属性前面加命名空间前缀有两个方法\n##### 1.3.1. 在属性的get方法上加\n@XmlElement(namespace = \"http://qwerty.com\")\n但是必须每个都加，才能实现每个节点都有\n##### 1.3.2. 在FunctionNameRequest对象目录下新增文件 package-info.java\n```\n@XmlSchema(\n        namespace = \"http://qwerty.com\",\n        elementFormDefault = XmlNsForm.QUALIFIED,\n        xmlns = {\n                @XmlNs(prefix = \"qwerty\", namespaceURI = \"http://qwerty.com\")\n        }\n)\npackage hls.core.ws.dto;\n\nimport javax.xml.bind.annotation.XmlNs;\nimport javax.xml.bind.annotation.XmlNsForm;\nimport javax.xml.bind.annotation.XmlSchema;\n```\n\n### 2. 节点要求\n。。。失败了\n\n### 3. Header\n在请求接口方法中添加 \n@XmlElement(required = true) @WebParam(name = \"security\", header = true) InHeaderMessage inHeaderMessage\n加了@XmlElement(required = true)就不会有被注释了的 Optional: 了。\n\n## 三、拦截器\n最后来说说解决一切烦恼的拦截器吧。\n\n### 1. 定义\n在 [web service -- spring + cxf 发布web service(1)](http://localhost:4000/2019/11/13/web-service/)\n中，已经说过发布接口需要配置cxf-beans.xml，拦截器也在这里配置：\n```\n    <bean id=\"inInterceptor\" class=\"hls.core.ws.interceptor.ServiceInReceiveInterceptor\"/>\n    <bean id=\"outInterceptor\" class=\"hls.core.ws.interceptor.ServiceOutPreStreamInterceptor\"/>\n    <jaxws:server id=\"wsFunctionName\" serviceClass=\"hls.core.ws.service.FunctionName\"\n                  address=\"/FunctionName\">\n        <jaxws:serviceBean>\n            <bean class=\"hls.core.ws.service.impl.FunctionNameImpl\"/>\n        </jaxws:serviceBean>\n        <jaxws:inInterceptors>\n            <ref bean=\"inInterceptor\"/>\n        </jaxws:inInterceptors>\n        <jaxws:outInterceptors>\n            <ref bean=\"outInterceptor\"/>\n        </jaxws:outInterceptors>\n    </jaxws:server>\n```\n这里配置了两个拦截器，一个输入拦截器，一个输出拦截器。\n\n#### 1.1. 输入阶段\n阶段名称|阶段功能描述\n--|:--:\nRECEIVE|Transport level processing(接收阶段，传输层处理) \n(PRE/USER/POST)_STREAM|Stream level processing/transformations(流处理/转换阶段)\nREAD|This is where header reading typically occurs(SOAPHeader读取) \n(PRE/USER/POST)_PROTOCOL| Protocol processing, such as JAX-WS SOAP handlers(协议处理阶段，例如JAX-WS的Handler处理)\nUNMARSHAL|Unmarshalling of the request(SOAP请求解码阶段)\n(PRE/USER/POST)_LOGICAL|Processing of the umarshalled request(SOAP请求解码处理阶段)\nPRE_INVOKE|Pre invocation actions(调用业务处理之前进入该阶段)\nINVOKE|Invocation of the service(调用业务阶段)\nPOST_INVOKE|Invocation of the outgoing chain if there is one(提交业务处理结果，并触发输入连接器)\n\n#### 1.2. 输入拦截器\n(1) 修改报文：\n```\npackage hls.core.ws.interceptor;\n\nimport org.apache.cxf.helpers.IOUtils;\nimport org.apache.cxf.interceptor.Fault;\nimport org.apache.cxf.message.Exchange;\nimport org.apache.cxf.message.Message;\nimport org.apache.cxf.phase.AbstractPhaseInterceptor;\nimport org.apache.cxf.phase.Phase;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\n\n/**\n * @Author ever\n * @DATE 2019-12-02 14:14\n * @Description 接口服务端流入拦截器(修改请求报文)\n */\npublic class ServiceInReceiveInterceptor extends AbstractPhaseInterceptor<Message> {\n    protected static Logger log = LoggerFactory.getLogger(ServiceInReceiveInterceptor.class);\n\n    public ServiceInReceiveInterceptor() {\n        super(Phase.RECEIVE);\n    }\n\n    @Override\n    public void handleMessage(Message message) throws Fault {\n        InputStream is = message.getContent(InputStream.class);\n        if (is != null) {\n            try {\n                String str = IOUtils.toString(is);\n                // 原请求报文\n                Exchange exchange = message.getExchange();\n                exchange.put(\"input.content.origin\", str);\n                log.info(\"====> request xml=\\r\\n\" + str);\n\n                // 修改报文格式\n                str = str.replace(\"<qwerty:functionName>\", \n                \"<qwerty:functionName>\\n\" +\n                        \"      <qwerty:functionNameRequest>\")\n                        .replace(\"</qwerty:functionNameRequest>\", \n                        \"</qwerty:functionNameRequest>\\n\" +\n                        \"</qwerty:functionNameRequest>\\n\" +\n                                \"      </qwerty:functionName>\")\n                        .replace(\"qwerty\", \"qwe\")\n                        .replace(\"http://qwe.com\", \"http://qwerty.com\");\n\n                // 替换后的报文\n                log.info(\"====> replaced xml=\\r\\n\" + str);\n                exchange.put(\"input.content\", str);\n\n                InputStream ism = new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8));\n                message.setContent(InputStream.class, ism);\n\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n```\n这样就解决了节点以及命名空间的问题。这里是在RECEIVE，接收阶段处理了报文，且把报文放进了exchange中。\n因为拦截器不同阶段的数据流不同，到输出拦截器的时候是读不到输入的报文的，所以要存起来，便于后面取出来记录日志。\n\n(2) 获取Header信息：\n```\npackage hls.core.ws.interceptor;\n\nimport hls.core.ws.utils.SmUtils;\nimport org.apache.cxf.binding.soap.SoapHeader;\nimport org.apache.cxf.binding.soap.SoapMessage;\nimport org.apache.cxf.binding.soap.interceptor.AbstractSoapInterceptor;\nimport org.apache.cxf.binding.soap.saaj.SAAJInInterceptor;\nimport org.apache.cxf.interceptor.Fault;\nimport org.apache.cxf.phase.Phase;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\nimport org.apache.cxf.headers.Header;\n\nimport javax.xml.soap.SOAPException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Properties;\n\n/**\n * @Author: ever\n * @DATE: 2019-12-02 14:14\n * @Description 接口服务端流入拦截器(校验Header信息)\n */\npublic class ServiceInPreProtocolInterceptor extends AbstractSoapInterceptor {\n    protected static Logger log = LoggerFactory.getLogger(ServiceInPreProtocolInterceptor.class);\n\n    public ServiceInPreProtocolInterceptor() {\n        super(Phase.PRE_PROTOCOL);\n        getAfter().add(SAAJInInterceptor.class.getName());\n    }\n\n    private static String USER_NAME = \"USER_NAME\";\n    private static String PASSWORD  = \"PASSWORD\";\n\n\n    @Override\n    public void handleMessage(SoapMessage soapMessage) throws Fault {\n        // 校验头信息\n        System.out.println(\"开始验证用户信息！\");\n        List<Header> headers = soapMessage.getHeaders();\n        for (Header header : headers) {\n            SoapHeader soapHeader = (SoapHeader) header;\n            // 取出SOAP的Header元素\n            Element element = (Element) soapHeader.getObject();\n            log.info(\"ELEMENT =\" + element.toString());\n            // XMLUtils.printDOM(element);\n            NodeList userIdNodes = element.getElementsByTagName(\"qwe:username\");\n            NodeList pwdNodes = element.getElementsByTagName(\"qwe:password\");\n            if (userIdNodes.item(0) == null || pwdNodes.item(0) == null) {\n                SOAPException soapExc = new SOAPException(\"请在Header中提供完整的用户名、密码信息\");\n                throw new Fault(soapExc);\n            }\n            String userName = userIdNodes.item(0).getTextContent();\n            String password = pwdNodes.item(0).getTextContent();\n            log.info(\"############ 打印帐号信息 ##############\");\n            log.info(userIdNodes.item(0) + \"=\" + userName);\n            log.info(pwdNodes.item(0) + \"=\" + password);\n            log.info(\"############  ————————  ##############\");\n            // 用户名及密码使用SM3加密后的密文进行传输，此处判断源数据与加密数据\n            if (!SmUtils.verify(USER_NAME, userName) || !SmUtils.verify(PASSWORD, password)) {\n                //认证失败则抛出异常，停止继续操作\n                SOAPException soapExc = new SOAPException(\"请提供正确的用户名和密码！\");\n                throw new Fault(soapExc);\n            }\n        }\n    }\n}\n```\n可以对请求用户进行用户名、密码的校验\n\n#### 1.3. 输出阶段\n阶段名称|阶段功能描述\n--|:--:\nSETUP|Any set up for the following phases(设置阶段)\n(PRE/USER/POST)_LOGICAL|Processing of objects about to marshalled\nPREPARE_SEND|Opening of the connection(消息发送准备阶段，在该阶段创建Connection)\nPRE_STREAM|流准备阶段\nPRE_PROTOCOL|Misc protocol actions(协议准备阶段)\nWRITE|Writing of the protocol message, such as the SOAP Envelope.(写消息阶段)\nMARSHAL|Marshalling of the objects\n(USER/POST)_PROTOCOL|Processing of the protocol message\n(USER/POST)_STREAM|Processing of the byte level message(字节处理阶段，在该阶段把消息转为字节)\nSEND|消息发送\n\n### 1.4. 输出拦截器\n修改报文、记录日志：\n```\npackage hls.core.ws.interceptor;\n\nimport hls.core.ws.dto.HlsCusWsRequests;\nimport hls.core.ws.mapper.HlsCusWsRequestsMapper;\nimport org.apache.cxf.helpers.IOUtils;\nimport org.apache.cxf.interceptor.Fault;\nimport org.apache.cxf.io.CachedOutputStream;\nimport org.apache.cxf.message.Exchange;\nimport org.apache.cxf.message.Message;\nimport org.apache.cxf.phase.AbstractPhaseInterceptor;\nimport org.apache.cxf.phase.Phase;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Date;\n\n/**\n * @Author: ever\n * @DATE: 2019-12-02 14:14\n * @Description: 接口服务端流出拦截器(修改报文, 记录日志)\n */\npublic class ServiceOutPreStreamInterceptor extends AbstractPhaseInterceptor<Message> {\n    protected static Logger log = LoggerFactory.getLogger(ServiceOutPreStreamInterceptor.class);\n\n    @Autowired\n    private HlsCusWsRequestsMapper hlsCusWsRequestsMapper;\n\n    public ServiceOutPreStreamInterceptor() {\n        super(Phase.PRE_STREAM);\n    }\n\n    @Override\n    public void handleMessage(Message message) throws Fault {\n        try {\n            OutputStream os = message.getContent(OutputStream.class);\n\n            CachedStream cs = new CachedStream();\n\n            message.setContent(OutputStream.class, cs);\n\n            message.getInterceptorChain().doIntercept(message);\n\n            CachedOutputStream csnew = (CachedOutputStream) message.getContent(OutputStream.class);\n            InputStream in = csnew.getInputStream();\n\n            String xml = IOUtils.toString(in);\n            log.info(\"replaceBegin\" + xml);\n            Exchange exchange = message.getExchange();\n            exchange.put(\"output.content.origin\", xml);\n\n            // 记录日志\n            record(message);\n\n            xml = xml.replace(\"return\", \"qwerty:response\");//替换成你需要的格式\n            log.info(\"replaceAfter\" + xml);\n\n            //这里对xml做处理，处理完后同理，写回流中\n            IOUtils.copy(new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8)), os);\n\n            cs.close();\n            os.flush();\n\n            message.setContent(OutputStream.class, os);\n        } catch (Exception e) {\n            log.error(\"输入流解析错误 : \" + \"\\n\" + e);\n        }\n    }\n\n    /**\n     * 记录日志\n     */\n    private void record(Message message) {\n        Exchange exchange = message.getExchange();\n\n        HlsCusWsRequests hlsCusWsRequests = new HlsCusWsRequests();\n        hlsCusWsRequests.setRequestDate(new Date());\n        hlsCusWsRequests.setParameterType(\"soap message\");\n        hlsCusWsRequests.setRequestJson(exchange.get(\"input.content.origin\").toString() + \"\\n\" \n            + exchange.get(\"input.content\").toString());\n        hlsCusWsRequests.setResponseJson(exchange.get(\"output.content.origin\").toString());\n        hlsCusWsRequests.setRequestWsdlUrl(\"{http://qwerty.com}FunctionnameService\");\n        hlsCusWsRequests.setFunctionName(\"FunctionName\");\n        hlsCusWsRequestsMapper.insertPaymentRequest(hlsCusWsRequests);\n    }\n\n    private class CachedStream extends CachedOutputStream {\n\n        private CachedStream() {\n\n            super();\n\n        }\n\n        protected void doFlush() throws IOException {\n\n            currentStream.flush();\n\n        }\n\n        protected void doClose() throws IOException {\n\n        }\n\n        protected void onWrite() throws IOException {\n\n        }\n\n    }\n}\n\n```\n从exchange中取出请求报文，记录日志。\n## Z. 参考\n[1. cxf拦截器，实现对接收到的报文和发送出去的报文格式自定义](https://blog.csdn.net/zhaofuqiangmycomm/article/details/78702125)\n[2. CXF 入门：创建一个基于SOAPHeader的安全验证(CXF拦截器使用)](https://www.iteye.com/blog/jyao-1343722)\n[3. CXF实战之拦截器Interceptor(四)](https://blog.csdn.net/accountwcx/article/details/47102319)\n","source":"_posts/web-service-1.md","raw":"---\ntitle: web service -- spring + cxf 发布web service(2)\ndate: 2020-01-03 15:17:15\ntags: web service\n---\n\n这个项目的接口，断断续续做了3个月了，从一开始的一脸懵逼，到现在的一知半解。。。\n<!--more-->\n## 一、问题描述\n项目上是用spring框架加上cxf来发布webservice的，啥都有，就配置一下，再写java就行。\n但是，仅仅发布，客户大人是不会满意的，他们对这个报文格式，是有要求滴。\n归纳为以下几点:\n\n### 1. 命名空间\n以系统简称作为命名空间，并且要求body下每个节点前面都有命名空间前缀\n那么我遇到了什么问题呢\n首先我们这个系统简称有点长，有6个字母，生成的报文前缀直接给我截取成了3个字母。。。\n其次就是每个节点前都要加命名空间前缀，让我好一番折腾\n\n### 2. 节点要求\nBody中第一层应使用输入数据模型根节点信息，即服务方法名+\"Request\"。\n而我生成的第一层永远是方法名，第二层才是数据模型。\n\n### 3. Header\n服务请求报文在Header中添加服务安全验证信息\n想校验安全信息，找不到Header。。。\n\n每每回想起那审查后的十大问题，我都觉得要是到时候报文不严格按照这个来，都对不起我这么久的研究\n\n## 二、解决方法\n先上报文，要求是这样的\n```\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:qwerty=\"http://qwerty.com\">\n   <soapenv:Header>\n      <qwerty:security>\n         <qwerty:username>?</qwerty:username>\n         <qwerty:password>?</qwerty:password>\n      </qwerty:security>\n   </soapenv:Header>\n   <soapenv:Body>\n\t <qwerty:functionNameRequest>\n\t    <!--Optional:-->\n\t    <qwerty:number>?</qwerty:number>\n\t    <!--Optional:-->\n\t    <qwerty:id>?</qwerty:id>\n\t    <!--Optional:-->\n         <qwerty:date>?</qwerty:date>\n\t </qwerty:functionNameRequest>\n   </soapenv:Body>\n</soapenv:Envelope>\n```\n我只能生成这样滴\n```\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:qwe=\"http://qwerty.com\">\n   <soapenv:Header>\n      <qwe:security>\n         <qwe:username>?</qwe:username>\n         <qwe:password>?</qwe:password>\n      </qwe:security>\n   </soapenv:Header>\n   <soapenv:Body>\n      <qwe:functionName>\n         <qwe:functionNameRequest>\n            <!--Optional:-->\n            <qwe:paymentReqNumber>111</qwe:paymentReqNumber>\n            <!--Optional:-->\n            <qwe:contractId>?</qwe:contractId>\n            <!--Optional:-->\n            <qwe:applyPayDate>?</qwe:applyPayDate>\n         </qwe:functionNameRequest>\n      </qwe:functionName>\n   </soapenv:Body>\n</soapenv:Envelope>\n```\n先说说这样婶儿的是怎么生成的\n### 1. 命名空间\n\n#### 1.1. 在接口方法上加注释(这样就会有xmlns，security，request前面会有命名空间)\n@WebService(targetNamespace = \"http://qwerty.com\")\n#### 1.2. 在方法参数上加注释(这样方法名前面就会有命名空间)\n@XmlElement(required = true, namespace = \"http://qwerty.com\") @WebParam(name = \"functionNameRequest\", partName = \"functionNameRequest\")\n                                               FunctionNameRequest functionNameRequest\n#### 1.3. 要在对象每个属性前面加命名空间前缀有两个方法\n##### 1.3.1. 在属性的get方法上加\n@XmlElement(namespace = \"http://qwerty.com\")\n但是必须每个都加，才能实现每个节点都有\n##### 1.3.2. 在FunctionNameRequest对象目录下新增文件 package-info.java\n```\n@XmlSchema(\n        namespace = \"http://qwerty.com\",\n        elementFormDefault = XmlNsForm.QUALIFIED,\n        xmlns = {\n                @XmlNs(prefix = \"qwerty\", namespaceURI = \"http://qwerty.com\")\n        }\n)\npackage hls.core.ws.dto;\n\nimport javax.xml.bind.annotation.XmlNs;\nimport javax.xml.bind.annotation.XmlNsForm;\nimport javax.xml.bind.annotation.XmlSchema;\n```\n\n### 2. 节点要求\n。。。失败了\n\n### 3. Header\n在请求接口方法中添加 \n@XmlElement(required = true) @WebParam(name = \"security\", header = true) InHeaderMessage inHeaderMessage\n加了@XmlElement(required = true)就不会有被注释了的 Optional: 了。\n\n## 三、拦截器\n最后来说说解决一切烦恼的拦截器吧。\n\n### 1. 定义\n在 [web service -- spring + cxf 发布web service(1)](http://localhost:4000/2019/11/13/web-service/)\n中，已经说过发布接口需要配置cxf-beans.xml，拦截器也在这里配置：\n```\n    <bean id=\"inInterceptor\" class=\"hls.core.ws.interceptor.ServiceInReceiveInterceptor\"/>\n    <bean id=\"outInterceptor\" class=\"hls.core.ws.interceptor.ServiceOutPreStreamInterceptor\"/>\n    <jaxws:server id=\"wsFunctionName\" serviceClass=\"hls.core.ws.service.FunctionName\"\n                  address=\"/FunctionName\">\n        <jaxws:serviceBean>\n            <bean class=\"hls.core.ws.service.impl.FunctionNameImpl\"/>\n        </jaxws:serviceBean>\n        <jaxws:inInterceptors>\n            <ref bean=\"inInterceptor\"/>\n        </jaxws:inInterceptors>\n        <jaxws:outInterceptors>\n            <ref bean=\"outInterceptor\"/>\n        </jaxws:outInterceptors>\n    </jaxws:server>\n```\n这里配置了两个拦截器，一个输入拦截器，一个输出拦截器。\n\n#### 1.1. 输入阶段\n阶段名称|阶段功能描述\n--|:--:\nRECEIVE|Transport level processing(接收阶段，传输层处理) \n(PRE/USER/POST)_STREAM|Stream level processing/transformations(流处理/转换阶段)\nREAD|This is where header reading typically occurs(SOAPHeader读取) \n(PRE/USER/POST)_PROTOCOL| Protocol processing, such as JAX-WS SOAP handlers(协议处理阶段，例如JAX-WS的Handler处理)\nUNMARSHAL|Unmarshalling of the request(SOAP请求解码阶段)\n(PRE/USER/POST)_LOGICAL|Processing of the umarshalled request(SOAP请求解码处理阶段)\nPRE_INVOKE|Pre invocation actions(调用业务处理之前进入该阶段)\nINVOKE|Invocation of the service(调用业务阶段)\nPOST_INVOKE|Invocation of the outgoing chain if there is one(提交业务处理结果，并触发输入连接器)\n\n#### 1.2. 输入拦截器\n(1) 修改报文：\n```\npackage hls.core.ws.interceptor;\n\nimport org.apache.cxf.helpers.IOUtils;\nimport org.apache.cxf.interceptor.Fault;\nimport org.apache.cxf.message.Exchange;\nimport org.apache.cxf.message.Message;\nimport org.apache.cxf.phase.AbstractPhaseInterceptor;\nimport org.apache.cxf.phase.Phase;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\n\n/**\n * @Author ever\n * @DATE 2019-12-02 14:14\n * @Description 接口服务端流入拦截器(修改请求报文)\n */\npublic class ServiceInReceiveInterceptor extends AbstractPhaseInterceptor<Message> {\n    protected static Logger log = LoggerFactory.getLogger(ServiceInReceiveInterceptor.class);\n\n    public ServiceInReceiveInterceptor() {\n        super(Phase.RECEIVE);\n    }\n\n    @Override\n    public void handleMessage(Message message) throws Fault {\n        InputStream is = message.getContent(InputStream.class);\n        if (is != null) {\n            try {\n                String str = IOUtils.toString(is);\n                // 原请求报文\n                Exchange exchange = message.getExchange();\n                exchange.put(\"input.content.origin\", str);\n                log.info(\"====> request xml=\\r\\n\" + str);\n\n                // 修改报文格式\n                str = str.replace(\"<qwerty:functionName>\", \n                \"<qwerty:functionName>\\n\" +\n                        \"      <qwerty:functionNameRequest>\")\n                        .replace(\"</qwerty:functionNameRequest>\", \n                        \"</qwerty:functionNameRequest>\\n\" +\n                        \"</qwerty:functionNameRequest>\\n\" +\n                                \"      </qwerty:functionName>\")\n                        .replace(\"qwerty\", \"qwe\")\n                        .replace(\"http://qwe.com\", \"http://qwerty.com\");\n\n                // 替换后的报文\n                log.info(\"====> replaced xml=\\r\\n\" + str);\n                exchange.put(\"input.content\", str);\n\n                InputStream ism = new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8));\n                message.setContent(InputStream.class, ism);\n\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n```\n这样就解决了节点以及命名空间的问题。这里是在RECEIVE，接收阶段处理了报文，且把报文放进了exchange中。\n因为拦截器不同阶段的数据流不同，到输出拦截器的时候是读不到输入的报文的，所以要存起来，便于后面取出来记录日志。\n\n(2) 获取Header信息：\n```\npackage hls.core.ws.interceptor;\n\nimport hls.core.ws.utils.SmUtils;\nimport org.apache.cxf.binding.soap.SoapHeader;\nimport org.apache.cxf.binding.soap.SoapMessage;\nimport org.apache.cxf.binding.soap.interceptor.AbstractSoapInterceptor;\nimport org.apache.cxf.binding.soap.saaj.SAAJInInterceptor;\nimport org.apache.cxf.interceptor.Fault;\nimport org.apache.cxf.phase.Phase;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\nimport org.apache.cxf.headers.Header;\n\nimport javax.xml.soap.SOAPException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Properties;\n\n/**\n * @Author: ever\n * @DATE: 2019-12-02 14:14\n * @Description 接口服务端流入拦截器(校验Header信息)\n */\npublic class ServiceInPreProtocolInterceptor extends AbstractSoapInterceptor {\n    protected static Logger log = LoggerFactory.getLogger(ServiceInPreProtocolInterceptor.class);\n\n    public ServiceInPreProtocolInterceptor() {\n        super(Phase.PRE_PROTOCOL);\n        getAfter().add(SAAJInInterceptor.class.getName());\n    }\n\n    private static String USER_NAME = \"USER_NAME\";\n    private static String PASSWORD  = \"PASSWORD\";\n\n\n    @Override\n    public void handleMessage(SoapMessage soapMessage) throws Fault {\n        // 校验头信息\n        System.out.println(\"开始验证用户信息！\");\n        List<Header> headers = soapMessage.getHeaders();\n        for (Header header : headers) {\n            SoapHeader soapHeader = (SoapHeader) header;\n            // 取出SOAP的Header元素\n            Element element = (Element) soapHeader.getObject();\n            log.info(\"ELEMENT =\" + element.toString());\n            // XMLUtils.printDOM(element);\n            NodeList userIdNodes = element.getElementsByTagName(\"qwe:username\");\n            NodeList pwdNodes = element.getElementsByTagName(\"qwe:password\");\n            if (userIdNodes.item(0) == null || pwdNodes.item(0) == null) {\n                SOAPException soapExc = new SOAPException(\"请在Header中提供完整的用户名、密码信息\");\n                throw new Fault(soapExc);\n            }\n            String userName = userIdNodes.item(0).getTextContent();\n            String password = pwdNodes.item(0).getTextContent();\n            log.info(\"############ 打印帐号信息 ##############\");\n            log.info(userIdNodes.item(0) + \"=\" + userName);\n            log.info(pwdNodes.item(0) + \"=\" + password);\n            log.info(\"############  ————————  ##############\");\n            // 用户名及密码使用SM3加密后的密文进行传输，此处判断源数据与加密数据\n            if (!SmUtils.verify(USER_NAME, userName) || !SmUtils.verify(PASSWORD, password)) {\n                //认证失败则抛出异常，停止继续操作\n                SOAPException soapExc = new SOAPException(\"请提供正确的用户名和密码！\");\n                throw new Fault(soapExc);\n            }\n        }\n    }\n}\n```\n可以对请求用户进行用户名、密码的校验\n\n#### 1.3. 输出阶段\n阶段名称|阶段功能描述\n--|:--:\nSETUP|Any set up for the following phases(设置阶段)\n(PRE/USER/POST)_LOGICAL|Processing of objects about to marshalled\nPREPARE_SEND|Opening of the connection(消息发送准备阶段，在该阶段创建Connection)\nPRE_STREAM|流准备阶段\nPRE_PROTOCOL|Misc protocol actions(协议准备阶段)\nWRITE|Writing of the protocol message, such as the SOAP Envelope.(写消息阶段)\nMARSHAL|Marshalling of the objects\n(USER/POST)_PROTOCOL|Processing of the protocol message\n(USER/POST)_STREAM|Processing of the byte level message(字节处理阶段，在该阶段把消息转为字节)\nSEND|消息发送\n\n### 1.4. 输出拦截器\n修改报文、记录日志：\n```\npackage hls.core.ws.interceptor;\n\nimport hls.core.ws.dto.HlsCusWsRequests;\nimport hls.core.ws.mapper.HlsCusWsRequestsMapper;\nimport org.apache.cxf.helpers.IOUtils;\nimport org.apache.cxf.interceptor.Fault;\nimport org.apache.cxf.io.CachedOutputStream;\nimport org.apache.cxf.message.Exchange;\nimport org.apache.cxf.message.Message;\nimport org.apache.cxf.phase.AbstractPhaseInterceptor;\nimport org.apache.cxf.phase.Phase;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Date;\n\n/**\n * @Author: ever\n * @DATE: 2019-12-02 14:14\n * @Description: 接口服务端流出拦截器(修改报文, 记录日志)\n */\npublic class ServiceOutPreStreamInterceptor extends AbstractPhaseInterceptor<Message> {\n    protected static Logger log = LoggerFactory.getLogger(ServiceOutPreStreamInterceptor.class);\n\n    @Autowired\n    private HlsCusWsRequestsMapper hlsCusWsRequestsMapper;\n\n    public ServiceOutPreStreamInterceptor() {\n        super(Phase.PRE_STREAM);\n    }\n\n    @Override\n    public void handleMessage(Message message) throws Fault {\n        try {\n            OutputStream os = message.getContent(OutputStream.class);\n\n            CachedStream cs = new CachedStream();\n\n            message.setContent(OutputStream.class, cs);\n\n            message.getInterceptorChain().doIntercept(message);\n\n            CachedOutputStream csnew = (CachedOutputStream) message.getContent(OutputStream.class);\n            InputStream in = csnew.getInputStream();\n\n            String xml = IOUtils.toString(in);\n            log.info(\"replaceBegin\" + xml);\n            Exchange exchange = message.getExchange();\n            exchange.put(\"output.content.origin\", xml);\n\n            // 记录日志\n            record(message);\n\n            xml = xml.replace(\"return\", \"qwerty:response\");//替换成你需要的格式\n            log.info(\"replaceAfter\" + xml);\n\n            //这里对xml做处理，处理完后同理，写回流中\n            IOUtils.copy(new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8)), os);\n\n            cs.close();\n            os.flush();\n\n            message.setContent(OutputStream.class, os);\n        } catch (Exception e) {\n            log.error(\"输入流解析错误 : \" + \"\\n\" + e);\n        }\n    }\n\n    /**\n     * 记录日志\n     */\n    private void record(Message message) {\n        Exchange exchange = message.getExchange();\n\n        HlsCusWsRequests hlsCusWsRequests = new HlsCusWsRequests();\n        hlsCusWsRequests.setRequestDate(new Date());\n        hlsCusWsRequests.setParameterType(\"soap message\");\n        hlsCusWsRequests.setRequestJson(exchange.get(\"input.content.origin\").toString() + \"\\n\" \n            + exchange.get(\"input.content\").toString());\n        hlsCusWsRequests.setResponseJson(exchange.get(\"output.content.origin\").toString());\n        hlsCusWsRequests.setRequestWsdlUrl(\"{http://qwerty.com}FunctionnameService\");\n        hlsCusWsRequests.setFunctionName(\"FunctionName\");\n        hlsCusWsRequestsMapper.insertPaymentRequest(hlsCusWsRequests);\n    }\n\n    private class CachedStream extends CachedOutputStream {\n\n        private CachedStream() {\n\n            super();\n\n        }\n\n        protected void doFlush() throws IOException {\n\n            currentStream.flush();\n\n        }\n\n        protected void doClose() throws IOException {\n\n        }\n\n        protected void onWrite() throws IOException {\n\n        }\n\n    }\n}\n\n```\n从exchange中取出请求报文，记录日志。\n## Z. 参考\n[1. cxf拦截器，实现对接收到的报文和发送出去的报文格式自定义](https://blog.csdn.net/zhaofuqiangmycomm/article/details/78702125)\n[2. CXF 入门：创建一个基于SOAPHeader的安全验证(CXF拦截器使用)](https://www.iteye.com/blog/jyao-1343722)\n[3. CXF实战之拦截器Interceptor(四)](https://blog.csdn.net/accountwcx/article/details/47102319)\n","slug":"web-service-1","published":1,"updated":"2020-01-03T07:17:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpvf000w40s6f77070yg","content":"<p>这个项目的接口，断断续续做了3个月了，从一开始的一脸懵逼，到现在的一知半解。。。</p>\n<a id=\"more\"></a>\n<h2 id=\"一、问题描述\"><a href=\"#一、问题描述\" class=\"headerlink\" title=\"一、问题描述\"></a>一、问题描述</h2><p>项目上是用spring框架加上cxf来发布webservice的，啥都有，就配置一下，再写java就行。<br>但是，仅仅发布，客户大人是不会满意的，他们对这个报文格式，是有要求滴。<br>归纳为以下几点:</p>\n<h3 id=\"1-命名空间\"><a href=\"#1-命名空间\" class=\"headerlink\" title=\"1. 命名空间\"></a>1. 命名空间</h3><p>以系统简称作为命名空间，并且要求body下每个节点前面都有命名空间前缀<br>那么我遇到了什么问题呢<br>首先我们这个系统简称有点长，有6个字母，生成的报文前缀直接给我截取成了3个字母。。。<br>其次就是每个节点前都要加命名空间前缀，让我好一番折腾</p>\n<h3 id=\"2-节点要求\"><a href=\"#2-节点要求\" class=\"headerlink\" title=\"2. 节点要求\"></a>2. 节点要求</h3><p>Body中第一层应使用输入数据模型根节点信息，即服务方法名+”Request”。<br>而我生成的第一层永远是方法名，第二层才是数据模型。</p>\n<h3 id=\"3-Header\"><a href=\"#3-Header\" class=\"headerlink\" title=\"3. Header\"></a>3. Header</h3><p>服务请求报文在Header中添加服务安全验证信息<br>想校验安全信息，找不到Header。。。</p>\n<p>每每回想起那审查后的十大问题，我都觉得要是到时候报文不严格按照这个来，都对不起我这么久的研究</p>\n<h2 id=\"二、解决方法\"><a href=\"#二、解决方法\" class=\"headerlink\" title=\"二、解决方法\"></a>二、解决方法</h2><p>先上报文，要求是这样的</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;soapenv:Envelope xmlns:soapenv&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot; xmlns:qwerty&#x3D;&quot;http:&#x2F;&#x2F;qwerty.com&quot;&gt;</span><br><span class=\"line\">   &lt;soapenv:Header&gt;</span><br><span class=\"line\">      &lt;qwerty:security&gt;</span><br><span class=\"line\">         &lt;qwerty:username&gt;?&lt;&#x2F;qwerty:username&gt;</span><br><span class=\"line\">         &lt;qwerty:password&gt;?&lt;&#x2F;qwerty:password&gt;</span><br><span class=\"line\">      &lt;&#x2F;qwerty:security&gt;</span><br><span class=\"line\">   &lt;&#x2F;soapenv:Header&gt;</span><br><span class=\"line\">   &lt;soapenv:Body&gt;</span><br><span class=\"line\">\t &lt;qwerty:functionNameRequest&gt;</span><br><span class=\"line\">\t    &lt;!--Optional:--&gt;</span><br><span class=\"line\">\t    &lt;qwerty:number&gt;?&lt;&#x2F;qwerty:number&gt;</span><br><span class=\"line\">\t    &lt;!--Optional:--&gt;</span><br><span class=\"line\">\t    &lt;qwerty:id&gt;?&lt;&#x2F;qwerty:id&gt;</span><br><span class=\"line\">\t    &lt;!--Optional:--&gt;</span><br><span class=\"line\">         &lt;qwerty:date&gt;?&lt;&#x2F;qwerty:date&gt;</span><br><span class=\"line\">\t &lt;&#x2F;qwerty:functionNameRequest&gt;</span><br><span class=\"line\">   &lt;&#x2F;soapenv:Body&gt;</span><br><span class=\"line\">&lt;&#x2F;soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure></div>\n<p>我只能生成这样滴</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;soapenv:Envelope xmlns:soapenv&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot; xmlns:qwe&#x3D;&quot;http:&#x2F;&#x2F;qwerty.com&quot;&gt;</span><br><span class=\"line\">   &lt;soapenv:Header&gt;</span><br><span class=\"line\">      &lt;qwe:security&gt;</span><br><span class=\"line\">         &lt;qwe:username&gt;?&lt;&#x2F;qwe:username&gt;</span><br><span class=\"line\">         &lt;qwe:password&gt;?&lt;&#x2F;qwe:password&gt;</span><br><span class=\"line\">      &lt;&#x2F;qwe:security&gt;</span><br><span class=\"line\">   &lt;&#x2F;soapenv:Header&gt;</span><br><span class=\"line\">   &lt;soapenv:Body&gt;</span><br><span class=\"line\">      &lt;qwe:functionName&gt;</span><br><span class=\"line\">         &lt;qwe:functionNameRequest&gt;</span><br><span class=\"line\">            &lt;!--Optional:--&gt;</span><br><span class=\"line\">            &lt;qwe:paymentReqNumber&gt;111&lt;&#x2F;qwe:paymentReqNumber&gt;</span><br><span class=\"line\">            &lt;!--Optional:--&gt;</span><br><span class=\"line\">            &lt;qwe:contractId&gt;?&lt;&#x2F;qwe:contractId&gt;</span><br><span class=\"line\">            &lt;!--Optional:--&gt;</span><br><span class=\"line\">            &lt;qwe:applyPayDate&gt;?&lt;&#x2F;qwe:applyPayDate&gt;</span><br><span class=\"line\">         &lt;&#x2F;qwe:functionNameRequest&gt;</span><br><span class=\"line\">      &lt;&#x2F;qwe:functionName&gt;</span><br><span class=\"line\">   &lt;&#x2F;soapenv:Body&gt;</span><br><span class=\"line\">&lt;&#x2F;soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure></div>\n<p>先说说这样婶儿的是怎么生成的</p>\n<h3 id=\"1-命名空间-1\"><a href=\"#1-命名空间-1\" class=\"headerlink\" title=\"1. 命名空间\"></a>1. 命名空间</h3><h4 id=\"1-1-在接口方法上加注释-这样就会有xmlns，security，request前面会有命名空间\"><a href=\"#1-1-在接口方法上加注释-这样就会有xmlns，security，request前面会有命名空间\" class=\"headerlink\" title=\"1.1. 在接口方法上加注释(这样就会有xmlns，security，request前面会有命名空间)\"></a>1.1. 在接口方法上加注释(这样就会有xmlns，security，request前面会有命名空间)</h4><p>@WebService(targetNamespace = “<a href=\"http://qwerty.com&quot;\" target=\"_blank\" rel=\"noopener\">http://qwerty.com&quot;</a>)</p>\n<h4 id=\"1-2-在方法参数上加注释-这样方法名前面就会有命名空间\"><a href=\"#1-2-在方法参数上加注释-这样方法名前面就会有命名空间\" class=\"headerlink\" title=\"1.2. 在方法参数上加注释(这样方法名前面就会有命名空间)\"></a>1.2. 在方法参数上加注释(这样方法名前面就会有命名空间)</h4><p>@XmlElement(required = true, namespace = “<a href=\"http://qwerty.com&quot;\" target=\"_blank\" rel=\"noopener\">http://qwerty.com&quot;</a>) @WebParam(name = “functionNameRequest”, partName = “functionNameRequest”)<br>                                               FunctionNameRequest functionNameRequest</p>\n<h4 id=\"1-3-要在对象每个属性前面加命名空间前缀有两个方法\"><a href=\"#1-3-要在对象每个属性前面加命名空间前缀有两个方法\" class=\"headerlink\" title=\"1.3. 要在对象每个属性前面加命名空间前缀有两个方法\"></a>1.3. 要在对象每个属性前面加命名空间前缀有两个方法</h4><h5 id=\"1-3-1-在属性的get方法上加\"><a href=\"#1-3-1-在属性的get方法上加\" class=\"headerlink\" title=\"1.3.1. 在属性的get方法上加\"></a>1.3.1. 在属性的get方法上加</h5><p>@XmlElement(namespace = “<a href=\"http://qwerty.com&quot;\" target=\"_blank\" rel=\"noopener\">http://qwerty.com&quot;</a>)<br>但是必须每个都加，才能实现每个节点都有</p>\n<h5 id=\"1-3-2-在FunctionNameRequest对象目录下新增文件-package-info-java\"><a href=\"#1-3-2-在FunctionNameRequest对象目录下新增文件-package-info-java\" class=\"headerlink\" title=\"1.3.2. 在FunctionNameRequest对象目录下新增文件 package-info.java\"></a>1.3.2. 在FunctionNameRequest对象目录下新增文件 package-info.java</h5><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@XmlSchema(</span><br><span class=\"line\">        namespace &#x3D; &quot;http:&#x2F;&#x2F;qwerty.com&quot;,</span><br><span class=\"line\">        elementFormDefault &#x3D; XmlNsForm.QUALIFIED,</span><br><span class=\"line\">        xmlns &#x3D; &#123;</span><br><span class=\"line\">                @XmlNs(prefix &#x3D; &quot;qwerty&quot;, namespaceURI &#x3D; &quot;http:&#x2F;&#x2F;qwerty.com&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">package hls.core.ws.dto;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.xml.bind.annotation.XmlNs;</span><br><span class=\"line\">import javax.xml.bind.annotation.XmlNsForm;</span><br><span class=\"line\">import javax.xml.bind.annotation.XmlSchema;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-节点要求-1\"><a href=\"#2-节点要求-1\" class=\"headerlink\" title=\"2. 节点要求\"></a>2. 节点要求</h3><p>。。。失败了</p>\n<h3 id=\"3-Header-1\"><a href=\"#3-Header-1\" class=\"headerlink\" title=\"3. Header\"></a>3. Header</h3><p>在请求接口方法中添加<br>@XmlElement(required = true) @WebParam(name = “security”, header = true) InHeaderMessage inHeaderMessage<br>加了@XmlElement(required = true)就不会有被注释了的 Optional: 了。</p>\n<h2 id=\"三、拦截器\"><a href=\"#三、拦截器\" class=\"headerlink\" title=\"三、拦截器\"></a>三、拦截器</h2><p>最后来说说解决一切烦恼的拦截器吧。</p>\n<h3 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1. 定义\"></a>1. 定义</h3><p>在 <a href=\"http://localhost:4000/2019/11/13/web-service/\" target=\"_blank\" rel=\"noopener\">web service – spring + cxf 发布web service(1)</a><br>中，已经说过发布接口需要配置cxf-beans.xml，拦截器也在这里配置：</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id&#x3D;&quot;inInterceptor&quot; class&#x3D;&quot;hls.core.ws.interceptor.ServiceInReceiveInterceptor&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;bean id&#x3D;&quot;outInterceptor&quot; class&#x3D;&quot;hls.core.ws.interceptor.ServiceOutPreStreamInterceptor&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;jaxws:server id&#x3D;&quot;wsFunctionName&quot; serviceClass&#x3D;&quot;hls.core.ws.service.FunctionName&quot;</span><br><span class=\"line\">              address&#x3D;&quot;&#x2F;FunctionName&quot;&gt;</span><br><span class=\"line\">    &lt;jaxws:serviceBean&gt;</span><br><span class=\"line\">        &lt;bean class&#x3D;&quot;hls.core.ws.service.impl.FunctionNameImpl&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;jaxws:serviceBean&gt;</span><br><span class=\"line\">    &lt;jaxws:inInterceptors&gt;</span><br><span class=\"line\">        &lt;ref bean&#x3D;&quot;inInterceptor&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;jaxws:inInterceptors&gt;</span><br><span class=\"line\">    &lt;jaxws:outInterceptors&gt;</span><br><span class=\"line\">        &lt;ref bean&#x3D;&quot;outInterceptor&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;jaxws:outInterceptors&gt;</span><br><span class=\"line\">&lt;&#x2F;jaxws:server&gt;</span><br></pre></td></tr></table></figure></div>\n<p>这里配置了两个拦截器，一个输入拦截器，一个输出拦截器。</p>\n<h4 id=\"1-1-输入阶段\"><a href=\"#1-1-输入阶段\" class=\"headerlink\" title=\"1.1. 输入阶段\"></a>1.1. 输入阶段</h4><table>\n<thead>\n<tr>\n<th>阶段名称</th>\n<th align=\"center\">阶段功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>RECEIVE</td>\n<td align=\"center\">Transport level processing(接收阶段，传输层处理)</td>\n</tr>\n<tr>\n<td>(PRE/USER/POST)_STREAM</td>\n<td align=\"center\">Stream level processing/transformations(流处理/转换阶段)</td>\n</tr>\n<tr>\n<td>READ</td>\n<td align=\"center\">This is where header reading typically occurs(SOAPHeader读取)</td>\n</tr>\n<tr>\n<td>(PRE/USER/POST)_PROTOCOL</td>\n<td align=\"center\">Protocol processing, such as JAX-WS SOAP handlers(协议处理阶段，例如JAX-WS的Handler处理)</td>\n</tr>\n<tr>\n<td>UNMARSHAL</td>\n<td align=\"center\">Unmarshalling of the request(SOAP请求解码阶段)</td>\n</tr>\n<tr>\n<td>(PRE/USER/POST)_LOGICAL</td>\n<td align=\"center\">Processing of the umarshalled request(SOAP请求解码处理阶段)</td>\n</tr>\n<tr>\n<td>PRE_INVOKE</td>\n<td align=\"center\">Pre invocation actions(调用业务处理之前进入该阶段)</td>\n</tr>\n<tr>\n<td>INVOKE</td>\n<td align=\"center\">Invocation of the service(调用业务阶段)</td>\n</tr>\n<tr>\n<td>POST_INVOKE</td>\n<td align=\"center\">Invocation of the outgoing chain if there is one(提交业务处理结果，并触发输入连接器)</td>\n</tr>\n</tbody></table>\n<h4 id=\"1-2-输入拦截器\"><a href=\"#1-2-输入拦截器\" class=\"headerlink\" title=\"1.2. 输入拦截器\"></a>1.2. 输入拦截器</h4><p>(1) 修改报文：</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package hls.core.ws.interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.cxf.helpers.IOUtils;</span><br><span class=\"line\">import org.apache.cxf.interceptor.Fault;</span><br><span class=\"line\">import org.apache.cxf.message.Exchange;</span><br><span class=\"line\">import org.apache.cxf.message.Message;</span><br><span class=\"line\">import org.apache.cxf.phase.AbstractPhaseInterceptor;</span><br><span class=\"line\">import org.apache.cxf.phase.Phase;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.ByteArrayInputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.nio.charset.StandardCharsets;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @Author ever</span><br><span class=\"line\"> * @DATE 2019-12-02 14:14</span><br><span class=\"line\"> * @Description 接口服务端流入拦截器(修改请求报文)</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class ServiceInReceiveInterceptor extends AbstractPhaseInterceptor&lt;Message&gt; &#123;</span><br><span class=\"line\">    protected static Logger log &#x3D; LoggerFactory.getLogger(ServiceInReceiveInterceptor.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    public ServiceInReceiveInterceptor() &#123;</span><br><span class=\"line\">        super(Phase.RECEIVE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handleMessage(Message message) throws Fault &#123;</span><br><span class=\"line\">        InputStream is &#x3D; message.getContent(InputStream.class);</span><br><span class=\"line\">        if (is !&#x3D; null) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                String str &#x3D; IOUtils.toString(is);</span><br><span class=\"line\">                &#x2F;&#x2F; 原请求报文</span><br><span class=\"line\">                Exchange exchange &#x3D; message.getExchange();</span><br><span class=\"line\">                exchange.put(&quot;input.content.origin&quot;, str);</span><br><span class=\"line\">                log.info(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&gt; request xml&#x3D;\\r\\n&quot; + str);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#x2F;&#x2F; 修改报文格式</span><br><span class=\"line\">                str &#x3D; str.replace(&quot;&lt;qwerty:functionName&gt;&quot;, </span><br><span class=\"line\">                &quot;&lt;qwerty:functionName&gt;\\n&quot; +</span><br><span class=\"line\">                        &quot;      &lt;qwerty:functionNameRequest&gt;&quot;)</span><br><span class=\"line\">                        .replace(&quot;&lt;&#x2F;qwerty:functionNameRequest&gt;&quot;, </span><br><span class=\"line\">                        &quot;&lt;&#x2F;qwerty:functionNameRequest&gt;\\n&quot; +</span><br><span class=\"line\">                        &quot;&lt;&#x2F;qwerty:functionNameRequest&gt;\\n&quot; +</span><br><span class=\"line\">                                &quot;      &lt;&#x2F;qwerty:functionName&gt;&quot;)</span><br><span class=\"line\">                        .replace(&quot;qwerty&quot;, &quot;qwe&quot;)</span><br><span class=\"line\">                        .replace(&quot;http:&#x2F;&#x2F;qwe.com&quot;, &quot;http:&#x2F;&#x2F;qwerty.com&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#x2F;&#x2F; 替换后的报文</span><br><span class=\"line\">                log.info(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&gt; replaced xml&#x3D;\\r\\n&quot; + str);</span><br><span class=\"line\">                exchange.put(&quot;input.content&quot;, str);</span><br><span class=\"line\"></span><br><span class=\"line\">                InputStream ism &#x3D; new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">                message.setContent(InputStream.class, ism);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>这样就解决了节点以及命名空间的问题。这里是在RECEIVE，接收阶段处理了报文，且把报文放进了exchange中。<br>因为拦截器不同阶段的数据流不同，到输出拦截器的时候是读不到输入的报文的，所以要存起来，便于后面取出来记录日志。</p>\n<p>(2) 获取Header信息：</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package hls.core.ws.interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">import hls.core.ws.utils.SmUtils;</span><br><span class=\"line\">import org.apache.cxf.binding.soap.SoapHeader;</span><br><span class=\"line\">import org.apache.cxf.binding.soap.SoapMessage;</span><br><span class=\"line\">import org.apache.cxf.binding.soap.interceptor.AbstractSoapInterceptor;</span><br><span class=\"line\">import org.apache.cxf.binding.soap.saaj.SAAJInInterceptor;</span><br><span class=\"line\">import org.apache.cxf.interceptor.Fault;</span><br><span class=\"line\">import org.apache.cxf.phase.Phase;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\">import org.w3c.dom.Element;</span><br><span class=\"line\">import org.w3c.dom.NodeList;</span><br><span class=\"line\">import org.apache.cxf.headers.Header;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.xml.soap.SOAPException;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @Author: ever</span><br><span class=\"line\"> * @DATE: 2019-12-02 14:14</span><br><span class=\"line\"> * @Description 接口服务端流入拦截器(校验Header信息)</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class ServiceInPreProtocolInterceptor extends AbstractSoapInterceptor &#123;</span><br><span class=\"line\">    protected static Logger log &#x3D; LoggerFactory.getLogger(ServiceInPreProtocolInterceptor.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    public ServiceInPreProtocolInterceptor() &#123;</span><br><span class=\"line\">        super(Phase.PRE_PROTOCOL);</span><br><span class=\"line\">        getAfter().add(SAAJInInterceptor.class.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static String USER_NAME &#x3D; &quot;USER_NAME&quot;;</span><br><span class=\"line\">    private static String PASSWORD  &#x3D; &quot;PASSWORD&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handleMessage(SoapMessage soapMessage) throws Fault &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 校验头信息</span><br><span class=\"line\">        System.out.println(&quot;开始验证用户信息！&quot;);</span><br><span class=\"line\">        List&lt;Header&gt; headers &#x3D; soapMessage.getHeaders();</span><br><span class=\"line\">        for (Header header : headers) &#123;</span><br><span class=\"line\">            SoapHeader soapHeader &#x3D; (SoapHeader) header;</span><br><span class=\"line\">            &#x2F;&#x2F; 取出SOAP的Header元素</span><br><span class=\"line\">            Element element &#x3D; (Element) soapHeader.getObject();</span><br><span class=\"line\">            log.info(&quot;ELEMENT &#x3D;&quot; + element.toString());</span><br><span class=\"line\">            &#x2F;&#x2F; XMLUtils.printDOM(element);</span><br><span class=\"line\">            NodeList userIdNodes &#x3D; element.getElementsByTagName(&quot;qwe:username&quot;);</span><br><span class=\"line\">            NodeList pwdNodes &#x3D; element.getElementsByTagName(&quot;qwe:password&quot;);</span><br><span class=\"line\">            if (userIdNodes.item(0) &#x3D;&#x3D; null || pwdNodes.item(0) &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">                SOAPException soapExc &#x3D; new SOAPException(&quot;请在Header中提供完整的用户名、密码信息&quot;);</span><br><span class=\"line\">                throw new Fault(soapExc);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String userName &#x3D; userIdNodes.item(0).getTextContent();</span><br><span class=\"line\">            String password &#x3D; pwdNodes.item(0).getTextContent();</span><br><span class=\"line\">            log.info(&quot;############ 打印帐号信息 ##############&quot;);</span><br><span class=\"line\">            log.info(userIdNodes.item(0) + &quot;&#x3D;&quot; + userName);</span><br><span class=\"line\">            log.info(pwdNodes.item(0) + &quot;&#x3D;&quot; + password);</span><br><span class=\"line\">            log.info(&quot;############  ————————  ##############&quot;);</span><br><span class=\"line\">            &#x2F;&#x2F; 用户名及密码使用SM3加密后的密文进行传输，此处判断源数据与加密数据</span><br><span class=\"line\">            if (!SmUtils.verify(USER_NAME, userName) || !SmUtils.verify(PASSWORD, password)) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;认证失败则抛出异常，停止继续操作</span><br><span class=\"line\">                SOAPException soapExc &#x3D; new SOAPException(&quot;请提供正确的用户名和密码！&quot;);</span><br><span class=\"line\">                throw new Fault(soapExc);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>可以对请求用户进行用户名、密码的校验</p>\n<h4 id=\"1-3-输出阶段\"><a href=\"#1-3-输出阶段\" class=\"headerlink\" title=\"1.3. 输出阶段\"></a>1.3. 输出阶段</h4><table>\n<thead>\n<tr>\n<th>阶段名称</th>\n<th align=\"center\">阶段功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SETUP</td>\n<td align=\"center\">Any set up for the following phases(设置阶段)</td>\n</tr>\n<tr>\n<td>(PRE/USER/POST)_LOGICAL</td>\n<td align=\"center\">Processing of objects about to marshalled</td>\n</tr>\n<tr>\n<td>PREPARE_SEND</td>\n<td align=\"center\">Opening of the connection(消息发送准备阶段，在该阶段创建Connection)</td>\n</tr>\n<tr>\n<td>PRE_STREAM</td>\n<td align=\"center\">流准备阶段</td>\n</tr>\n<tr>\n<td>PRE_PROTOCOL</td>\n<td align=\"center\">Misc protocol actions(协议准备阶段)</td>\n</tr>\n<tr>\n<td>WRITE</td>\n<td align=\"center\">Writing of the protocol message, such as the SOAP Envelope.(写消息阶段)</td>\n</tr>\n<tr>\n<td>MARSHAL</td>\n<td align=\"center\">Marshalling of the objects</td>\n</tr>\n<tr>\n<td>(USER/POST)_PROTOCOL</td>\n<td align=\"center\">Processing of the protocol message</td>\n</tr>\n<tr>\n<td>(USER/POST)_STREAM</td>\n<td align=\"center\">Processing of the byte level message(字节处理阶段，在该阶段把消息转为字节)</td>\n</tr>\n<tr>\n<td>SEND</td>\n<td align=\"center\">消息发送</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-4-输出拦截器\"><a href=\"#1-4-输出拦截器\" class=\"headerlink\" title=\"1.4. 输出拦截器\"></a>1.4. 输出拦截器</h3><p>修改报文、记录日志：</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package hls.core.ws.interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">import hls.core.ws.dto.HlsCusWsRequests;</span><br><span class=\"line\">import hls.core.ws.mapper.HlsCusWsRequestsMapper;</span><br><span class=\"line\">import org.apache.cxf.helpers.IOUtils;</span><br><span class=\"line\">import org.apache.cxf.interceptor.Fault;</span><br><span class=\"line\">import org.apache.cxf.io.CachedOutputStream;</span><br><span class=\"line\">import org.apache.cxf.message.Exchange;</span><br><span class=\"line\">import org.apache.cxf.message.Message;</span><br><span class=\"line\">import org.apache.cxf.phase.AbstractPhaseInterceptor;</span><br><span class=\"line\">import org.apache.cxf.phase.Phase;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.ByteArrayInputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.io.OutputStream;</span><br><span class=\"line\">import java.nio.charset.StandardCharsets;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @Author: ever</span><br><span class=\"line\"> * @DATE: 2019-12-02 14:14</span><br><span class=\"line\"> * @Description: 接口服务端流出拦截器(修改报文, 记录日志)</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class ServiceOutPreStreamInterceptor extends AbstractPhaseInterceptor&lt;Message&gt; &#123;</span><br><span class=\"line\">    protected static Logger log &#x3D; LoggerFactory.getLogger(ServiceOutPreStreamInterceptor.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private HlsCusWsRequestsMapper hlsCusWsRequestsMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ServiceOutPreStreamInterceptor() &#123;</span><br><span class=\"line\">        super(Phase.PRE_STREAM);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handleMessage(Message message) throws Fault &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            OutputStream os &#x3D; message.getContent(OutputStream.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            CachedStream cs &#x3D; new CachedStream();</span><br><span class=\"line\"></span><br><span class=\"line\">            message.setContent(OutputStream.class, cs);</span><br><span class=\"line\"></span><br><span class=\"line\">            message.getInterceptorChain().doIntercept(message);</span><br><span class=\"line\"></span><br><span class=\"line\">            CachedOutputStream csnew &#x3D; (CachedOutputStream) message.getContent(OutputStream.class);</span><br><span class=\"line\">            InputStream in &#x3D; csnew.getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">            String xml &#x3D; IOUtils.toString(in);</span><br><span class=\"line\">            log.info(&quot;replaceBegin&quot; + xml);</span><br><span class=\"line\">            Exchange exchange &#x3D; message.getExchange();</span><br><span class=\"line\">            exchange.put(&quot;output.content.origin&quot;, xml);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F; 记录日志</span><br><span class=\"line\">            record(message);</span><br><span class=\"line\"></span><br><span class=\"line\">            xml &#x3D; xml.replace(&quot;return&quot;, &quot;qwerty:response&quot;);&#x2F;&#x2F;替换成你需要的格式</span><br><span class=\"line\">            log.info(&quot;replaceAfter&quot; + xml);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F;这里对xml做处理，处理完后同理，写回流中</span><br><span class=\"line\">            IOUtils.copy(new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8)), os);</span><br><span class=\"line\"></span><br><span class=\"line\">            cs.close();</span><br><span class=\"line\">            os.flush();</span><br><span class=\"line\"></span><br><span class=\"line\">            message.setContent(OutputStream.class, os);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            log.error(&quot;输入流解析错误 : &quot; + &quot;\\n&quot; + e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 记录日志</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    private void record(Message message) &#123;</span><br><span class=\"line\">        Exchange exchange &#x3D; message.getExchange();</span><br><span class=\"line\"></span><br><span class=\"line\">        HlsCusWsRequests hlsCusWsRequests &#x3D; new HlsCusWsRequests();</span><br><span class=\"line\">        hlsCusWsRequests.setRequestDate(new Date());</span><br><span class=\"line\">        hlsCusWsRequests.setParameterType(&quot;soap message&quot;);</span><br><span class=\"line\">        hlsCusWsRequests.setRequestJson(exchange.get(&quot;input.content.origin&quot;).toString() + &quot;\\n&quot; </span><br><span class=\"line\">            + exchange.get(&quot;input.content&quot;).toString());</span><br><span class=\"line\">        hlsCusWsRequests.setResponseJson(exchange.get(&quot;output.content.origin&quot;).toString());</span><br><span class=\"line\">        hlsCusWsRequests.setRequestWsdlUrl(&quot;&#123;http:&#x2F;&#x2F;qwerty.com&#125;FunctionnameService&quot;);</span><br><span class=\"line\">        hlsCusWsRequests.setFunctionName(&quot;FunctionName&quot;);</span><br><span class=\"line\">        hlsCusWsRequestsMapper.insertPaymentRequest(hlsCusWsRequests);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private class CachedStream extends CachedOutputStream &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        private CachedStream() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            super();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        protected void doFlush() throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            currentStream.flush();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        protected void doClose() throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        protected void onWrite() throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>从exchange中取出请求报文，记录日志。</p>\n<h2 id=\"Z-参考\"><a href=\"#Z-参考\" class=\"headerlink\" title=\"Z. 参考\"></a>Z. 参考</h2><p><a href=\"https://blog.csdn.net/zhaofuqiangmycomm/article/details/78702125\" target=\"_blank\" rel=\"noopener\">1. cxf拦截器，实现对接收到的报文和发送出去的报文格式自定义</a><br><a href=\"https://www.iteye.com/blog/jyao-1343722\" target=\"_blank\" rel=\"noopener\">2. CXF 入门：创建一个基于SOAPHeader的安全验证(CXF拦截器使用)</a><br><a href=\"https://blog.csdn.net/accountwcx/article/details/47102319\" target=\"_blank\" rel=\"noopener\">3. CXF实战之拦截器Interceptor(四)</a></p>\n","site":{"data":{}},"excerpt":"<p>这个项目的接口，断断续续做了3个月了，从一开始的一脸懵逼，到现在的一知半解。。。</p>","more":"<h2 id=\"一、问题描述\"><a href=\"#一、问题描述\" class=\"headerlink\" title=\"一、问题描述\"></a>一、问题描述</h2><p>项目上是用spring框架加上cxf来发布webservice的，啥都有，就配置一下，再写java就行。<br>但是，仅仅发布，客户大人是不会满意的，他们对这个报文格式，是有要求滴。<br>归纳为以下几点:</p>\n<h3 id=\"1-命名空间\"><a href=\"#1-命名空间\" class=\"headerlink\" title=\"1. 命名空间\"></a>1. 命名空间</h3><p>以系统简称作为命名空间，并且要求body下每个节点前面都有命名空间前缀<br>那么我遇到了什么问题呢<br>首先我们这个系统简称有点长，有6个字母，生成的报文前缀直接给我截取成了3个字母。。。<br>其次就是每个节点前都要加命名空间前缀，让我好一番折腾</p>\n<h3 id=\"2-节点要求\"><a href=\"#2-节点要求\" class=\"headerlink\" title=\"2. 节点要求\"></a>2. 节点要求</h3><p>Body中第一层应使用输入数据模型根节点信息，即服务方法名+”Request”。<br>而我生成的第一层永远是方法名，第二层才是数据模型。</p>\n<h3 id=\"3-Header\"><a href=\"#3-Header\" class=\"headerlink\" title=\"3. Header\"></a>3. Header</h3><p>服务请求报文在Header中添加服务安全验证信息<br>想校验安全信息，找不到Header。。。</p>\n<p>每每回想起那审查后的十大问题，我都觉得要是到时候报文不严格按照这个来，都对不起我这么久的研究</p>\n<h2 id=\"二、解决方法\"><a href=\"#二、解决方法\" class=\"headerlink\" title=\"二、解决方法\"></a>二、解决方法</h2><p>先上报文，要求是这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;soapenv:Envelope xmlns:soapenv&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot; xmlns:qwerty&#x3D;&quot;http:&#x2F;&#x2F;qwerty.com&quot;&gt;</span><br><span class=\"line\">   &lt;soapenv:Header&gt;</span><br><span class=\"line\">      &lt;qwerty:security&gt;</span><br><span class=\"line\">         &lt;qwerty:username&gt;?&lt;&#x2F;qwerty:username&gt;</span><br><span class=\"line\">         &lt;qwerty:password&gt;?&lt;&#x2F;qwerty:password&gt;</span><br><span class=\"line\">      &lt;&#x2F;qwerty:security&gt;</span><br><span class=\"line\">   &lt;&#x2F;soapenv:Header&gt;</span><br><span class=\"line\">   &lt;soapenv:Body&gt;</span><br><span class=\"line\">\t &lt;qwerty:functionNameRequest&gt;</span><br><span class=\"line\">\t    &lt;!--Optional:--&gt;</span><br><span class=\"line\">\t    &lt;qwerty:number&gt;?&lt;&#x2F;qwerty:number&gt;</span><br><span class=\"line\">\t    &lt;!--Optional:--&gt;</span><br><span class=\"line\">\t    &lt;qwerty:id&gt;?&lt;&#x2F;qwerty:id&gt;</span><br><span class=\"line\">\t    &lt;!--Optional:--&gt;</span><br><span class=\"line\">         &lt;qwerty:date&gt;?&lt;&#x2F;qwerty:date&gt;</span><br><span class=\"line\">\t &lt;&#x2F;qwerty:functionNameRequest&gt;</span><br><span class=\"line\">   &lt;&#x2F;soapenv:Body&gt;</span><br><span class=\"line\">&lt;&#x2F;soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure>\n<p>我只能生成这样滴</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;soapenv:Envelope xmlns:soapenv&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot; xmlns:qwe&#x3D;&quot;http:&#x2F;&#x2F;qwerty.com&quot;&gt;</span><br><span class=\"line\">   &lt;soapenv:Header&gt;</span><br><span class=\"line\">      &lt;qwe:security&gt;</span><br><span class=\"line\">         &lt;qwe:username&gt;?&lt;&#x2F;qwe:username&gt;</span><br><span class=\"line\">         &lt;qwe:password&gt;?&lt;&#x2F;qwe:password&gt;</span><br><span class=\"line\">      &lt;&#x2F;qwe:security&gt;</span><br><span class=\"line\">   &lt;&#x2F;soapenv:Header&gt;</span><br><span class=\"line\">   &lt;soapenv:Body&gt;</span><br><span class=\"line\">      &lt;qwe:functionName&gt;</span><br><span class=\"line\">         &lt;qwe:functionNameRequest&gt;</span><br><span class=\"line\">            &lt;!--Optional:--&gt;</span><br><span class=\"line\">            &lt;qwe:paymentReqNumber&gt;111&lt;&#x2F;qwe:paymentReqNumber&gt;</span><br><span class=\"line\">            &lt;!--Optional:--&gt;</span><br><span class=\"line\">            &lt;qwe:contractId&gt;?&lt;&#x2F;qwe:contractId&gt;</span><br><span class=\"line\">            &lt;!--Optional:--&gt;</span><br><span class=\"line\">            &lt;qwe:applyPayDate&gt;?&lt;&#x2F;qwe:applyPayDate&gt;</span><br><span class=\"line\">         &lt;&#x2F;qwe:functionNameRequest&gt;</span><br><span class=\"line\">      &lt;&#x2F;qwe:functionName&gt;</span><br><span class=\"line\">   &lt;&#x2F;soapenv:Body&gt;</span><br><span class=\"line\">&lt;&#x2F;soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure>\n<p>先说说这样婶儿的是怎么生成的</p>\n<h3 id=\"1-命名空间-1\"><a href=\"#1-命名空间-1\" class=\"headerlink\" title=\"1. 命名空间\"></a>1. 命名空间</h3><h4 id=\"1-1-在接口方法上加注释-这样就会有xmlns，security，request前面会有命名空间\"><a href=\"#1-1-在接口方法上加注释-这样就会有xmlns，security，request前面会有命名空间\" class=\"headerlink\" title=\"1.1. 在接口方法上加注释(这样就会有xmlns，security，request前面会有命名空间)\"></a>1.1. 在接口方法上加注释(这样就会有xmlns，security，request前面会有命名空间)</h4><p>@WebService(targetNamespace = “<a href=\"http://qwerty.com&quot;\" target=\"_blank\" rel=\"noopener\">http://qwerty.com&quot;</a>)</p>\n<h4 id=\"1-2-在方法参数上加注释-这样方法名前面就会有命名空间\"><a href=\"#1-2-在方法参数上加注释-这样方法名前面就会有命名空间\" class=\"headerlink\" title=\"1.2. 在方法参数上加注释(这样方法名前面就会有命名空间)\"></a>1.2. 在方法参数上加注释(这样方法名前面就会有命名空间)</h4><p>@XmlElement(required = true, namespace = “<a href=\"http://qwerty.com&quot;\" target=\"_blank\" rel=\"noopener\">http://qwerty.com&quot;</a>) @WebParam(name = “functionNameRequest”, partName = “functionNameRequest”)<br>                                               FunctionNameRequest functionNameRequest</p>\n<h4 id=\"1-3-要在对象每个属性前面加命名空间前缀有两个方法\"><a href=\"#1-3-要在对象每个属性前面加命名空间前缀有两个方法\" class=\"headerlink\" title=\"1.3. 要在对象每个属性前面加命名空间前缀有两个方法\"></a>1.3. 要在对象每个属性前面加命名空间前缀有两个方法</h4><h5 id=\"1-3-1-在属性的get方法上加\"><a href=\"#1-3-1-在属性的get方法上加\" class=\"headerlink\" title=\"1.3.1. 在属性的get方法上加\"></a>1.3.1. 在属性的get方法上加</h5><p>@XmlElement(namespace = “<a href=\"http://qwerty.com&quot;\" target=\"_blank\" rel=\"noopener\">http://qwerty.com&quot;</a>)<br>但是必须每个都加，才能实现每个节点都有</p>\n<h5 id=\"1-3-2-在FunctionNameRequest对象目录下新增文件-package-info-java\"><a href=\"#1-3-2-在FunctionNameRequest对象目录下新增文件-package-info-java\" class=\"headerlink\" title=\"1.3.2. 在FunctionNameRequest对象目录下新增文件 package-info.java\"></a>1.3.2. 在FunctionNameRequest对象目录下新增文件 package-info.java</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@XmlSchema(</span><br><span class=\"line\">        namespace &#x3D; &quot;http:&#x2F;&#x2F;qwerty.com&quot;,</span><br><span class=\"line\">        elementFormDefault &#x3D; XmlNsForm.QUALIFIED,</span><br><span class=\"line\">        xmlns &#x3D; &#123;</span><br><span class=\"line\">                @XmlNs(prefix &#x3D; &quot;qwerty&quot;, namespaceURI &#x3D; &quot;http:&#x2F;&#x2F;qwerty.com&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">package hls.core.ws.dto;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.xml.bind.annotation.XmlNs;</span><br><span class=\"line\">import javax.xml.bind.annotation.XmlNsForm;</span><br><span class=\"line\">import javax.xml.bind.annotation.XmlSchema;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-节点要求-1\"><a href=\"#2-节点要求-1\" class=\"headerlink\" title=\"2. 节点要求\"></a>2. 节点要求</h3><p>。。。失败了</p>\n<h3 id=\"3-Header-1\"><a href=\"#3-Header-1\" class=\"headerlink\" title=\"3. Header\"></a>3. Header</h3><p>在请求接口方法中添加<br>@XmlElement(required = true) @WebParam(name = “security”, header = true) InHeaderMessage inHeaderMessage<br>加了@XmlElement(required = true)就不会有被注释了的 Optional: 了。</p>\n<h2 id=\"三、拦截器\"><a href=\"#三、拦截器\" class=\"headerlink\" title=\"三、拦截器\"></a>三、拦截器</h2><p>最后来说说解决一切烦恼的拦截器吧。</p>\n<h3 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1. 定义\"></a>1. 定义</h3><p>在 <a href=\"http://localhost:4000/2019/11/13/web-service/\" target=\"_blank\" rel=\"noopener\">web service – spring + cxf 发布web service(1)</a><br>中，已经说过发布接口需要配置cxf-beans.xml，拦截器也在这里配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id&#x3D;&quot;inInterceptor&quot; class&#x3D;&quot;hls.core.ws.interceptor.ServiceInReceiveInterceptor&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;bean id&#x3D;&quot;outInterceptor&quot; class&#x3D;&quot;hls.core.ws.interceptor.ServiceOutPreStreamInterceptor&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;jaxws:server id&#x3D;&quot;wsFunctionName&quot; serviceClass&#x3D;&quot;hls.core.ws.service.FunctionName&quot;</span><br><span class=\"line\">              address&#x3D;&quot;&#x2F;FunctionName&quot;&gt;</span><br><span class=\"line\">    &lt;jaxws:serviceBean&gt;</span><br><span class=\"line\">        &lt;bean class&#x3D;&quot;hls.core.ws.service.impl.FunctionNameImpl&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;jaxws:serviceBean&gt;</span><br><span class=\"line\">    &lt;jaxws:inInterceptors&gt;</span><br><span class=\"line\">        &lt;ref bean&#x3D;&quot;inInterceptor&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;jaxws:inInterceptors&gt;</span><br><span class=\"line\">    &lt;jaxws:outInterceptors&gt;</span><br><span class=\"line\">        &lt;ref bean&#x3D;&quot;outInterceptor&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;jaxws:outInterceptors&gt;</span><br><span class=\"line\">&lt;&#x2F;jaxws:server&gt;</span><br></pre></td></tr></table></figure>\n<p>这里配置了两个拦截器，一个输入拦截器，一个输出拦截器。</p>\n<h4 id=\"1-1-输入阶段\"><a href=\"#1-1-输入阶段\" class=\"headerlink\" title=\"1.1. 输入阶段\"></a>1.1. 输入阶段</h4><table>\n<thead>\n<tr>\n<th>阶段名称</th>\n<th align=\"center\">阶段功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>RECEIVE</td>\n<td align=\"center\">Transport level processing(接收阶段，传输层处理)</td>\n</tr>\n<tr>\n<td>(PRE/USER/POST)_STREAM</td>\n<td align=\"center\">Stream level processing/transformations(流处理/转换阶段)</td>\n</tr>\n<tr>\n<td>READ</td>\n<td align=\"center\">This is where header reading typically occurs(SOAPHeader读取)</td>\n</tr>\n<tr>\n<td>(PRE/USER/POST)_PROTOCOL</td>\n<td align=\"center\">Protocol processing, such as JAX-WS SOAP handlers(协议处理阶段，例如JAX-WS的Handler处理)</td>\n</tr>\n<tr>\n<td>UNMARSHAL</td>\n<td align=\"center\">Unmarshalling of the request(SOAP请求解码阶段)</td>\n</tr>\n<tr>\n<td>(PRE/USER/POST)_LOGICAL</td>\n<td align=\"center\">Processing of the umarshalled request(SOAP请求解码处理阶段)</td>\n</tr>\n<tr>\n<td>PRE_INVOKE</td>\n<td align=\"center\">Pre invocation actions(调用业务处理之前进入该阶段)</td>\n</tr>\n<tr>\n<td>INVOKE</td>\n<td align=\"center\">Invocation of the service(调用业务阶段)</td>\n</tr>\n<tr>\n<td>POST_INVOKE</td>\n<td align=\"center\">Invocation of the outgoing chain if there is one(提交业务处理结果，并触发输入连接器)</td>\n</tr>\n</tbody></table>\n<h4 id=\"1-2-输入拦截器\"><a href=\"#1-2-输入拦截器\" class=\"headerlink\" title=\"1.2. 输入拦截器\"></a>1.2. 输入拦截器</h4><p>(1) 修改报文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package hls.core.ws.interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.cxf.helpers.IOUtils;</span><br><span class=\"line\">import org.apache.cxf.interceptor.Fault;</span><br><span class=\"line\">import org.apache.cxf.message.Exchange;</span><br><span class=\"line\">import org.apache.cxf.message.Message;</span><br><span class=\"line\">import org.apache.cxf.phase.AbstractPhaseInterceptor;</span><br><span class=\"line\">import org.apache.cxf.phase.Phase;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.ByteArrayInputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.nio.charset.StandardCharsets;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @Author ever</span><br><span class=\"line\"> * @DATE 2019-12-02 14:14</span><br><span class=\"line\"> * @Description 接口服务端流入拦截器(修改请求报文)</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class ServiceInReceiveInterceptor extends AbstractPhaseInterceptor&lt;Message&gt; &#123;</span><br><span class=\"line\">    protected static Logger log &#x3D; LoggerFactory.getLogger(ServiceInReceiveInterceptor.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    public ServiceInReceiveInterceptor() &#123;</span><br><span class=\"line\">        super(Phase.RECEIVE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handleMessage(Message message) throws Fault &#123;</span><br><span class=\"line\">        InputStream is &#x3D; message.getContent(InputStream.class);</span><br><span class=\"line\">        if (is !&#x3D; null) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                String str &#x3D; IOUtils.toString(is);</span><br><span class=\"line\">                &#x2F;&#x2F; 原请求报文</span><br><span class=\"line\">                Exchange exchange &#x3D; message.getExchange();</span><br><span class=\"line\">                exchange.put(&quot;input.content.origin&quot;, str);</span><br><span class=\"line\">                log.info(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&gt; request xml&#x3D;\\r\\n&quot; + str);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#x2F;&#x2F; 修改报文格式</span><br><span class=\"line\">                str &#x3D; str.replace(&quot;&lt;qwerty:functionName&gt;&quot;, </span><br><span class=\"line\">                &quot;&lt;qwerty:functionName&gt;\\n&quot; +</span><br><span class=\"line\">                        &quot;      &lt;qwerty:functionNameRequest&gt;&quot;)</span><br><span class=\"line\">                        .replace(&quot;&lt;&#x2F;qwerty:functionNameRequest&gt;&quot;, </span><br><span class=\"line\">                        &quot;&lt;&#x2F;qwerty:functionNameRequest&gt;\\n&quot; +</span><br><span class=\"line\">                        &quot;&lt;&#x2F;qwerty:functionNameRequest&gt;\\n&quot; +</span><br><span class=\"line\">                                &quot;      &lt;&#x2F;qwerty:functionName&gt;&quot;)</span><br><span class=\"line\">                        .replace(&quot;qwerty&quot;, &quot;qwe&quot;)</span><br><span class=\"line\">                        .replace(&quot;http:&#x2F;&#x2F;qwe.com&quot;, &quot;http:&#x2F;&#x2F;qwerty.com&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#x2F;&#x2F; 替换后的报文</span><br><span class=\"line\">                log.info(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&gt; replaced xml&#x3D;\\r\\n&quot; + str);</span><br><span class=\"line\">                exchange.put(&quot;input.content&quot;, str);</span><br><span class=\"line\"></span><br><span class=\"line\">                InputStream ism &#x3D; new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">                message.setContent(InputStream.class, ism);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就解决了节点以及命名空间的问题。这里是在RECEIVE，接收阶段处理了报文，且把报文放进了exchange中。<br>因为拦截器不同阶段的数据流不同，到输出拦截器的时候是读不到输入的报文的，所以要存起来，便于后面取出来记录日志。</p>\n<p>(2) 获取Header信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package hls.core.ws.interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">import hls.core.ws.utils.SmUtils;</span><br><span class=\"line\">import org.apache.cxf.binding.soap.SoapHeader;</span><br><span class=\"line\">import org.apache.cxf.binding.soap.SoapMessage;</span><br><span class=\"line\">import org.apache.cxf.binding.soap.interceptor.AbstractSoapInterceptor;</span><br><span class=\"line\">import org.apache.cxf.binding.soap.saaj.SAAJInInterceptor;</span><br><span class=\"line\">import org.apache.cxf.interceptor.Fault;</span><br><span class=\"line\">import org.apache.cxf.phase.Phase;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\">import org.w3c.dom.Element;</span><br><span class=\"line\">import org.w3c.dom.NodeList;</span><br><span class=\"line\">import org.apache.cxf.headers.Header;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.xml.soap.SOAPException;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @Author: ever</span><br><span class=\"line\"> * @DATE: 2019-12-02 14:14</span><br><span class=\"line\"> * @Description 接口服务端流入拦截器(校验Header信息)</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class ServiceInPreProtocolInterceptor extends AbstractSoapInterceptor &#123;</span><br><span class=\"line\">    protected static Logger log &#x3D; LoggerFactory.getLogger(ServiceInPreProtocolInterceptor.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    public ServiceInPreProtocolInterceptor() &#123;</span><br><span class=\"line\">        super(Phase.PRE_PROTOCOL);</span><br><span class=\"line\">        getAfter().add(SAAJInInterceptor.class.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static String USER_NAME &#x3D; &quot;USER_NAME&quot;;</span><br><span class=\"line\">    private static String PASSWORD  &#x3D; &quot;PASSWORD&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handleMessage(SoapMessage soapMessage) throws Fault &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 校验头信息</span><br><span class=\"line\">        System.out.println(&quot;开始验证用户信息！&quot;);</span><br><span class=\"line\">        List&lt;Header&gt; headers &#x3D; soapMessage.getHeaders();</span><br><span class=\"line\">        for (Header header : headers) &#123;</span><br><span class=\"line\">            SoapHeader soapHeader &#x3D; (SoapHeader) header;</span><br><span class=\"line\">            &#x2F;&#x2F; 取出SOAP的Header元素</span><br><span class=\"line\">            Element element &#x3D; (Element) soapHeader.getObject();</span><br><span class=\"line\">            log.info(&quot;ELEMENT &#x3D;&quot; + element.toString());</span><br><span class=\"line\">            &#x2F;&#x2F; XMLUtils.printDOM(element);</span><br><span class=\"line\">            NodeList userIdNodes &#x3D; element.getElementsByTagName(&quot;qwe:username&quot;);</span><br><span class=\"line\">            NodeList pwdNodes &#x3D; element.getElementsByTagName(&quot;qwe:password&quot;);</span><br><span class=\"line\">            if (userIdNodes.item(0) &#x3D;&#x3D; null || pwdNodes.item(0) &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">                SOAPException soapExc &#x3D; new SOAPException(&quot;请在Header中提供完整的用户名、密码信息&quot;);</span><br><span class=\"line\">                throw new Fault(soapExc);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String userName &#x3D; userIdNodes.item(0).getTextContent();</span><br><span class=\"line\">            String password &#x3D; pwdNodes.item(0).getTextContent();</span><br><span class=\"line\">            log.info(&quot;############ 打印帐号信息 ##############&quot;);</span><br><span class=\"line\">            log.info(userIdNodes.item(0) + &quot;&#x3D;&quot; + userName);</span><br><span class=\"line\">            log.info(pwdNodes.item(0) + &quot;&#x3D;&quot; + password);</span><br><span class=\"line\">            log.info(&quot;############  ————————  ##############&quot;);</span><br><span class=\"line\">            &#x2F;&#x2F; 用户名及密码使用SM3加密后的密文进行传输，此处判断源数据与加密数据</span><br><span class=\"line\">            if (!SmUtils.verify(USER_NAME, userName) || !SmUtils.verify(PASSWORD, password)) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;认证失败则抛出异常，停止继续操作</span><br><span class=\"line\">                SOAPException soapExc &#x3D; new SOAPException(&quot;请提供正确的用户名和密码！&quot;);</span><br><span class=\"line\">                throw new Fault(soapExc);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以对请求用户进行用户名、密码的校验</p>\n<h4 id=\"1-3-输出阶段\"><a href=\"#1-3-输出阶段\" class=\"headerlink\" title=\"1.3. 输出阶段\"></a>1.3. 输出阶段</h4><table>\n<thead>\n<tr>\n<th>阶段名称</th>\n<th align=\"center\">阶段功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SETUP</td>\n<td align=\"center\">Any set up for the following phases(设置阶段)</td>\n</tr>\n<tr>\n<td>(PRE/USER/POST)_LOGICAL</td>\n<td align=\"center\">Processing of objects about to marshalled</td>\n</tr>\n<tr>\n<td>PREPARE_SEND</td>\n<td align=\"center\">Opening of the connection(消息发送准备阶段，在该阶段创建Connection)</td>\n</tr>\n<tr>\n<td>PRE_STREAM</td>\n<td align=\"center\">流准备阶段</td>\n</tr>\n<tr>\n<td>PRE_PROTOCOL</td>\n<td align=\"center\">Misc protocol actions(协议准备阶段)</td>\n</tr>\n<tr>\n<td>WRITE</td>\n<td align=\"center\">Writing of the protocol message, such as the SOAP Envelope.(写消息阶段)</td>\n</tr>\n<tr>\n<td>MARSHAL</td>\n<td align=\"center\">Marshalling of the objects</td>\n</tr>\n<tr>\n<td>(USER/POST)_PROTOCOL</td>\n<td align=\"center\">Processing of the protocol message</td>\n</tr>\n<tr>\n<td>(USER/POST)_STREAM</td>\n<td align=\"center\">Processing of the byte level message(字节处理阶段，在该阶段把消息转为字节)</td>\n</tr>\n<tr>\n<td>SEND</td>\n<td align=\"center\">消息发送</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-4-输出拦截器\"><a href=\"#1-4-输出拦截器\" class=\"headerlink\" title=\"1.4. 输出拦截器\"></a>1.4. 输出拦截器</h3><p>修改报文、记录日志：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package hls.core.ws.interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">import hls.core.ws.dto.HlsCusWsRequests;</span><br><span class=\"line\">import hls.core.ws.mapper.HlsCusWsRequestsMapper;</span><br><span class=\"line\">import org.apache.cxf.helpers.IOUtils;</span><br><span class=\"line\">import org.apache.cxf.interceptor.Fault;</span><br><span class=\"line\">import org.apache.cxf.io.CachedOutputStream;</span><br><span class=\"line\">import org.apache.cxf.message.Exchange;</span><br><span class=\"line\">import org.apache.cxf.message.Message;</span><br><span class=\"line\">import org.apache.cxf.phase.AbstractPhaseInterceptor;</span><br><span class=\"line\">import org.apache.cxf.phase.Phase;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.ByteArrayInputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.io.OutputStream;</span><br><span class=\"line\">import java.nio.charset.StandardCharsets;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @Author: ever</span><br><span class=\"line\"> * @DATE: 2019-12-02 14:14</span><br><span class=\"line\"> * @Description: 接口服务端流出拦截器(修改报文, 记录日志)</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class ServiceOutPreStreamInterceptor extends AbstractPhaseInterceptor&lt;Message&gt; &#123;</span><br><span class=\"line\">    protected static Logger log &#x3D; LoggerFactory.getLogger(ServiceOutPreStreamInterceptor.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private HlsCusWsRequestsMapper hlsCusWsRequestsMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ServiceOutPreStreamInterceptor() &#123;</span><br><span class=\"line\">        super(Phase.PRE_STREAM);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handleMessage(Message message) throws Fault &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            OutputStream os &#x3D; message.getContent(OutputStream.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            CachedStream cs &#x3D; new CachedStream();</span><br><span class=\"line\"></span><br><span class=\"line\">            message.setContent(OutputStream.class, cs);</span><br><span class=\"line\"></span><br><span class=\"line\">            message.getInterceptorChain().doIntercept(message);</span><br><span class=\"line\"></span><br><span class=\"line\">            CachedOutputStream csnew &#x3D; (CachedOutputStream) message.getContent(OutputStream.class);</span><br><span class=\"line\">            InputStream in &#x3D; csnew.getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">            String xml &#x3D; IOUtils.toString(in);</span><br><span class=\"line\">            log.info(&quot;replaceBegin&quot; + xml);</span><br><span class=\"line\">            Exchange exchange &#x3D; message.getExchange();</span><br><span class=\"line\">            exchange.put(&quot;output.content.origin&quot;, xml);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F; 记录日志</span><br><span class=\"line\">            record(message);</span><br><span class=\"line\"></span><br><span class=\"line\">            xml &#x3D; xml.replace(&quot;return&quot;, &quot;qwerty:response&quot;);&#x2F;&#x2F;替换成你需要的格式</span><br><span class=\"line\">            log.info(&quot;replaceAfter&quot; + xml);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F;这里对xml做处理，处理完后同理，写回流中</span><br><span class=\"line\">            IOUtils.copy(new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8)), os);</span><br><span class=\"line\"></span><br><span class=\"line\">            cs.close();</span><br><span class=\"line\">            os.flush();</span><br><span class=\"line\"></span><br><span class=\"line\">            message.setContent(OutputStream.class, os);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            log.error(&quot;输入流解析错误 : &quot; + &quot;\\n&quot; + e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 记录日志</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    private void record(Message message) &#123;</span><br><span class=\"line\">        Exchange exchange &#x3D; message.getExchange();</span><br><span class=\"line\"></span><br><span class=\"line\">        HlsCusWsRequests hlsCusWsRequests &#x3D; new HlsCusWsRequests();</span><br><span class=\"line\">        hlsCusWsRequests.setRequestDate(new Date());</span><br><span class=\"line\">        hlsCusWsRequests.setParameterType(&quot;soap message&quot;);</span><br><span class=\"line\">        hlsCusWsRequests.setRequestJson(exchange.get(&quot;input.content.origin&quot;).toString() + &quot;\\n&quot; </span><br><span class=\"line\">            + exchange.get(&quot;input.content&quot;).toString());</span><br><span class=\"line\">        hlsCusWsRequests.setResponseJson(exchange.get(&quot;output.content.origin&quot;).toString());</span><br><span class=\"line\">        hlsCusWsRequests.setRequestWsdlUrl(&quot;&#123;http:&#x2F;&#x2F;qwerty.com&#125;FunctionnameService&quot;);</span><br><span class=\"line\">        hlsCusWsRequests.setFunctionName(&quot;FunctionName&quot;);</span><br><span class=\"line\">        hlsCusWsRequestsMapper.insertPaymentRequest(hlsCusWsRequests);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private class CachedStream extends CachedOutputStream &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        private CachedStream() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            super();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        protected void doFlush() throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            currentStream.flush();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        protected void doClose() throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        protected void onWrite() throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从exchange中取出请求报文，记录日志。</p>\n<h2 id=\"Z-参考\"><a href=\"#Z-参考\" class=\"headerlink\" title=\"Z. 参考\"></a>Z. 参考</h2><p><a href=\"https://blog.csdn.net/zhaofuqiangmycomm/article/details/78702125\" target=\"_blank\" rel=\"noopener\">1. cxf拦截器，实现对接收到的报文和发送出去的报文格式自定义</a><br><a href=\"https://www.iteye.com/blog/jyao-1343722\" target=\"_blank\" rel=\"noopener\">2. CXF 入门：创建一个基于SOAPHeader的安全验证(CXF拦截器使用)</a><br><a href=\"https://blog.csdn.net/accountwcx/article/details/47102319\" target=\"_blank\" rel=\"noopener\">3. CXF实战之拦截器Interceptor(四)</a></p>"},{"title":"web service -- spring + cxf 发布web service(1)","date":"2019-11-13T08:45:49.000Z","_content":"\n今天又差点被web service搞崩溃，起因是在跟客户联调的时候报错：\n<!--more-->\nCouldn't create soap message. Expecting Envelop in namespace http://www.w3.org/2003/05/soap-envelope, \nbut got http://schemas.xmlsoap.org/soap/envelope/.\n(这还是他们提供的，说什么一定要一模一样，我真是不想吐槽。。。)\n经过一番百度，终于搞明白了是soap协议不一致导致的，前者是soap1.1，后者是soap1.2。\n我的服务使用Axis搭建的，我各种百度怎么改协议都失败了，这个需要之后继续研究。\n一气之下关了所有窗口，自己重写一个web service。\n鉴于之前用Endpoint.publish(*address, new MyFirstWebService()*)方法发布过web service，一直想用cxf框架搭一个，这次就用cxf吧。\n\n## 1. 准备\nIDE工具：idea\n\n## 2. 搭建\n\n先新建一个 maven project，创建出来后，会有一个pom.xml，这是maven项目的配置文件：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>core</groupId>\n    <artifactId>ws</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n    <name>My Cxf Web Service</name>\n    <url>http://maven.apache.org</url>\n\n    <dependencies>\n        <dependency>\n            。。。\n        </dependency>\n    </dependencies>\n    <build>\n        <finalName>ws</finalName>\n    </build>\n\n</project>\n```\n这边packaging配了war，就可以直接用maven的package指令打war包，name是项目的名字，version是版本号，finalName是war包包名\n可以看打包时候的部分输出\n```\n[INFO] ------------------------------< core:ws >-------------------------------\n[INFO] Building My Cxf Web Service 1.0-SNAPSHOT\n[INFO] --------------------------------[ war ]---------------------------------\n```\n在pom中引入cxf的jar包：\n```\n    <dependency>\n        <groupId>org.apache.cxf</groupId>\n        <artifactId>cxf-api</artifactId>\n        <version>2.5.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.cxf</groupId>\n        <artifactId>cxf-rt-frontend-jaxws</artifactId>\n        <version>2.5.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.cxf</groupId>\n        <artifactId>cxf-rt-bindings-soap</artifactId>\n        <version>2.5.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.cxf</groupId>\n        <artifactId>cxf-rt-transports-http</artifactId>\n        <version>2.5.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.cxf</groupId>\n        <artifactId>cxf-rt-ws-security</artifactId>\n        <version>2.5.0</version>\n    </dependency>\n```\n接下去就可以写相关接口和实现类啦，下面是一个简单的接口，用@WebService和@WebMethod注解(必要的)，还有别的一些注解\n```\n@WebService(serviceName = \"cyy\")\npublic interface Show {\n    @WebMethod(operationName = \"calc\")\n    Number showNumber(Double a);\n}\n```\n注解|作用\n--|:--:\n@WebService|标志这是一个webservice服务\n@WebService(serviceName = \"cyy\")|产生的服务的名称\n@WebService(name = \"ss\", targetNamespace = \"http://core/\")|修改命名空间\n@WebMethod(operationName = \"calc\")|修改方法名称\n@WebParam(name = \"num\")|修改参数名称\n@WebResult(name = \"returnNum\")|修改返回名称\n@WebMethod(exclude = true)|将制定的public方法排除，用户将不能访问\n\n这些后续测试访问的时候再提\n\n接下来就是配置web.xml\nWEB-INF/web.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app version=\"2.5\"\n         xmlns=\"http://java.sun.com/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\">\n    <!-- 配置 Spring 配置文件的名称和位置 -->\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/spring/cxf-beans.xml</param-value>\n    </context-param>\n    <!-- 启动 IOC 容器的 ServletContextListener -->\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n\n    <!-- 配置字符集 -->\n    <filter>\n        <filter-name>encodingFilter</filter-name>\n        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n        <init-param>\n            <param-name>encoding</param-name>\n            <param-value>UTF-8</param-value>\n        </init-param>\n        <init-param>\n            <param-name>forceEncoding</param-name>\n            <param-value>true</param-value>\n        </init-param>\n    </filter>\n    <filter-mapping>\n        <filter-name>encodingFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    <servlet>\n        <servlet-name>CXFServlet</servlet-name>\n        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>CXFServlet</servlet-name>\n        <!--==这个设置很重要，那么我们的webservice的地址就是http://localhost:8080/yourProgramName/webservice/Greeting=== -->\n        <url-pattern>/webservice/*</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n然后是spring配置\nWEB-INF/spring/cxf-beans.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:jaxws=\"http://cxf.apache.org/jaxws\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\nhttp://www.springframework.org/schema/beans/spring-beans-3.0.xsd\nhttp://www.springframework.org/schema/context\nhttp://www.springframework.org/schema/context/spring-context-3.0.xsd\nhttp://cxf.apache.org/jaxws\nhttp://cxf.apache.org/schemas/jaxws.xsd\">\n    <!--=============== 实现类的bean，需要spring注入 ============================-->\n    <bean id=\"IcxfWBImpl\" class=\"cxfWB.IcxfWBImpl\"/>\n    <jaxws:endpoint id=\"invoice\"  implementor=\"#IcxfWBImpl\"   address=\"/invoice\" />\n\n    <bean id=\"ShowImpl\" class=\"com.ShowImpl\"/>\n    <jaxws:endpoint id=\"one\" implementor=\"#ShowImpl\" address=\"/one\"/>\n</beans>\n```\n配置好了，就可以部署再tomcat上跑起来啦，http://localhost:7070/ws/webservice/one?wsdl可以访问。\n\n","source":"_posts/web-service.md","raw":"---\ntitle: web service -- spring + cxf 发布web service(1)\ndate: 2019-11-13 16:45:49\ntags: web service\n---\n\n今天又差点被web service搞崩溃，起因是在跟客户联调的时候报错：\n<!--more-->\nCouldn't create soap message. Expecting Envelop in namespace http://www.w3.org/2003/05/soap-envelope, \nbut got http://schemas.xmlsoap.org/soap/envelope/.\n(这还是他们提供的，说什么一定要一模一样，我真是不想吐槽。。。)\n经过一番百度，终于搞明白了是soap协议不一致导致的，前者是soap1.1，后者是soap1.2。\n我的服务使用Axis搭建的，我各种百度怎么改协议都失败了，这个需要之后继续研究。\n一气之下关了所有窗口，自己重写一个web service。\n鉴于之前用Endpoint.publish(*address, new MyFirstWebService()*)方法发布过web service，一直想用cxf框架搭一个，这次就用cxf吧。\n\n## 1. 准备\nIDE工具：idea\n\n## 2. 搭建\n\n先新建一个 maven project，创建出来后，会有一个pom.xml，这是maven项目的配置文件：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>core</groupId>\n    <artifactId>ws</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n    <name>My Cxf Web Service</name>\n    <url>http://maven.apache.org</url>\n\n    <dependencies>\n        <dependency>\n            。。。\n        </dependency>\n    </dependencies>\n    <build>\n        <finalName>ws</finalName>\n    </build>\n\n</project>\n```\n这边packaging配了war，就可以直接用maven的package指令打war包，name是项目的名字，version是版本号，finalName是war包包名\n可以看打包时候的部分输出\n```\n[INFO] ------------------------------< core:ws >-------------------------------\n[INFO] Building My Cxf Web Service 1.0-SNAPSHOT\n[INFO] --------------------------------[ war ]---------------------------------\n```\n在pom中引入cxf的jar包：\n```\n    <dependency>\n        <groupId>org.apache.cxf</groupId>\n        <artifactId>cxf-api</artifactId>\n        <version>2.5.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.cxf</groupId>\n        <artifactId>cxf-rt-frontend-jaxws</artifactId>\n        <version>2.5.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.cxf</groupId>\n        <artifactId>cxf-rt-bindings-soap</artifactId>\n        <version>2.5.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.cxf</groupId>\n        <artifactId>cxf-rt-transports-http</artifactId>\n        <version>2.5.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.cxf</groupId>\n        <artifactId>cxf-rt-ws-security</artifactId>\n        <version>2.5.0</version>\n    </dependency>\n```\n接下去就可以写相关接口和实现类啦，下面是一个简单的接口，用@WebService和@WebMethod注解(必要的)，还有别的一些注解\n```\n@WebService(serviceName = \"cyy\")\npublic interface Show {\n    @WebMethod(operationName = \"calc\")\n    Number showNumber(Double a);\n}\n```\n注解|作用\n--|:--:\n@WebService|标志这是一个webservice服务\n@WebService(serviceName = \"cyy\")|产生的服务的名称\n@WebService(name = \"ss\", targetNamespace = \"http://core/\")|修改命名空间\n@WebMethod(operationName = \"calc\")|修改方法名称\n@WebParam(name = \"num\")|修改参数名称\n@WebResult(name = \"returnNum\")|修改返回名称\n@WebMethod(exclude = true)|将制定的public方法排除，用户将不能访问\n\n这些后续测试访问的时候再提\n\n接下来就是配置web.xml\nWEB-INF/web.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app version=\"2.5\"\n         xmlns=\"http://java.sun.com/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\">\n    <!-- 配置 Spring 配置文件的名称和位置 -->\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/spring/cxf-beans.xml</param-value>\n    </context-param>\n    <!-- 启动 IOC 容器的 ServletContextListener -->\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n\n    <!-- 配置字符集 -->\n    <filter>\n        <filter-name>encodingFilter</filter-name>\n        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n        <init-param>\n            <param-name>encoding</param-name>\n            <param-value>UTF-8</param-value>\n        </init-param>\n        <init-param>\n            <param-name>forceEncoding</param-name>\n            <param-value>true</param-value>\n        </init-param>\n    </filter>\n    <filter-mapping>\n        <filter-name>encodingFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    <servlet>\n        <servlet-name>CXFServlet</servlet-name>\n        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>CXFServlet</servlet-name>\n        <!--==这个设置很重要，那么我们的webservice的地址就是http://localhost:8080/yourProgramName/webservice/Greeting=== -->\n        <url-pattern>/webservice/*</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n然后是spring配置\nWEB-INF/spring/cxf-beans.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:jaxws=\"http://cxf.apache.org/jaxws\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\nhttp://www.springframework.org/schema/beans/spring-beans-3.0.xsd\nhttp://www.springframework.org/schema/context\nhttp://www.springframework.org/schema/context/spring-context-3.0.xsd\nhttp://cxf.apache.org/jaxws\nhttp://cxf.apache.org/schemas/jaxws.xsd\">\n    <!--=============== 实现类的bean，需要spring注入 ============================-->\n    <bean id=\"IcxfWBImpl\" class=\"cxfWB.IcxfWBImpl\"/>\n    <jaxws:endpoint id=\"invoice\"  implementor=\"#IcxfWBImpl\"   address=\"/invoice\" />\n\n    <bean id=\"ShowImpl\" class=\"com.ShowImpl\"/>\n    <jaxws:endpoint id=\"one\" implementor=\"#ShowImpl\" address=\"/one\"/>\n</beans>\n```\n配置好了，就可以部署再tomcat上跑起来啦，http://localhost:7070/ws/webservice/one?wsdl可以访问。\n\n","slug":"web-service","published":1,"updated":"2019-11-13T08:45:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8cjxpvg000y40s6hooed085","content":"<p>今天又差点被web service搞崩溃，起因是在跟客户联调的时候报错：</p>\n<a id=\"more\"></a>\n<p>Couldn’t create soap message. Expecting Envelop in namespace <a href=\"http://www.w3.org/2003/05/soap-envelope\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/2003/05/soap-envelope</a>,<br>but got <a href=\"http://schemas.xmlsoap.org/soap/envelope/\" target=\"_blank\" rel=\"noopener\">http://schemas.xmlsoap.org/soap/envelope/</a>.<br>(这还是他们提供的，说什么一定要一模一样，我真是不想吐槽。。。)<br>经过一番百度，终于搞明白了是soap协议不一致导致的，前者是soap1.1，后者是soap1.2。<br>我的服务使用Axis搭建的，我各种百度怎么改协议都失败了，这个需要之后继续研究。<br>一气之下关了所有窗口，自己重写一个web service。<br>鉴于之前用Endpoint.publish(<em>address, new MyFirstWebService()</em>)方法发布过web service，一直想用cxf框架搭一个，这次就用cxf吧。</p>\n<h2 id=\"1-准备\"><a href=\"#1-准备\" class=\"headerlink\" title=\"1. 准备\"></a>1. 准备</h2><p>IDE工具：idea</p>\n<h2 id=\"2-搭建\"><a href=\"#2-搭建\" class=\"headerlink\" title=\"2. 搭建\"></a>2. 搭建</h2><p>先新建一个 maven project，创建出来后，会有一个pom.xml，这是maven项目的配置文件：</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class=\"line\">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;core&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;ws&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;war&lt;&#x2F;packaging&gt;</span><br><span class=\"line\">    &lt;name&gt;My Cxf Web Service&lt;&#x2F;name&gt;</span><br><span class=\"line\">    &lt;url&gt;http:&#x2F;&#x2F;maven.apache.org&lt;&#x2F;url&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            。。。</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;finalName&gt;ws&lt;&#x2F;finalName&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure></div>\n<p>这边packaging配了war，就可以直接用maven的package指令打war包，name是项目的名字，version是版本号，finalName是war包包名<br>可以看打包时候的部分输出</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] ------------------------------&lt; core:ws &gt;-------------------------------</span><br><span class=\"line\">[INFO] Building My Cxf Web Service 1.0-SNAPSHOT</span><br><span class=\"line\">[INFO] --------------------------------[ war ]---------------------------------</span><br></pre></td></tr></table></figure></div>\n<p>在pom中引入cxf的jar包：</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.cxf&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;cxf-api&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.5.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.cxf&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;cxf-rt-frontend-jaxws&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.5.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.cxf&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;cxf-rt-bindings-soap&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.5.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.cxf&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;cxf-rt-transports-http&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.5.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.cxf&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;cxf-rt-ws-security&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.5.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div>\n<p>接下去就可以写相关接口和实现类啦，下面是一个简单的接口，用@WebService和@WebMethod注解(必要的)，还有别的一些注解</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@WebService(serviceName &#x3D; &quot;cyy&quot;)</span><br><span class=\"line\">public interface Show &#123;</span><br><span class=\"line\">    @WebMethod(operationName &#x3D; &quot;calc&quot;)</span><br><span class=\"line\">    Number showNumber(Double a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@WebService</td>\n<td align=\"center\">标志这是一个webservice服务</td>\n</tr>\n<tr>\n<td>@WebService(serviceName = “cyy”)</td>\n<td align=\"center\">产生的服务的名称</td>\n</tr>\n<tr>\n<td>@WebService(name = “ss”, targetNamespace = “<a href=\"http://core/&quot;\" target=\"_blank\" rel=\"noopener\">http://core/&quot;</a>)</td>\n<td align=\"center\">修改命名空间</td>\n</tr>\n<tr>\n<td>@WebMethod(operationName = “calc”)</td>\n<td align=\"center\">修改方法名称</td>\n</tr>\n<tr>\n<td>@WebParam(name = “num”)</td>\n<td align=\"center\">修改参数名称</td>\n</tr>\n<tr>\n<td>@WebResult(name = “returnNum”)</td>\n<td align=\"center\">修改返回名称</td>\n</tr>\n<tr>\n<td>@WebMethod(exclude = true)</td>\n<td align=\"center\">将制定的public方法排除，用户将不能访问</td>\n</tr>\n</tbody></table>\n<p>这些后续测试访问的时候再提</p>\n<p>接下来就是配置web.xml<br>WEB-INF/web.xml</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;web-app version&#x3D;&quot;2.5&quot;</span><br><span class=\"line\">         xmlns&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class=\"line\">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee</span><br><span class=\"line\">    http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_2_5.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 配置 Spring 配置文件的名称和位置 --&gt;</span><br><span class=\"line\">    &lt;context-param&gt;</span><br><span class=\"line\">        &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class=\"line\">        &lt;param-value&gt;&#x2F;WEB-INF&#x2F;spring&#x2F;cxf-beans.xml&lt;&#x2F;param-value&gt;</span><br><span class=\"line\">    &lt;&#x2F;context-param&gt;</span><br><span class=\"line\">    &lt;!-- 启动 IOC 容器的 ServletContextListener --&gt;</span><br><span class=\"line\">    &lt;listener&gt;</span><br><span class=\"line\">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;</span><br><span class=\"line\">    &lt;&#x2F;listener&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 配置字符集 --&gt;</span><br><span class=\"line\">    &lt;filter&gt;</span><br><span class=\"line\">        &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class=\"line\">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class=\"line\">        &lt;init-param&gt;</span><br><span class=\"line\">            &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class=\"line\">            &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;</span><br><span class=\"line\">        &lt;&#x2F;init-param&gt;</span><br><span class=\"line\">        &lt;init-param&gt;</span><br><span class=\"line\">            &lt;param-name&gt;forceEncoding&lt;&#x2F;param-name&gt;</span><br><span class=\"line\">            &lt;param-value&gt;true&lt;&#x2F;param-value&gt;</span><br><span class=\"line\">        &lt;&#x2F;init-param&gt;</span><br><span class=\"line\">    &lt;&#x2F;filter&gt;</span><br><span class=\"line\">    &lt;filter-mapping&gt;</span><br><span class=\"line\">        &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class=\"line\">    &lt;&#x2F;filter-mapping&gt;</span><br><span class=\"line\">    &lt;servlet&gt;</span><br><span class=\"line\">        &lt;servlet-name&gt;CXFServlet&lt;&#x2F;servlet-name&gt;</span><br><span class=\"line\">        &lt;servlet-class&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;&#x2F;servlet-class&gt;</span><br><span class=\"line\">        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class=\"line\">    &lt;&#x2F;servlet&gt;</span><br><span class=\"line\">    &lt;servlet-mapping&gt;</span><br><span class=\"line\">        &lt;servlet-name&gt;CXFServlet&lt;&#x2F;servlet-name&gt;</span><br><span class=\"line\">        &lt;!--&#x3D;&#x3D;这个设置很重要，那么我们的webservice的地址就是http:&#x2F;&#x2F;localhost:8080&#x2F;yourProgramName&#x2F;webservice&#x2F;Greeting&#x3D;&#x3D;&#x3D; --&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;&#x2F;webservice&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class=\"line\">    &lt;&#x2F;servlet-mapping&gt;</span><br><span class=\"line\">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure></div>\n<p>然后是spring配置<br>WEB-INF/spring/cxf-beans.xml</p>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class=\"line\">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class=\"line\">       xmlns:jaxws&#x3D;&quot;http:&#x2F;&#x2F;cxf.apache.org&#x2F;jaxws&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class=\"line\">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-3.0.xsd</span><br><span class=\"line\">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class=\"line\">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context-3.0.xsd</span><br><span class=\"line\">http:&#x2F;&#x2F;cxf.apache.org&#x2F;jaxws</span><br><span class=\"line\">http:&#x2F;&#x2F;cxf.apache.org&#x2F;schemas&#x2F;jaxws.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;!--&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 实现类的bean，需要spring注入 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;--&gt;</span><br><span class=\"line\">    &lt;bean id&#x3D;&quot;IcxfWBImpl&quot; class&#x3D;&quot;cxfWB.IcxfWBImpl&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;jaxws:endpoint id&#x3D;&quot;invoice&quot;  implementor&#x3D;&quot;#IcxfWBImpl&quot;   address&#x3D;&quot;&#x2F;invoice&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id&#x3D;&quot;ShowImpl&quot; class&#x3D;&quot;com.ShowImpl&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;jaxws:endpoint id&#x3D;&quot;one&quot; implementor&#x3D;&quot;#ShowImpl&quot; address&#x3D;&quot;&#x2F;one&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></div>\n<p>配置好了，就可以部署再tomcat上跑起来啦，<a href=\"http://localhost:7070/ws/webservice/one?wsdl可以访问。\" target=\"_blank\" rel=\"noopener\">http://localhost:7070/ws/webservice/one?wsdl可以访问。</a></p>\n","site":{"data":{}},"excerpt":"<p>今天又差点被web service搞崩溃，起因是在跟客户联调的时候报错：</p>","more":"<p>Couldn’t create soap message. Expecting Envelop in namespace <a href=\"http://www.w3.org/2003/05/soap-envelope\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/2003/05/soap-envelope</a>,<br>but got <a href=\"http://schemas.xmlsoap.org/soap/envelope/\" target=\"_blank\" rel=\"noopener\">http://schemas.xmlsoap.org/soap/envelope/</a>.<br>(这还是他们提供的，说什么一定要一模一样，我真是不想吐槽。。。)<br>经过一番百度，终于搞明白了是soap协议不一致导致的，前者是soap1.1，后者是soap1.2。<br>我的服务使用Axis搭建的，我各种百度怎么改协议都失败了，这个需要之后继续研究。<br>一气之下关了所有窗口，自己重写一个web service。<br>鉴于之前用Endpoint.publish(<em>address, new MyFirstWebService()</em>)方法发布过web service，一直想用cxf框架搭一个，这次就用cxf吧。</p>\n<h2 id=\"1-准备\"><a href=\"#1-准备\" class=\"headerlink\" title=\"1. 准备\"></a>1. 准备</h2><p>IDE工具：idea</p>\n<h2 id=\"2-搭建\"><a href=\"#2-搭建\" class=\"headerlink\" title=\"2. 搭建\"></a>2. 搭建</h2><p>先新建一个 maven project，创建出来后，会有一个pom.xml，这是maven项目的配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class=\"line\">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;core&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;ws&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;war&lt;&#x2F;packaging&gt;</span><br><span class=\"line\">    &lt;name&gt;My Cxf Web Service&lt;&#x2F;name&gt;</span><br><span class=\"line\">    &lt;url&gt;http:&#x2F;&#x2F;maven.apache.org&lt;&#x2F;url&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            。。。</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;finalName&gt;ws&lt;&#x2F;finalName&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>\n<p>这边packaging配了war，就可以直接用maven的package指令打war包，name是项目的名字，version是版本号，finalName是war包包名<br>可以看打包时候的部分输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] ------------------------------&lt; core:ws &gt;-------------------------------</span><br><span class=\"line\">[INFO] Building My Cxf Web Service 1.0-SNAPSHOT</span><br><span class=\"line\">[INFO] --------------------------------[ war ]---------------------------------</span><br></pre></td></tr></table></figure>\n<p>在pom中引入cxf的jar包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.cxf&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;cxf-api&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.5.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.cxf&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;cxf-rt-frontend-jaxws&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.5.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.cxf&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;cxf-rt-bindings-soap&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.5.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.cxf&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;cxf-rt-transports-http&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.5.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.cxf&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;cxf-rt-ws-security&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.5.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>接下去就可以写相关接口和实现类啦，下面是一个简单的接口，用@WebService和@WebMethod注解(必要的)，还有别的一些注解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@WebService(serviceName &#x3D; &quot;cyy&quot;)</span><br><span class=\"line\">public interface Show &#123;</span><br><span class=\"line\">    @WebMethod(operationName &#x3D; &quot;calc&quot;)</span><br><span class=\"line\">    Number showNumber(Double a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@WebService</td>\n<td align=\"center\">标志这是一个webservice服务</td>\n</tr>\n<tr>\n<td>@WebService(serviceName = “cyy”)</td>\n<td align=\"center\">产生的服务的名称</td>\n</tr>\n<tr>\n<td>@WebService(name = “ss”, targetNamespace = “<a href=\"http://core/&quot;\" target=\"_blank\" rel=\"noopener\">http://core/&quot;</a>)</td>\n<td align=\"center\">修改命名空间</td>\n</tr>\n<tr>\n<td>@WebMethod(operationName = “calc”)</td>\n<td align=\"center\">修改方法名称</td>\n</tr>\n<tr>\n<td>@WebParam(name = “num”)</td>\n<td align=\"center\">修改参数名称</td>\n</tr>\n<tr>\n<td>@WebResult(name = “returnNum”)</td>\n<td align=\"center\">修改返回名称</td>\n</tr>\n<tr>\n<td>@WebMethod(exclude = true)</td>\n<td align=\"center\">将制定的public方法排除，用户将不能访问</td>\n</tr>\n</tbody></table>\n<p>这些后续测试访问的时候再提</p>\n<p>接下来就是配置web.xml<br>WEB-INF/web.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;web-app version&#x3D;&quot;2.5&quot;</span><br><span class=\"line\">         xmlns&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class=\"line\">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee</span><br><span class=\"line\">    http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_2_5.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 配置 Spring 配置文件的名称和位置 --&gt;</span><br><span class=\"line\">    &lt;context-param&gt;</span><br><span class=\"line\">        &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class=\"line\">        &lt;param-value&gt;&#x2F;WEB-INF&#x2F;spring&#x2F;cxf-beans.xml&lt;&#x2F;param-value&gt;</span><br><span class=\"line\">    &lt;&#x2F;context-param&gt;</span><br><span class=\"line\">    &lt;!-- 启动 IOC 容器的 ServletContextListener --&gt;</span><br><span class=\"line\">    &lt;listener&gt;</span><br><span class=\"line\">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;</span><br><span class=\"line\">    &lt;&#x2F;listener&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 配置字符集 --&gt;</span><br><span class=\"line\">    &lt;filter&gt;</span><br><span class=\"line\">        &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class=\"line\">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class=\"line\">        &lt;init-param&gt;</span><br><span class=\"line\">            &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class=\"line\">            &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;</span><br><span class=\"line\">        &lt;&#x2F;init-param&gt;</span><br><span class=\"line\">        &lt;init-param&gt;</span><br><span class=\"line\">            &lt;param-name&gt;forceEncoding&lt;&#x2F;param-name&gt;</span><br><span class=\"line\">            &lt;param-value&gt;true&lt;&#x2F;param-value&gt;</span><br><span class=\"line\">        &lt;&#x2F;init-param&gt;</span><br><span class=\"line\">    &lt;&#x2F;filter&gt;</span><br><span class=\"line\">    &lt;filter-mapping&gt;</span><br><span class=\"line\">        &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class=\"line\">    &lt;&#x2F;filter-mapping&gt;</span><br><span class=\"line\">    &lt;servlet&gt;</span><br><span class=\"line\">        &lt;servlet-name&gt;CXFServlet&lt;&#x2F;servlet-name&gt;</span><br><span class=\"line\">        &lt;servlet-class&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;&#x2F;servlet-class&gt;</span><br><span class=\"line\">        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class=\"line\">    &lt;&#x2F;servlet&gt;</span><br><span class=\"line\">    &lt;servlet-mapping&gt;</span><br><span class=\"line\">        &lt;servlet-name&gt;CXFServlet&lt;&#x2F;servlet-name&gt;</span><br><span class=\"line\">        &lt;!--&#x3D;&#x3D;这个设置很重要，那么我们的webservice的地址就是http:&#x2F;&#x2F;localhost:8080&#x2F;yourProgramName&#x2F;webservice&#x2F;Greeting&#x3D;&#x3D;&#x3D; --&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;&#x2F;webservice&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class=\"line\">    &lt;&#x2F;servlet-mapping&gt;</span><br><span class=\"line\">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure>\n<p>然后是spring配置<br>WEB-INF/spring/cxf-beans.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class=\"line\">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class=\"line\">       xmlns:jaxws&#x3D;&quot;http:&#x2F;&#x2F;cxf.apache.org&#x2F;jaxws&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class=\"line\">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-3.0.xsd</span><br><span class=\"line\">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class=\"line\">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context-3.0.xsd</span><br><span class=\"line\">http:&#x2F;&#x2F;cxf.apache.org&#x2F;jaxws</span><br><span class=\"line\">http:&#x2F;&#x2F;cxf.apache.org&#x2F;schemas&#x2F;jaxws.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;!--&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 实现类的bean，需要spring注入 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;--&gt;</span><br><span class=\"line\">    &lt;bean id&#x3D;&quot;IcxfWBImpl&quot; class&#x3D;&quot;cxfWB.IcxfWBImpl&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;jaxws:endpoint id&#x3D;&quot;invoice&quot;  implementor&#x3D;&quot;#IcxfWBImpl&quot;   address&#x3D;&quot;&#x2F;invoice&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id&#x3D;&quot;ShowImpl&quot; class&#x3D;&quot;com.ShowImpl&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;jaxws:endpoint id&#x3D;&quot;one&quot; implementor&#x3D;&quot;#ShowImpl&quot; address&#x3D;&quot;&#x2F;one&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>\n<p>配置好了，就可以部署再tomcat上跑起来啦，<a href=\"http://localhost:7070/ws/webservice/one?wsdl可以访问。\" target=\"_blank\" rel=\"noopener\">http://localhost:7070/ws/webservice/one?wsdl可以访问。</a></p>"}],"PostAsset":[{"_id":"source/_posts/javaScript-1/function.png","slug":"function.png","post":"ck8cjxpv5000h40s61l9e7xsq","modified":1,"renderable":0},{"_id":"source/_posts/react/package.png","post":"ck8cjxpvb000q40s6euhh2xh2","slug":"package.png","modified":1,"renderable":1},{"_id":"source/_posts/git/git四大区.jpg","post":"ck8cjxpux000640s6he6t7pvf","slug":"git四大区.jpg","modified":1,"renderable":1},{"_id":"source/_posts/git/git文件四种状态.png","post":"ck8cjxpux000640s6he6t7pvf","slug":"git文件四种状态.png","modified":1,"renderable":1},{"_id":"source/_posts/git/状态转变.jpeg","post":"ck8cjxpux000640s6he6t7pvf","slug":"状态转变.jpeg","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ck8cjxpup000140s6hgtf3s9i","tag_id":"ck8cjxpus000340s6g15i88c7","_id":"ck8cjxpuy000840s62s9j23v1"},{"post_id":"ck8cjxpur000240s641mvb99w","tag_id":"ck8cjxpux000740s69qqbd1oj","_id":"ck8cjxpv2000d40s6ejd2c2ac"},{"post_id":"ck8cjxpv2000c40s676s740dz","tag_id":"ck8cjxpux000740s69qqbd1oj","_id":"ck8cjxpv5000g40s6cwvvgmdq"},{"post_id":"ck8cjxpuu000440s63blm2pyq","tag_id":"ck8cjxpux000740s69qqbd1oj","_id":"ck8cjxpv6000i40s6fr9e19iy"},{"post_id":"ck8cjxpv3000e40s6681ng5qg","tag_id":"ck8cjxpux000740s69qqbd1oj","_id":"ck8cjxpv8000l40s6g3fn9ewx"},{"post_id":"ck8cjxpuv000540s6gu7n2ai0","tag_id":"ck8cjxpv4000f40s660sy53d0","_id":"ck8cjxpva000n40s62mv1dyba"},{"post_id":"ck8cjxpux000640s6he6t7pvf","tag_id":"ck8cjxpv8000k40s6ax9661yx","_id":"ck8cjxpvc000r40s66t2f0zil"},{"post_id":"ck8cjxpuz000a40s68qbw7xw2","tag_id":"ck8cjxpv4000f40s660sy53d0","_id":"ck8cjxpve000v40s6bkihd7g6"},{"post_id":"ck8cjxpve000u40s6089o9whq","tag_id":"ck8cjxpux000740s69qqbd1oj","_id":"ck8cjxpvg000x40s66qxw1bhv"},{"post_id":"ck8cjxpv5000h40s61l9e7xsq","tag_id":"ck8cjxpvd000t40s64yut9oov","_id":"ck8cjxpvh001040s6bn4c9gcs"},{"post_id":"ck8cjxpv7000j40s6fq3r7prj","tag_id":"ck8cjxpvg000z40s601ufc5dy","_id":"ck8cjxpvi001240s68r9q8bev"},{"post_id":"ck8cjxpv9000m40s68j7xc9gx","tag_id":"ck8cjxpvi001140s636t2c1hc","_id":"ck8cjxpvj001440s6fo9l282x"},{"post_id":"ck8cjxpva000o40s6277z7dlk","tag_id":"ck8cjxpvg000z40s601ufc5dy","_id":"ck8cjxpvk001640s6cpw0du4i"},{"post_id":"ck8cjxpvb000q40s6euhh2xh2","tag_id":"ck8cjxpvk001540s64dv8hl3t","_id":"ck8cjxpvl001840s6dbc22tmz"},{"post_id":"ck8cjxpvc000s40s6541919fb","tag_id":"ck8cjxpvl001740s68cobhzqf","_id":"ck8cjxpvm001a40s68legcaa4"},{"post_id":"ck8cjxpvf000w40s6f77070yg","tag_id":"ck8cjxpvm001940s65mwl5f7x","_id":"ck8cjxpvn001c40s69p0cffnk"},{"post_id":"ck8cjxpvg000y40s6hooed085","tag_id":"ck8cjxpvm001940s65mwl5f7x","_id":"ck8cjxpvn001d40s665q2beev"}],"Tag":[{"name":"Mac","_id":"ck8cjxpus000340s6g15i88c7"},{"name":"linux","_id":"ck8cjxpux000740s69qqbd1oj"},{"name":"css","_id":"ck8cjxpv4000f40s660sy53d0"},{"name":"版本控制","_id":"ck8cjxpv8000k40s6ax9661yx"},{"name":"javaScript","_id":"ck8cjxpvd000t40s64yut9oov"},{"name":"数据库","_id":"ck8cjxpvg000z40s601ufc5dy"},{"name":"服务","_id":"ck8cjxpvi001140s636t2c1hc"},{"name":"前端","_id":"ck8cjxpvk001540s64dv8hl3t"},{"name":"spring","_id":"ck8cjxpvl001740s68cobhzqf"},{"name":"web service","_id":"ck8cjxpvm001940s65mwl5f7x"}]}}